{
  "items": [
    {
      "title": "C++ Basics",
      "content": [
        {
          "tag_line": "C++ Overview",
        
          "details": [
            "<h2>C++ Overview</h2>\n\n<p>C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming.</p>\n\n<p>C++ is regarded as a <b>middle-level</b> language, as it comprises a combination of both high-level and low-level language features.</p>\n\n<p>C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey, as an enhancement to the C language and originally named C with Classes but later it was renamed C++ in 1983.</p>\n\n<p>C++ is a superset of C, and that virtually any legal C program is a legal C++ program.</p>\n\n<p><b>Note</b> &minus; A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time.</p>\n\n<h2>Object-Oriented Programming</h2>\n\n<p>C++ fully supports object-oriented programming, including the four pillars of object-oriented development &minus;</p>\n\n<ul class=\"list\">\n\t<li>Encapsulation</li>\n\t<li>Data hiding</li>\n\t<li>Inheritance</li>\n\t<li>Polymorphism</li>\n</ul>\n\n<h2>Standard Libraries</h2>\n\n<p>Standard C++ consists of three important parts &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The core language giving all the building blocks including variables, data types and literals, etc.</p>\n\t</li>\n\t<li>\n\t<p>The C++ Standard Library giving a rich set of functions manipulating files, strings, etc.</p>\n\t</li>\n\t<li>\n\t<p>The Standard Template Library (STL) giving a rich set of methods manipulating data structures, etc.</p>\n\t</li>\n</ul>\n\n<h2>The ANSI Standard</h2>\n\n<p>The ANSI standard is an attempt to ensure that C++ is portable; that code you write for Microsoft&#39;s compiler will compile without errors, using a compiler on a Mac, UNIX, a Windows box, or an Alpha.</p>\n\n<p>The ANSI standard has been stable for a while, and all the major C++ compiler manufacturers support the ANSI standard.</p>\n\n<h2>Learning C++</h2>\n\n<p>The most important thing while learning C++ is to focus on concepts.</p>\n\n<p>The purpose of learning a programming language is to become a better programmer; that is, to become more effective at designing and implementing new systems and at maintaining old ones.</p>\n\n<p>C++ supports a variety of programming styles. You can write in the style of Fortran, C, Smalltalk, etc., in any language. Each style can achieve its aims effectively while maintaining runtime and space efficiency.</p>\n\n<h2>Use of C++</h2>\n\n<p>C++ is used by hundreds of thousands of programmers in essentially every application domain.</p>\n\n<p>C++ is being highly used to write device drivers and other software that rely on direct manipulation of hardware under realtime constraints.</p>\n\n<p>C++ is widely used for teaching and research because it is clean enough for successful teaching of basic concepts.</p>\n\n<p>Anyone who has used either an Apple Macintosh or a PC running Windows has indirectly used C++ because the primary user interfaces of these systems are written in C++.</p>\n"
          ]
        },
        {
          "tag_line": "C++ Environment Setup",
        
          "details": [
            "<h2>C++ Environment Setup</h2>\n\n<h2>Local Environment Setup</h2>\n\n<p>If you are still willing to set up your environment for C++, you need to have the following two softwares on your computer.</p>\n\n<h3>Text Editor</h3>\n\n<p>This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi.</p>\n\n<p>Name and version of text editor can vary on different operating systems. For example, Notepad will be used on Windows and vim or vi can be used on windows as well as Linux, or UNIX.</p>\n\n<p>The files you create with your editor are called source files and for C++ they typically are named with the extension .cpp, .cp, or .c.</p>\n\n<p>A text editor should be in place to start your C++ programming.</p>\n\n<h3>C++ Compiler</h3>\n\n<p>This is an actual C++ compiler, which will be used to compile your source code into final executable program.</p>\n\n<p>Most C++ compilers don&#39;t care what extension you give to your source code, but if you don&#39;t specify otherwise, many will use .cpp by default.</p>\n\n<p>Most frequently used and free available compiler is GNU C/C++ compiler, otherwise you can have compilers either from HP or Solaris if you have the respective Operating Systems.</p>\n\n<h2>Installing GNU C/C++ Compiler</h2>\n\n<h3>UNIX/Linux Installation</h3>\n\n<p>If you are using <b>Linux or UNIX</b> then check whether GCC is installed on your system by entering the following command from the command line &minus;</p>\n\n<pre class=\"result notranslate\">\n$ g++ -v\n</pre>\n\n<p>If you have installed GCC, then it should print a message such as the following &minus;</p>\n\n<pre class=\"result notranslate\">\nUsing built-in specs.\nTarget: i386-redhat-linux\nConfigured with: ../configure --prefix=/usr .......\nThread model: posix\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\n</pre>\n\n<p>If GCC is not installed, then you will have to install it yourself using the detailed instructions available at <a href=\"https://gcc.gnu.org/install/\" target=\"_blank\">https://gcc.gnu.org/install/</a></p>\n\n<h3>Mac OS X Installation</h3>\n\n<p>If you use Mac OS X, the easiest way to obtain GCC is to download the Xcode development environment from Apple&#39;s website and follow the simple installation instructions.</p>\n\n<p>Xcode is currently available at <a href=\"https://developer.apple.com/technologies/tools/\" target=\"_blank\">developer.apple.com/technologies/tools/</a>.</p>\n\n<h3>Windows Installation</h3>\n\n<p>To install GCC at Windows you need to install MinGW. To install MinGW, go to the MinGW homepage, <a href=\"http://www.mingw.org\" target=\"_blank\">www.mingw.org</a>, and follow the link to the MinGW download page. Download the latest version of the MinGW installation program which should be named MinGW-&lt;version&gt;.exe.</p>\n\n<p>While installing MinGW, at a minimum, you must install gcc-core, gcc-g++, binutils, and the MinGW runtime, but you may wish to install more.</p>\n\n<p>Add the bin subdirectory of your MinGW installation to your <b>PATH</b> environment variable so that you can specify these tools on the command line by their simple names.</p>\n\n<p>When the installation is complete, you will be able to run gcc, g++, ar, ranlib, dlltool, and several other GNU tools from the Windows command line.</p>\n\n<hr />"
          ]
        },
        {
          "tag_line": "C++ Basic Syntax",
        
          "details": [
            "<h2>C++ Basic Syntax</h2>\n\n<p>When we consider a C++ program, it can be defined as a collection of objects that communicate via invoking each other&#39;s methods. Let us now briefly look into what a class, object, methods, and instant variables mean.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Object</b> &minus; Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors - wagging, barking, eating. An object is an instance of a class.</p>\n\t</li>\n\t<li>\n\t<p><b>Class</b> &minus; A class can be defined as a template/blueprint that describes the behaviors/states that object of its type support.</p>\n\t</li>\n\t<li>\n\t<p><b>Methods</b> &minus; A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.</p>\n\t</li>\n\t<li>\n\t<p><b>Instance Variables</b> &minus; Each object has its unique set of instance variables. An object&#39;s state is created by the values assigned to these instance variables.</p>\n\t</li>\n</ul>\n\n<h2>C++ Program Structure</h2>\n\n<p>Let us look at a simple code that would print the words <i>Hello World</i>.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/n4BVuS\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">// main() is where program execution begins.</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello World&quot;</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// prints Hello World</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>Let us look at the various parts of the above program &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The C++ language defines several headers, which contain information that is either necessary or useful to your program. For this program, the header <b>&lt;iostream&gt;</b> is needed.</p>\n\t</li>\n\t<li>\n\t<p>The line <b>using namespace std;</b> tells the compiler to use the std namespace. Namespaces are a relatively recent addition to C++.</p>\n\t</li>\n\t<li>\n\t<p>The next line &#39;<b>// main() is where program execution begins.</b>&#39; is a single-line comment available in C++. Single-line comments begin with // and stop at the end of the line.</p>\n\t</li>\n\t<li>\n\t<p>The line <b>int main()</b> is the main function where program execution begins.</p>\n\t</li>\n\t<li>\n\t<p>The next line <b>cout &lt;&lt; &quot;Hello World&quot;;</b> causes the message &quot;Hello World&quot; to be displayed on the screen.</p>\n\t</li>\n\t<li>\n\t<p>The next line <b>return 0;</b> terminates main( )function and causes it to return the value 0 to the calling process.</p>\n\t</li>\n</ul>\n\n<h2>Compile and Execute C++ Program</h2>\n\n<p>Let&#39;s look at how to save the file, compile and run the program. Please follow the steps given below &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Open a text editor and add the code as above.</p>\n\t</li>\n\t<li>\n\t<p>Save the file as: hello.cpp</p>\n\t</li>\n\t<li>\n\t<p>Open a command prompt and go to the directory where you saved the file.</p>\n\t</li>\n\t<li>\n\t<p>Type &#39;g++ hello.cpp&#39; and press enter to compile your code. If there are no errors in your code the command prompt will take you to the next line and would generate a.out executable file.</p>\n\t</li>\n\t<li>\n\t<p>Now, type &#39;a.out&#39; to run your program.</p>\n\t</li>\n\t<li>\n\t<p>You will be able to see &#39; Hello World &#39; printed on the window.</p>\n\t</li>\n</ul>\n\n<pre class=\"result notranslate\">\n$ g++ hello.cpp\n$ ./a.out\nHello World\n</pre>\n\n<p>Make sure that g++ is in your path and that you are running it in the directory containing file hello.cpp.</p>\n\n<p>You can compile C/C++ programs using makefile. For more details, you can check our <a href=\"https://www.tutorialspoint.com/makefile/index.htm\" rel=\"nofollow\" target=\"_blank\">&#39;Makefile Tutorial&#39;</a>.</p>\n\n<h2>Semicolons and Blocks in C++</h2>\n\n<p>In C++, the semicolon is a statement terminator. That is, each individual statement must be ended with a semicolon. It indicates the end of one logical entity.</p>\n\n<p>For example, following are three different statements &minus;</p>\n\n<pre class=\"result notranslate\">\nx = y;\ny = y + 1;\nadd(x, y);\n</pre>\n\n<p>A block is a set of logically connected statements that are surrounded by opening and closing braces. For example &minus;</p>\n\n<pre class=\"result notranslate\">\n{\n   cout &lt;&lt; &quot;Hello World&quot;; // prints Hello World\n   return 0;\n}\n</pre>\n\n<p>C++ does not recognize the end of the line as a terminator. For this reason, it does not matter where you put a statement in a line. For example &minus;</p>\n\n<pre class=\"result notranslate\">\nx = y;\ny = y + 1;\nadd(x, y);\n</pre>\n\n<p>is the same as</p>\n\n<pre class=\"result notranslate\">\nx = y; y = y + 1; add(x, y);\n</pre>\n\n<h2>C++ Identifiers</h2>\n\n<p>A C++ identifier is a name used to identify a variable, function, class, module, or any other user-defined item. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9).</p>\n\n<p>C++ does not allow punctuation characters such as @, $, and % within identifiers. C++ is a case-sensitive programming language. Thus, <b>Manpower</b> and <b>manpower</b> are two different identifiers in C++.</p>\n\n<p>Here are some examples of acceptable identifiers &minus;</p>\n\n<pre class=\"result notranslate\">\nmohd       zara    abc   move_name  a_123\nmyname50   _temp   j     a23b9      retVal\n</pre>\n\n<h2>C++ Keywords</h2>\n\n<p>The following list shows the reserved words in C++. These reserved words may not be used as constant or variable or any other identifier names.</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>asm</td>\n\t\t\t<td>else</td>\n\t\t\t<td>new</td>\n\t\t\t<td>this</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>auto</td>\n\t\t\t<td>enum</td>\n\t\t\t<td>operator</td>\n\t\t\t<td>throw</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>bool</td>\n\t\t\t<td>explicit</td>\n\t\t\t<td>private</td>\n\t\t\t<td>true</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>break</td>\n\t\t\t<td>export</td>\n\t\t\t<td>protected</td>\n\t\t\t<td>try</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>case</td>\n\t\t\t<td>extern</td>\n\t\t\t<td>public</td>\n\t\t\t<td>typedef</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>catch</td>\n\t\t\t<td>false</td>\n\t\t\t<td>register</td>\n\t\t\t<td>typeid</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>char</td>\n\t\t\t<td>float</td>\n\t\t\t<td>reinterpret_cast</td>\n\t\t\t<td>typename</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>class</td>\n\t\t\t<td>for</td>\n\t\t\t<td>return</td>\n\t\t\t<td>union</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>const</td>\n\t\t\t<td>friend</td>\n\t\t\t<td>short</td>\n\t\t\t<td>unsigned</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>const_cast</td>\n\t\t\t<td>goto</td>\n\t\t\t<td>signed</td>\n\t\t\t<td>using</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>continue</td>\n\t\t\t<td>if</td>\n\t\t\t<td>sizeof</td>\n\t\t\t<td>virtual</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>default</td>\n\t\t\t<td>inline</td>\n\t\t\t<td>static</td>\n\t\t\t<td>void</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>delete</td>\n\t\t\t<td>int</td>\n\t\t\t<td>static_cast</td>\n\t\t\t<td>volatile</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>do</td>\n\t\t\t<td>long</td>\n\t\t\t<td>struct</td>\n\t\t\t<td>wchar_t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>double</td>\n\t\t\t<td>mutable</td>\n\t\t\t<td>switch</td>\n\t\t\t<td>while</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>dynamic_cast</td>\n\t\t\t<td>namespace</td>\n\t\t\t<td>template</td>\n\t\t\t<td>&nbsp;</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Trigraphs</h2>\n\n<p>A few characters have an alternative representation, called a trigraph sequence. A trigraph is a three-character sequence that represents a single character and the sequence always starts with two question marks.</p>\n\n<p>Trigraphs are expanded anywhere they appear, including within string literals and character literals, in comments, and in preprocessor directives.</p>\n\n<p>Following are most frequently used trigraph sequences &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\">Trigraph</th>\n\t\t\t<th style=\"text-align:center;\">Replacement</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??=</td>\n\t\t\t<td>#</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??/</td>\n\t\t\t<td>\\</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??&#39;</td>\n\t\t\t<td>^</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??(</td>\n\t\t\t<td>[</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??)</td>\n\t\t\t<td>]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??!</td>\n\t\t\t<td>|</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??&lt;</td>\n\t\t\t<td>{</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??&gt;</td>\n\t\t\t<td>}</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??-</td>\n\t\t\t<td>~</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>All the compilers do not support trigraphs and they are not advised to be used because of their confusing nature.</p>\n\n<h2>Whitespace in C++</h2>\n\n<p>A line containing only whitespace, possibly with a comment, is known as a blank line, and C++ compiler totally ignores it.</p>\n\n<p>Whitespace is the term used in C++ to describe blanks, tabs, newline characters and comments. Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins.</p>\n\n<h3>Statement 1</h3>\n\n<pre class=\"result notranslate\">\nint age;\n</pre>\n\n<p>In the above statement there must be at least one whitespace character (usually a space) between int and age for the compiler to be able to distinguish them.</p>\n\n<h3>Statement 2</h3>\n\n<pre class=\"result notranslate\">\nfruit = apples + oranges;   // Get the total fruit\n</pre>\n\n<p>In the above statement 2, no whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some if you wish for readability purpose.</p>\n"
          ]
        },
        {
          "tag_line": "Comments in C++",
          "details": [
            "<h2>Comments in C++</h2>\n\n<p>Program comments are explanatory statements that you can include in the C++ code. These comments help anyone reading the source code. All programming languages allow for some form of comments.</p>\n\n<p>C++ supports single-line and multi-line comments. All characters available inside any comment are ignored by C++ compiler.</p>\n\n<p>C++ comments start with /* and end with */. For example &minus;</p>\n\n<pre class=\"result notranslate\">\n/* This is a comment */\n\n/* C++ comments can also\n   * span multiple lines\n*/\n</pre>\n\n<p>A comment can also start with //, extending to the end of the line. For example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/Q4esaC\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\nmain</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello World&quot;</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// prints Hello World</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled, it will ignore <b>// prints Hello World</b> and final executable will produce the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nHello World\n</pre>\n\n<p>Within a /* and */ comment, // characters have no special meaning. Within a // comment, /* and */ have no special meaning. Thus, you can &quot;nest&quot; one kind of comment within the other kind. For example &minus;</p>\n\n<pre class=\"result notranslate\">\n/* Comment out printing of Hello World:\n\ncout &lt;&lt; &quot;Hello World&quot;; // prints Hello World\n\n*/\n</pre>\n\n<hr />"
          ]
        },
        {
          "tag_line": "C++ Data Types",
        
          "details": [
            "<h2>C++ Data Types</h2>\n\n<p>While writing program in any language, you need to use various variables to store various information. Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>\n\n<p>You may like to store information of various data types like character, wide character, integer, floating point, double floating point, boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.</p>\n\n<h2>Primitive Built-in Types</h2>\n\n<p>C++ offers the programmer a rich assortment of built-in as well as user defined data types. Following table lists down seven basic C++ data types &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"50%\">Type</th>\n\t\t\t<th style=\"text-align:center;\">Keyword</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Boolean</td>\n\t\t\t<td>bool</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Character</td>\n\t\t\t<td>char</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Integer</td>\n\t\t\t<td>int</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Floating point</td>\n\t\t\t<td>float</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Double floating point</td>\n\t\t\t<td>double</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Valueless</td>\n\t\t\t<td>void</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Wide character</td>\n\t\t\t<td>wchar_t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Several of the basic types can be modified using one or more of these type modifiers &minus;</p>\n\n<ul class=\"list\">\n\t<li>signed</li>\n\t<li>unsigned</li>\n\t<li>short</li>\n\t<li>long</li>\n</ul>\n\n<p>The following table shows the variable type, how much memory it takes to store the value in memory, and what is maximum and minimum value which can be stored in such type of variables.</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\">Type</th>\n\t\t\t<th style=\"text-align:center;\">Typical Bit Width</th>\n\t\t\t<th style=\"text-align:center;\">Typical Range</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>char</td>\n\t\t\t<td>1byte</td>\n\t\t\t<td>-127 to 127 or 0 to 255</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>unsigned char</td>\n\t\t\t<td>1byte</td>\n\t\t\t<td>0 to 255</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>signed char</td>\n\t\t\t<td>1byte</td>\n\t\t\t<td>-127 to 127</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>-2147483648 to 2147483647</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>unsigned int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>0 to 4294967295</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>signed int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>-2147483648 to 2147483647</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>short int</td>\n\t\t\t<td>2bytes</td>\n\t\t\t<td>-32768 to 32767</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>unsigned short int</td>\n\t\t\t<td>Range</td>\n\t\t\t<td>0 to 65,535</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>signed short int</td>\n\t\t\t<td>Range</td>\n\t\t\t<td>-32768 to 32767</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>long int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>-2,147,483,648 to 2,147,483,647</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>signed long int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>same as long int</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>unsigned long int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>0 to 4,294,967,295</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>float</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>+/- 3.4e +/- 38 (~7 digits)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>double</td>\n\t\t\t<td>8bytes</td>\n\t\t\t<td>+/- 1.7e +/- 308 (~15 digits)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>long double</td>\n\t\t\t<td>8bytes</td>\n\t\t\t<td>+/- 1.7e +/- 308 (~15 digits)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>wchar_t</td>\n\t\t\t<td>2 or 4 bytes</td>\n\t\t\t<td>1 wide character</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The size of variables might be different from those shown in the above table, depending on the compiler and the computer you are using.</p>\n\n<p>Following is the example, which will produce correct size of various data types on your computer.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/iKNn78\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of char : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">char</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of int : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of short int : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">short</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of long int : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">long</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of float : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">float</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of double : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">double</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of wchar_t : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"typ\">wchar_t</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>This example uses <b>endl</b>, which inserts a new-line character after every line and &lt;&lt; operator is being used to pass multiple values out to the screen. We are also using <b>sizeof()</b> operator to get size of various data types.</p>\n\n<p>When the above code is compiled and executed, it produces the following result which can vary from machine to machine &minus;</p>\n\n<pre class=\"result notranslate\">\nSize of char : 1\nSize of int : 4\nSize of short int : 2\nSize of long int : 4\nSize of float : 4\nSize of double : 8\nSize of wchar_t : 4\n</pre>\n\n<h2>typedef Declarations</h2>\n\n<p>You can create a new name for an existing type using <b>typedef</b>. Following is the simple syntax to define a new type using typedef &minus;</p>\n\n<pre class=\"result notranslate\">\ntypedef type newname; \n</pre>\n\n<p>For example, the following tells the compiler that feet is another name for int &minus;</p>\n\n<pre class=\"result notranslate\">\ntypedef int feet;\n</pre>\n\n<p>Now, the following declaration is perfectly legal and creates an integer variable called distance &minus;</p>\n\n<pre class=\"result notranslate\">\nfeet distance;\n</pre>\n\n<h2>Enumerated Types</h2>\n\n<p>An enumerated type declares an optional type name and a set of zero or more identifiers that can be used as values of the type. Each enumerator is a constant whose type is the enumeration.</p>\n\n<p>Creating an enumeration requires the use of the keyword <b>enum</b>. The general form of an enumeration type is &minus;</p>\n\n<pre class=\"result notranslate\">\nenum enum-name { list of names } var-list; \n</pre>\n\n<p>Here, the enum-name is the enumeration&#39;s type name. The list of names is comma separated.</p>\n\n<p>For example, the following code defines an enumeration of colors called colors and the variable c of type color. Finally, c is assigned the value &quot;blue&quot;.</p>\n\n<pre class=\"result notranslate\">\nenum color { red, green, blue } c;\nc = blue;\n</pre>\n\n<p>By default, the value of the first name is 0, the second name has the value 1, and the third has the value 2, and so on. But you can give a name, a specific value by adding an initializer. For example, in the following enumeration, <b>green</b> will have the value 5.</p>\n\n<pre class=\"result notranslate\">\nenum color { red, green = 5, blue };\n</pre>\n\n<p>Here, <b>blue</b> will have a value of 6 because each name will be one greater than the one that precedes it.</p>\n"
          ]
        },
        {
          "tag_line": "C++ Variable Types",
        
          "details": [
            "<h2>C++ Variable Types</h2>\n\n<p>A variable provides us with named storage that our programs can manipulate. Each variable in C++ has a specific type, which determines the size and layout of the variable&#39;s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>\n\n<p>The name of a variable can be composed of letters, digits, and the underscore character. It must begin with either a letter or an underscore. Upper and lowercase letters are distinct because C++ is case-sensitive &minus;</p>\n\n<p>There are following basic types of variable in C++ as explained in last chapter &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%\">Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Type &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td>\n\t\t\t<p><b>bool</b></p>\n\n\t\t\t<p>Stores either value true or false.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td>\n\t\t\t<p><b>char</b></p>\n\n\t\t\t<p>Typically a single octet (one byte). This is an integer type.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td>\n\t\t\t<p><b>int</b></p>\n\n\t\t\t<p>The most natural size of integer for the machine.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td>\n\t\t\t<p><b>float</b></p>\n\n\t\t\t<p>A single-precision floating point value.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td>\n\t\t\t<p><b>double</b></p>\n\n\t\t\t<p>A double-precision floating point value.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">6</td>\n\t\t\t<td>\n\t\t\t<p><b>void</b></p>\n\n\t\t\t<p>Represents the absence of type.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">7</td>\n\t\t\t<td>\n\t\t\t<p><b>wchar_t</b></p>\n\n\t\t\t<p>A wide character type.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>C++ also allows to define various other types of variables, which we will cover in subsequent chapters like <b>Enumeration, Pointer, Array, Reference, Data structures,</b> and <b>Classes</b>.</p>\n\n<p>Following section will cover how to define, declare and use various types of variables.</p>\n\n<h2>Variable Definition in C++</h2>\n\n<p>A variable definition tells the compiler where and how much storage to create for the variable. A variable definition specifies a data type, and contains a list of one or more variables of that type as follows &minus;</p>\n\n<pre class=\"result notranslate\">\ntype variable_list;\n</pre>\n\n<p>Here, <b>type</b> must be a valid C++ data type including char, w_char, int, float, double, bool or any user-defined object, etc., and <b>variable_list</b> may consist of one or more identifier names separated by commas. Some valid declarations are shown here &minus;</p>\n\n<pre class=\"result notranslate\">\nint    i, j, k;\nchar   c, ch;\nfloat  f, salary;\ndouble d;\n</pre>\n\n<p>The line <b>int i, j, k;</b> both declares and defines the variables i, j and k; which instructs the compiler to create variables named i, j and k of type int.</p>\n\n<p>Variables can be initialized (assigned an initial value) in their declaration. The initializer consists of an equal sign followed by a constant expression as follows &minus;</p>\n\n<pre class=\"result notranslate\">\ntype variable_name = value;\n</pre>\n\n<p>Some examples are &minus;</p>\n\n<pre class=\"result notranslate\">\nextern int d = 3, f = 5;    // declaration of d and f. \nint d = 3, f = 5;           // definition and initializing d and f. \nbyte z = 22;                // definition and initializes z. \nchar x = &#39;x&#39;;               // the variable x has the value &#39;x&#39;.\n</pre>\n\n<p>For definition without an initializer: variables with static storage duration are implicitly initialized with NULL (all bytes have the value 0); the initial value of all other variables is undefined.</p>\n\n<h2>Variable Declaration in C++</h2>\n\n<p>A variable declaration provides assurance to the compiler that there is one variable existing with the given type and name so that compiler proceed for further compilation without needing complete detail about the variable. A variable declaration has its meaning at the time of compilation only, compiler needs actual variable definition at the time of linking of the program.</p>\n\n<p>A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking of the program. You will use <b>extern</b> keyword to declare a variable at any place. Though you can declare a variable multiple times in your C++ program, but it can be defined only once in a file, a function or a block of code.</p>\n\n<h3>Example</h3>\n\n<p>Try the following example where a variable has been declared at the top, but it has been defined inside the main function &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/odXXRO\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">// Variable declaration:</span><span class=\"pln\">\n</span><span class=\"kwd\">extern</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">extern</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> c</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">extern</span><span class=\"pln\"> </span><span class=\"kwd\">float</span><span class=\"pln\"> f</span><span class=\"pun\">;</span><span class=\"pln\">\n  \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// Variable definition:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> c</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">float</span><span class=\"pln\"> f</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// actual initialization</span><span class=\"pln\">\n   a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n   b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\">\n   c </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> c </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl </span><span class=\"pun\">;</span><span class=\"pln\">\n\n   f </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">70.0</span><span class=\"pun\">/</span><span class=\"lit\">3.0</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> f </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl </span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\n30\n23.3333\n</pre>\n\n<p>Same concept applies on function declaration where you provide a function name at the time of its declaration and its actual definition can be given anywhere else. For example &minus;</p>\n\n<pre class=\"result notranslate\">\n// function declaration\nint func();\nint main() {\n   // function call\n   int i = func();\n}\n\n// function definition\nint func() {\n   return 0;\n}\n</pre>\n\n<h2>Lvalues and Rvalues</h2>\n\n<p>There are two kinds of expressions in C++ &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>lvalue</b> &minus; Expressions that refer to a memory location is called &quot;lvalue&quot; expression. An lvalue may appear as either the left-hand or right-hand side of an assignment.</p>\n\t</li>\n\t<li>\n\t<p><b>rvalue</b> &minus; The term rvalue refers to a data value that is stored at some address in memory. An rvalue is an expression that cannot have a value assigned to it which means an rvalue may appear on the right- but not left-hand side of an assignment.</p>\n\t</li>\n</ul>\n\n<p>Variables are lvalues and so may appear on the left-hand side of an assignment. Numeric literals are rvalues and so may not be assigned and can not appear on the left-hand side. Following is a valid statement &minus;</p>\n\n<pre class=\"result notranslate\">\nint g = 20;\n</pre>\n\n<p>But the following is not a valid statement and would generate compile-time error &minus;</p>\n\n<pre class=\"result notranslate\">\n10 = 20;\n</pre>\n"
          ]
        },
        {
          "tag_line": "Variable Scope in C++",
        
          "details": [
            "<h2>Variable Scope in C++</h2>\n\n<p>A scope is a region of the program and broadly speaking there are three places, where variables can be declared &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Inside a function or a block which is called local variables,</p>\n\t</li>\n\t<li>\n\t<p>In the definition of function parameters which is called formal parameters.</p>\n\t</li>\n\t<li>\n\t<p>Outside of all functions which is called global variables.</p>\n\t</li>\n</ul>\n\n<p>We will learn what is a function and it&#39;s parameter in subsequent chapters. Here let us explain what are local and global variables.</p>\n\n<h2>Local Variables</h2>\n\n<p>Variables that are declared inside a function or block are local variables. They can be used only by statements that are inside that function or block of code. Local variables are not known to functions outside their own. Following is the example using local variables &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/QIjnPh\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// Local variable declaration:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> c</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// actual initialization</span><span class=\"pln\">\n   a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n   b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\">\n   c </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> c</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<h2>Global Variables</h2>\n\n<p>Global variables are defined outside of all the functions, usually on top of the program. The global variables will hold their value throughout the life-time of your program.</p>\n\n<p>A global variable can be accessed by any function. That is, a global variable is available for use throughout your entire program after its declaration. Following is the example using global and local variables &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/dRHHpD\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">// Global variable declaration:</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> g</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// Local variable declaration:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// actual initialization</span><span class=\"pln\">\n   a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n   b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\">\n   g </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n  \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> g</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>A program can have same name for local and global variables but value of local variable inside a function will take preference. For example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/dt7MP9\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">// Global variable declaration:</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> g </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// Local variable declaration:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> g </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> g</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\n10\n</pre>\n\n<h2>Initializing Local and Global Variables</h2>\n\n<p>When a local variable is defined, it is not initialized by the system, you must initialize it yourself. Global variables are initialized automatically by the system when you define them as follows &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"50%\">Data Type</th>\n\t\t\t<th style=\"text-align:center;\">Initializer</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>int</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>char</td>\n\t\t\t<td>&#39;\\0&#39;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>float</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>double</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>pointer</td>\n\t\t\t<td>NULL</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>It is a good programming practice to initialize variables properly, otherwise sometimes program would produce unexpected result.</p>\n"
          ]
        },     {
          "tag_line": "C++ Constants/Literals",
        
          "details": [
            "<h2>C++ Constants/Literals</h2>\n\n<p>Constants refer to fixed values that the program may not alter and they are called <b>literals</b>.</p>\n\n<p>Constants can be of any of the basic data types and can be divided into Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values.</p>\n\n<p>Again, constants are treated just like regular variables except that their values cannot be modified after their definition.</p>\n\n<h2>Integer Literals</h2>\n\n<p>An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal.</p>\n\n<p>An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order.</p>\n\n<p>Here are some examples of integer literals &minus;</p>\n\n<pre class=\"result notranslate\">\n212         // Legal\n215u        // Legal\n0xFeeL      // Legal\n078         // Illegal: 8 is not an octal digit\n032UU       // Illegal: cannot repeat a suffix\n</pre>\n\n<p>Following are other examples of various types of Integer literals &minus;</p>\n\n<pre class=\"result notranslate\">\n85         // decimal\n0213       // octal\n0x4b       // hexadecimal\n30         // int\n30u        // unsigned int\n30l        // long\n30ul       // unsigned long\n</pre>\n\n<h2>Floating-point Literals</h2>\n\n<p>A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form.</p>\n\n<p>While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E.</p>\n\n<p>Here are some examples of floating-point literals &minus;</p>\n\n<pre class=\"result notranslate\">\n3.14159       // Legal\n314159E-5L    // Legal\n510E          // Illegal: incomplete exponent\n210f          // Illegal: no decimal or exponent\n.e55          // Illegal: missing integer or fraction\n</pre>\n\n<h2>Boolean Literals</h2>\n\n<p>There are two Boolean literals and they are part of standard C++ keywords &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>A value of <b>true</b> representing true.</p>\n\t</li>\n\t<li>\n\t<p>A value of <b>false</b> representing false.</p>\n\t</li>\n</ul>\n\n<p>You should not consider the value of true equal to 1 and value of false equal to 0.</p>\n\n<h2>Character Literals</h2>\n\n<p>Character literals are enclosed in single quotes. If the literal begins with L (uppercase only), it is a wide character literal (e.g., L&#39;x&#39;) and should be stored in <b>wchar_t</b> type of variable . Otherwise, it is a narrow character literal (e.g., &#39;x&#39;) and can be stored in a simple variable of <b>char</b> type.</p>\n\n<p>A character literal can be a plain character (e.g., &#39;x&#39;), an escape sequence (e.g., &#39;\\t&#39;), or a universal character (e.g., &#39;\\u02C0&#39;).</p>\n\n<p>There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\\n) or tab (\\t). Here, you have a list of some of such escape sequence codes &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\">Escape sequence</th>\n\t\t\t<th style=\"text-align:center;\">Meaning</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\\\</td>\n\t\t\t<td>\\ character</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\&#39;</td>\n\t\t\t<td>&#39; character</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\&quot;</td>\n\t\t\t<td>&quot; character</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\?</td>\n\t\t\t<td>? character</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\a</td>\n\t\t\t<td>Alert or bell</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\b</td>\n\t\t\t<td>Backspace</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\f</td>\n\t\t\t<td>Form feed</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\n</td>\n\t\t\t<td>Newline</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\r</td>\n\t\t\t<td>Carriage return</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\t</td>\n\t\t\t<td>Horizontal tab</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\v</td>\n\t\t\t<td>Vertical tab</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\ooo</td>\n\t\t\t<td>Octal number of one to three digits</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\xhh . . .</td>\n\t\t\t<td>Hexadecimal number of one or more digits</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Following is the example to show a few escape sequence characters &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/8RqQ5S\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello\\tWorld\\n\\n&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nHello   World\n</pre>\n\n<h2>String Literals</h2>\n\n<p>String literals are enclosed in double quotes. A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters.</p>\n\n<p>You can break a long line into multiple lines using string literals and separate them using whitespaces.</p>\n\n<p>Here are some examples of string literals. All the three forms are identical strings.</p>\n\n<pre class=\"result notranslate\">\n&quot;hello, dear&quot;\n\n&quot;hello, \\\n\ndear&quot;\n\n&quot;hello, &quot; &quot;d&quot; &quot;ear&quot;\n</pre>\n\n<h2>Defining Constants</h2>\n\n<p>There are two simple ways in C++ to define constants &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Using <b>#define</b> preprocessor.</p>\n\t</li>\n\t<li>\n\t<p>Using <b>const</b> keyword.</p>\n\t</li>\n</ul>\n\n<h2>The #define Preprocessor</h2>\n\n<p>Following is the form to use #define preprocessor to define a constant &minus;</p>\n\n<pre class=\"result notranslate\">\n#define identifier value\n</pre>\n\n<p>Following example explains it in detail &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/N6xxDP\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">#define</span><span class=\"pln\"> LENGTH </span><span class=\"lit\">10</span><span class=\"pln\">   \n</span><span class=\"com\">#define</span><span class=\"pln\"> WIDTH  </span><span class=\"lit\">5</span><span class=\"pln\">\n</span><span class=\"com\">#define</span><span class=\"pln\"> NEWLINE </span><span class=\"str\">&#39;\\n&#39;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">  \n   \n   area </span><span class=\"pun\">=</span><span class=\"pln\"> LENGTH </span><span class=\"pun\">*</span><span class=\"pln\"> WIDTH</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> NEWLINE</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\n50\n</pre>\n\n<h2>The const Keyword</h2>\n\n<p>You can use <b>const</b> prefix to declare constants with a specific type as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nconst type variable = value;\n</pre>\n\n<p>Following example explains it in detail &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/IA1cea\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\">  LENGTH </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\">  WIDTH  </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"kwd\">char</span><span class=\"pln\"> NEWLINE </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&#39;\\n&#39;</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">  \n   \n   area </span><span class=\"pun\">=</span><span class=\"pln\"> LENGTH </span><span class=\"pun\">*</span><span class=\"pln\"> WIDTH</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> NEWLINE</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\n50\n</pre>\n\n<p>Note that it is a good programming practice to define constants in CAPITALS.</p>\n"
          ]
        },     {
          "tag_line": "C++ Modifier Types",
        
          "details": [
            "<h2>C++ Modifier Types</h2>\n\n<p>C++ allows the <b>char, int, </b> and <b>double</b> data types to have modifiers preceding them. A modifier is used to alter the meaning of the base type so that it more precisely fits the needs of various situations.</p>\n\n<p>The data type modifiers are listed here &minus;</p>\n\n<ul class=\"list\">\n\t<li>signed</li>\n\t<li>unsigned</li>\n\t<li>long</li>\n\t<li>short</li>\n</ul>\n\n<p>The modifiers <b>signed, unsigned, long,</b> and <b>short</b> can be applied to integer base types. In addition, <b>signed</b> and <b>unsigned</b> can be applied to char, and <b>long</b> can be applied to double.</p>\n\n<p>The modifiers <b>signed</b> and <b>unsigned</b> can also be used as prefix to <b>long</b> or <b>short</b> modifiers. For example, <b>unsigned long int</b>.</p>\n\n<p>C++ allows a shorthand notation for declaring <b>unsigned, short,</b> or <b>long</b> integers. You can simply use the word <b>unsigned, short,</b> or <b>long,</b> without <b>int</b>. It automatically implies <b>int</b>. For example, the following two statements both declare unsigned integer variables.</p>\n\n<pre class=\"result notranslate\">\nunsigned x;\nunsigned int y;\n</pre>\n\n<p>To understand the difference between the way signed and unsigned integer modifiers are interpreted by C++, you should run the following short program &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/nWAgjz\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">/* This program shows the difference between\n   * signed and unsigned integers.\n*/</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">short</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> i</span><span class=\"pun\">;</span><span class=\"pln\">           </span><span class=\"com\">// a signed short integer</span><span class=\"pln\">\n   </span><span class=\"kwd\">short</span><span class=\"pln\"> </span><span class=\"kwd\">unsigned</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> j</span><span class=\"pun\">;</span><span class=\"pln\">  </span><span class=\"com\">// an unsigned short integer</span><span class=\"pln\">\n\n   j </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">50000</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   i </span><span class=\"pun\">=</span><span class=\"pln\"> j</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot; &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> j</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When this program is run, following is the output &minus;</p>\n\n<pre class=\"result notranslate\">\n-15536 50000\n</pre>\n\n<p>The above result is because the bit pattern that represents 50,000 as a short unsigned integer is interpreted as -15,536 by a short.</p>\n\n<h2>Type Qualifiers in C++</h2>\n\n<p>The type qualifiers provide additional information about the variables they precede.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Qualifier &amp; Meaning</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td>\n\t\t\t<p><b>const</b></p>\n\n\t\t\t<p>Objects of type <b>const</b> cannot be changed by your program during execution.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td>\n\t\t\t<p><b>volatile</b></p>\n\n\t\t\t<p>The modifier <b>volatile</b> tells the compiler that a variable&#39;s value may be changed in ways not explicitly specified by the program.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td>\n\t\t\t<p><b>restrict</b></p>\n\n\t\t\t<p>A pointer qualified by <b>restrict</b> is initially the only means by which the object it points to can be accessed. Only C99 adds a new type qualifier called restrict.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },     {
          "tag_line": "Storage Classes in C++",
        
          "details": [
            "<h2>Storage Classes in C++</h2>\n\n<p>A storage class defines the scope (visibility) and life-time of variables and/or functions within a C++ Program. These specifiers precede the type that they modify. There are following storage classes, which can be used in a C++ Program</p>\n\n<ul class=\"list\">\n\t<li>auto</li>\n\t<li>register</li>\n\t<li>static</li>\n\t<li>extern</li>\n\t<li>mutable</li>\n</ul>\n\n<h2>The auto Storage Class</h2>\n\n<p>The <b>auto</b> storage class is the default storage class for all local variables.</p>\n\n<pre class=\"result notranslate\">\n{\n   int mount;\n   auto int month;\n}\n</pre>\n\n<p>The example above defines two variables with the same storage class, auto can only be used within functions, i.e., local variables.</p>\n\n<h2>The register Storage Class</h2>\n\n<p>The <b>register</b> storage class is used to define local variables that should be stored in a register instead of RAM. This means that the variable has a maximum size equal to the register size (usually one word) and can&#39;t have the unary &#39;&amp;&#39; operator applied to it (as it does not have a memory location).</p>\n\n<pre class=\"result notranslate\">\n{\n   register int  miles;\n}\n</pre>\n\n<p>The register should only be used for variables that require quick access such as counters. It should also be noted that defining &#39;register&#39; does not mean that the variable will be stored in a register. It means that it MIGHT be stored in a register depending on hardware and implementation restrictions.</p>\n\n<h2>The static Storage Class</h2>\n\n<p>The <b>static</b> storage class instructs the compiler to keep a local variable in existence during the life-time of the program instead of creating and destroying it each time it comes into and goes out of scope. Therefore, making local variables static allows them to maintain their values between function calls.</p>\n\n<p>The static modifier may also be applied to global variables. When this is done, it causes that variable&#39;s scope to be restricted to the file in which it is declared.</p>\n\n<p>In C++, when static is used on a class data member, it causes only one copy of that member to be shared by all objects of its class.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/20HjiV\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"com\">// Function declaration</span><span class=\"pln\">\n</span><span class=\"kwd\">void</span><span class=\"pln\"> func</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">);</span><span class=\"pln\">\n \n</span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> count </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/* Global variable */</span><span class=\"pln\">\n \nmain</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">while</span><span class=\"pun\">(</span><span class=\"pln\">count</span><span class=\"pun\">--)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      func</span><span class=\"pun\">();</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"com\">// Function definition</span><span class=\"pln\">\n</span><span class=\"kwd\">void</span><span class=\"pln\"> func</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// local static variable</span><span class=\"pln\">\n   i</span><span class=\"pun\">++;</span><span class=\"pln\">\n   std</span><span class=\"pun\">::</span><span class=\"pln\">cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;i is &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> i </span><span class=\"pun\">;</span><span class=\"pln\">\n   std</span><span class=\"pun\">::</span><span class=\"pln\">cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot; and count is &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> count </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> std</span><span class=\"pun\">::</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\ni is 6 and count is 9\ni is 7 and count is 8\ni is 8 and count is 7\ni is 9 and count is 6\ni is 10 and count is 5\ni is 11 and count is 4\ni is 12 and count is 3\ni is 13 and count is 2\ni is 14 and count is 1\ni is 15 and count is 0\n</pre>\n\n<h2>The extern Storage Class</h2>\n\n<p>The <b>extern</b> storage class is used to give a reference of a global variable that is visible to ALL the program files. When you use &#39;extern&#39; the variable cannot be initialized as all it does is point the variable name at a storage location that has been previously defined.</p>\n\n<p>When you have multiple files and you define a global variable or function, which will be used in other files also, then <i>extern</i> will be used in another file to give reference of defined variable or function. Just for understanding <i> extern </i> is used to declare a global variable or function in another file.</p>\n\n<p>The extern modifier is most commonly used when there are two or more files sharing the same global variables or functions as explained below.</p>\n\n<h3>First File: main.cpp</h3>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> count </span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">extern</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> write_extern</span><span class=\"pun\">();</span><span class=\"pln\">\n \nmain</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   count </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5</span><span class=\"pun\">;</span><span class=\"pln\">\n   write_extern</span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<h3>Second File: support.cpp</h3>\n\n<pre class=\"result notranslate\">\n#include &lt;iostream&gt;\n\nextern int count;\n\nvoid write_extern(void) {\n   std::cout &lt;&lt; &quot;Count is &quot; &lt;&lt; count &lt;&lt; std::endl;\n}\n</pre>\n\n<p>Here, <i>extern</i> keyword is being used to declare count in another file. Now compile these two files as follows &minus;</p>\n\n<pre class=\"result notranslate\">\n$g++ main.cpp support.cpp -o write\n</pre>\n\n<p>This will produce <b>write</b> executable program, try to execute <b>write</b> and check the result as follows &minus;</p>\n\n<pre class=\"result notranslate\">\n$./write\n5\n</pre>\n\n<h2>The mutable Storage Class</h2>\n\n<p>The <b>mutable</b> specifier applies only to class objects, which are discussed later in this tutorial. It allows a member of an object to override const member function. That is, a mutable member can be modified by a const member function.</p>\n\n<p>&nbsp;</p>\n"
          ]
        },     {
          "tag_line": "Operators in C++",
        
          "details": [
            "<h2>Operators in C++</h2>\n\n<p>An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. C++ is rich in built-in operators and provide the following types of operators &minus;</p>\n\n<ul class=\"list\">\n\t<li>Arithmetic Operators</li>\n\t<li>Relational Operators</li>\n\t<li>Logical Operators</li>\n\t<li>Bitwise Operators</li>\n\t<li>Assignment Operators</li>\n\t<li>Misc Operators</li>\n</ul>\n\n<p>This chapter will examine the arithmetic, relational, logical, bitwise, assignment and other operators one by one.</p>\n\n<h2>Arithmetic Operators</h2>\n\n<p>There are following arithmetic operators supported by C++ language &minus;</p>\n\n<p>Assume variable A holds 10 and variable B holds 20, then &minus;</p>\n\n<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_arithmatic_operators.htm\" title=\"Arithmetic Operators in C++\">Show Examples</a></p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n\t\t\t<th style=\"text-align:center;\" width=\"45%\">Description</th>\n\t\t\t<th style=\"text-align:center;\">Example</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">+</td>\n\t\t\t<td>Adds two operands</td>\n\t\t\t<td style=\"text-align:center;\">A + B will give 30</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">-</td>\n\t\t\t<td>Subtracts second operand from the first</td>\n\t\t\t<td class=\"ts\">A - B will give -10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">*</td>\n\t\t\t<td>Multiplies both operands</td>\n\t\t\t<td style=\"text-align:center;\">A * B will give 200</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">/</td>\n\t\t\t<td>Divides numerator by de-numerator</td>\n\t\t\t<td style=\"text-align:center;\">B / A will give 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">%</td>\n\t\t\t<td>Modulus Operator and remainder of after an integer division</td>\n\t\t\t<td class=\"ts\">B % A will give 0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">++</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Increment operator in C++\">Increment operator</a>, increases integer value by one</td>\n\t\t\t<td class=\"ts\">A++ will give 11</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">--</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_increment_decrement_operators.htm\" title=\"Decrement operator in C++\">Decrement operator</a>, decreases integer value by one</td>\n\t\t\t<td class=\"ts\">A-- will give 9</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Relational Operators</h2>\n\n<p>There are following relational operators supported by C++ language</p>\n\n<p>Assume variable A holds 10 and variable B holds 20, then &minus;</p>\n\n<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_relational_operators.htm\" title=\"Relational Operators in C++\">Show Examples</a></p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n\t\t\t<th style=\"text-align:center;\" width=\"45%\">Description</th>\n\t\t\t<th style=\"text-align:center;\">Example</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">==</td>\n\t\t\t<td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>\n\t\t\t<td class=\"ts\">(A == B) is not true.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">!=</td>\n\t\t\t<td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>\n\t\t\t<td class=\"ts\">(A != B) is true.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&gt;</td>\n\t\t\t<td>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.</td>\n\t\t\t<td class=\"ts\">(A &gt; B) is not true.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&lt;</td>\n\t\t\t<td>Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.</td>\n\t\t\t<td class=\"ts\">(A &lt; B) is true.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&gt;=</td>\n\t\t\t<td>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>\n\t\t\t<td class=\"ts\">(A &gt;= B) is not true.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&lt;=</td>\n\t\t\t<td>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>\n\t\t\t<td class=\"ts\">(A &lt;= B) is true.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Logical Operators</h2>\n\n<p>There are following logical operators supported by C++ language.</p>\n\n<p>Assume variable A holds 1 and variable B holds 0, then &minus;</p>\n\n<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_logical_operators.htm\" title=\"Logical Operators in C++\">Show Examples</a></p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n\t\t\t<th style=\"text-align:center;\" width=\"45%\">Description</th>\n\t\t\t<th style=\"text-align:center;\">Example</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&amp;&amp;</td>\n\t\t\t<td>Called Logical AND operator. If both the operands are non-zero, then condition becomes true.</td>\n\t\t\t<td class=\"ts\">(A &amp;&amp; B) is false.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">||</td>\n\t\t\t<td>Called Logical OR Operator. If any of the two operands is non-zero, then condition becomes true.</td>\n\t\t\t<td class=\"ts\">(A || B) is true.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">!</td>\n\t\t\t<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.</td>\n\t\t\t<td class=\"ts\">!(A &amp;&amp; B) is true.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Bitwise Operators</h2>\n\n<p>Bitwise operator works on bits and perform bit-by-bit operation. The truth tables for &amp;, |, and ^ are as follows &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;width:20%\">p</th>\n\t\t\t<th style=\"text-align:center;width:20%\">q</th>\n\t\t\t<th style=\"text-align:center;width:20%\">p &amp; q</th>\n\t\t\t<th style=\"text-align:center;width:20%\">p | q</th>\n\t\t\t<th style=\"text-align:center;width:20%\">p ^ q</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>0</td>\n\t\t\t<td>0</td>\n\t\t\t<td>0</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t\t<td>0</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Assume if A = 60; and B = 13; now in binary format they will be as follows &minus;</p>\n\n<p>A = 0011 1100</p>\n\n<p>B = 0000 1101</p>\n\n<p>-----------------</p>\n\n<p>A&amp;B = 0000 1100</p>\n\n<p>A|B = 0011 1101</p>\n\n<p>A^B = 0011 0001</p>\n\n<p>~A&nbsp; = 1100 0011</p>\n\n<p>The Bitwise operators supported by C++ language are listed in the following table. Assume variable A holds 60 and variable B holds 13, then &minus;</p>\n\n<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_bitwise_operators.htm\" title=\"Bitwise Operators in C++\">Show Examples</a></p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n\t\t\t<th style=\"text-align:center;\" width=\"45%\">Description</th>\n\t\t\t<th style=\"text-align:center;\">Example</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&amp;</td>\n\t\t\t<td>Binary AND Operator copies a bit to the result if it exists in both operands.</td>\n\t\t\t<td style=\"vertical-align:middle;\">(A &amp; B) will give 12 which is 0000 1100</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">|</td>\n\t\t\t<td>Binary OR Operator copies a bit if it exists in either operand.</td>\n\t\t\t<td>(A | B) will give 61 which is 0011 1101</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">^</td>\n\t\t\t<td>Binary XOR Operator copies the bit if it is set in one operand but not both.</td>\n\t\t\t<td style=\"vertical-align:middle;\">(A ^ B) will give 49 which is 0011 0001</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">~</td>\n\t\t\t<td>Binary Ones Complement Operator is unary and has the effect of &#39;flipping&#39; bits.</td>\n\t\t\t<td>(~A ) will give -61 which is 1100 0011 in 2&#39;s complement form due to a signed binary number.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&lt;&lt;</td>\n\t\t\t<td>Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>\n\t\t\t<td style=\"vertical-align:middle;\">A &lt;&lt; 2 will give 240 which is 1111 0000</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&gt;&gt;</td>\n\t\t\t<td>Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.</td>\n\t\t\t<td style=\"vertical-align:middle;\">A &gt;&gt; 2 will give 15 which is 0000 1111</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Assignment Operators</h2>\n\n<p>There are following assignment operators supported by C++ language &minus;</p>\n\n<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_assignment_operators.htm\" title=\"Assignment Operators in C++\">Show Examples</a></p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"10%\">Operator</th>\n\t\t\t<th style=\"text-align:center;\" width=\"48%\">Description</th>\n\t\t\t<th style=\"text-align:center;\">Example</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">=</td>\n\t\t\t<td>Simple assignment operator, Assigns values from right side operands to left side operand.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C = A + B will assign value of A + B into C</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">+=</td>\n\t\t\t<td>Add AND assignment operator, It adds right operand to the left operand and assign the result to left operand.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C += A is equivalent to C = C + A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">-=</td>\n\t\t\t<td>Subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C -= A is equivalent to C = C - A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">*=</td>\n\t\t\t<td>Multiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C *= A is equivalent to C = C * A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">/=</td>\n\t\t\t<td>Divide AND assignment operator, It divides left operand with the right operand and assign the result to left operand.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C /= A is equivalent to C = C / A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">%=</td>\n\t\t\t<td>Modulus AND assignment operator, It takes modulus using two operands and assign the result to left operand.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C %= A is equivalent to C = C % A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&lt;&lt;=</td>\n\t\t\t<td>Left shift AND assignment operator.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&gt;&gt;=</td>\n\t\t\t<td>Right shift AND assignment operator.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">&amp;=</td>\n\t\t\t<td>Bitwise AND assignment operator.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C &amp;= 2 is same as C = C &amp; 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">^=</td>\n\t\t\t<td>Bitwise exclusive OR and assignment operator.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C ^= 2 is same as C = C ^ 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">|=</td>\n\t\t\t<td>Bitwise inclusive OR and assignment operator.</td>\n\t\t\t<td style=\"vertical-align:middle;\">C |= 2 is same as C = C | 2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Misc Operators</h2>\n\n<p>The following table lists some other operators that C++ supports.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Operator &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td>\n\t\t\t<p><b>sizeof</b></p>\n\n\t\t\t<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_sizeof_operator.htm\">sizeof operator</a> returns the size of a variable. For example, sizeof(a), where &lsquo;a&rsquo; is integer, and will return 4.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td>\n\t\t\t<p><b>Condition ? X : Y</b></p>\n\n\t\t\t<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_conditional_operator.htm\">Conditional operator (?)</a>. If Condition is true then it returns value of X otherwise returns value of Y.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td>\n\t\t\t<p><b>,</b></p>\n\n\t\t\t<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_comma_operator.htm\">Comma operator</a> causes a sequence of operations to be performed. The value of the entire comma expression is the value of the last expression of the comma-separated list.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td>\n\t\t\t<p><b>. (dot) and -&gt; (arrow)</b></p>\n\n\t\t\t<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_member_operators.htm\">Member operators</a> are used to reference individual members of classes, structures, and unions.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td>\n\t\t\t<p><b>Cast</b></p>\n\n\t\t\t<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_casting_operators.htm\">Casting operators</a> convert one data type to another. For example, int(2.2000) would return 2.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">6</td>\n\t\t\t<td>\n\t\t\t<p><b>&amp;</b></p>\n\n\t\t\t<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_pointer_operators.htm\">Pointer operator &amp;</a> returns the address of a variable. For example &amp;a; will give actual address of the variable.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">7</td>\n\t\t\t<td>\n\t\t\t<p><b>*</b></p>\n\n\t\t\t<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_pointer_operators.htm\">Pointer operator *</a> is pointer to a variable. For example *var; will pointer to a variable var.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Operators Precedence in C++</h2>\n\n<p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator &minus;</p>\n\n<p>For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.</p>\n\n<p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.</p>\n\n<p><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_operators_precedence.htm\" title=\"Operators Precedence in C++\">Show Examples</a></p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\">Category&nbsp;</th>\n\t\t\t<th style=\"text-align:center;\">Operator&nbsp;</th>\n\t\t\t<th style=\"text-align:center;\">Associativity&nbsp;</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Postfix&nbsp;</td>\n\t\t\t<td>() [] -&gt; . ++ - - &nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Unary&nbsp;</td>\n\t\t\t<td>+ - ! ~ ++ - - (type)* &amp; sizeof&nbsp;</td>\n\t\t\t<td>Right to left&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Multiplicative &nbsp;</td>\n\t\t\t<td>* / %&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Additive &nbsp;</td>\n\t\t\t<td>+ -&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Shift &nbsp;</td>\n\t\t\t<td>&lt;&lt; &gt;&gt;&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Relational &nbsp;</td>\n\t\t\t<td>&lt; &lt;= &gt; &gt;=&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Equality &nbsp;</td>\n\t\t\t<td>== !=&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Bitwise AND&nbsp;</td>\n\t\t\t<td>&amp;&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Bitwise XOR&nbsp;</td>\n\t\t\t<td>^&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Bitwise OR&nbsp;</td>\n\t\t\t<td>|&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Logical AND&nbsp;</td>\n\t\t\t<td>&amp;&amp;&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Logical OR&nbsp;</td>\n\t\t\t<td>||&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Conditional&nbsp;</td>\n\t\t\t<td>?:&nbsp;</td>\n\t\t\t<td>Right to left&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Assignment&nbsp;</td>\n\t\t\t<td>= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |=&nbsp;</td>\n\t\t\t<td>Right to left&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Comma&nbsp;</td>\n\t\t\t<td>,&nbsp;</td>\n\t\t\t<td>Left to right&nbsp;</td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },     {
          "tag_line": "C++ Loop Types",
        
          "details": [
            "<h2>C++ Loop Types</h2>\n\n<p>There may be a situation, when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.</p>\n\n<p>Programming languages provide various control structures that allow for more complicated execution paths.</p>\n\n<p>A loop statement allows us to execute a statement or group of statements multiple times and following is the general from of a loop statement in most of the programming languages &minus;</p>\n\n<p><img alt=\"Loop Architecture\" src=\"https://www.tutorialspoint.com/cplusplus/images/loop_architecture.jpg\" /></p>\n\n<p>C++ programming language provides the following type of loops to handle looping requirements.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Loop Type &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_while_loop.htm\" title=\"C++ while loop\">while loop</a>\n\t\t\t<p>Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_for_loop.htm\" title=\"C++ for loop\">for loop</a>\n\t\t\t<p>Execute a sequence of statements multiple times and abbreviates the code that manages the loop variable.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_do_while_loop.htm\" title=\"C++ do...while loop\">do...while loop</a>\n\t\t\t<p>Like a &lsquo;while&rsquo; statement, except that it tests the condition at the end of the loop body.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_nested_loops.htm\" title=\"C++ nested loops\">nested loops</a>\n\t\t\t<p>You can use one or more loop inside any another &lsquo;while&rsquo;, &lsquo;for&rsquo; or &lsquo;do..while&rsquo; loop.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Loop Control Statements</h2>\n\n<p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</p>\n\n<p>C++ supports the following control statements.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Control Statement &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_break_statement.htm\" title=\"C++ break statement\">break statement</a>\n\t\t\t<p>Terminates the <b>loop</b> or <b>switch</b> statement and transfers execution to the statement immediately following the loop or switch.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_continue_statement.htm\" title=\"C++ continue statement\">continue statement</a>\n\t\t\t<p>Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_goto_statement.htm\" title=\"C++ goto statement\">goto statement</a>\n\t\t\t<p>Transfers control to the labeled statement. Though it is not advised to use goto statement in your program.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>The Infinite Loop</h2>\n\n<p>A loop becomes infinite loop if a condition never becomes false. The <b>for</b> loop is traditionally used for this purpose. Since none of the three expressions that form the &lsquo;for&rsquo; loop are required, you can make an endless loop by leaving the conditional expression empty.</p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">for</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      printf</span><span class=\"pun\">(</span><span class=\"str\">&quot;This loop will run forever.\\n&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the conditional expression is absent, it is assumed to be true. You may have an initialization and increment expression, but C++ programmers more commonly use the &lsquo;for (;;)&rsquo; construct to signify an infinite loop.</p>\n\n<p><b>NOTE</b> &minus; You can terminate an infinite loop by pressing Ctrl + C keys.</p>\n\n<hr />"
          ]
        },     {
          "tag_line": "C++ decision making statements",
        
          "details": [
            "<h2>C++ decision making statements</h2>\n\n<p>Decision making structures require that the programmer specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.</p>\n\n<p>Following is the general form of a typical decision making structure found in most of the programming languages &minus;</p>\n\n<p><img alt=\"C++ decision making\" src=\"https://www.tutorialspoint.com/cplusplus/images/cpp_decision_making.jpg\" /></p>\n\n<p>C++ programming language provides following types of decision making statements.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Statement &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_if_statement.htm\" title=\"C++ if statement\">if statement</a>\n\t\t\t<p>An &lsquo;if&rsquo; statement consists of a boolean expression followed by one or more statements.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_if_else_statement.htm\" title=\"C++ if...else statement\">if...else statement</a>\n\t\t\t<p>An &lsquo;if&rsquo; statement can be followed by an optional &lsquo;else&rsquo; statement, which executes when the boolean expression is false.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_switch_statement.htm\" title=\"C++ switch statement\">switch statement</a>\n\t\t\t<p>A &lsquo;switch&rsquo; statement allows a variable to be tested for equality against a list of values.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_nested_if.htm\" title=\"C++ nested if statements\">nested if statements</a>\n\t\t\t<p>You can use one &lsquo;if&rsquo; or &lsquo;else if&rsquo; statement inside another &lsquo;if&rsquo; or &lsquo;else if&rsquo; statement(s).</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_nested_switch.htm\" title=\"C++ nested switch statements\">nested switch statements</a>\n\t\t\t<p>You can use one &lsquo;switch&rsquo; statement inside another &lsquo;switch&rsquo; statement(s).</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>The ? : Operator</h2>\n\n<p>We have covered <a href=\"https://www.tutorialspoint.com/cplusplus/cpp_conditional_operator.htm\">conditional operator &ldquo;? :&rdquo;</a> in previous chapter which can be used to replace <b>if...else</b> statements. It has the following general form &minus;</p>\n\n<pre class=\"result notranslate\">\nExp1 ? Exp2 : Exp3;\n</pre>\n\n<p>Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.</p>\n\n<p>The value of a &lsquo;?&rsquo; expression is determined like this: Exp1 is evaluated. If it is true, then Exp2 is evaluated and becomes the value of the entire &lsquo;?&rsquo; expression. If Exp1 is false, then Exp3 is evaluated and its value becomes the value of the expression.</p>\n"
          ]
        },     {
          "tag_line": "C++ Functions",
        
          "details": [
            "<h2>C++ Functions</h2>\n\n<p>A function is a group of statements that together perform a task. Every C++ program has at least one function, which is <b>main()</b>, and all the most trivial programs can define additional functions.</p>\n\n<p>You can divide up your code into separate functions. How you divide up your code among different functions is up to you, but logically the division usually is such that each function performs a specific task.</p>\n\n<p>A function <b>declaration</b> tells the compiler about a function&#39;s name, return type, and parameters. A function <b>definition</b> provides the actual body of the function.</p>\n\n<p>The C++ standard library provides numerous built-in functions that your program can call. For example, function <b>strcat()</b> to concatenate two strings, function <b>memcpy()</b> to copy one memory location to another location and many more functions.</p>\n\n<p>A function is known with various names like a method or a sub-routine or a procedure etc.</p>\n\n<h2>Defining a Function</h2>\n\n<p>The general form of a C++ function definition is as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list ) {\n   body of the function\n}\n</pre>\n\n<p>A C++ function definition consists of a function header and a function body. Here are all the parts of a function &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Return Type</b> &minus; A function may return a value. The <b>return_type</b> is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword <b>void</b>.</p>\n\t</li>\n\t<li>\n\t<p><b>Function Name</b> &minus; This is the actual name of the function. The function name and the parameter list together constitute the function signature.</p>\n\t</li>\n\t<li>\n\t<p><b>Parameters</b> &minus; A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters.</p>\n\t</li>\n\t<li>\n\t<p><b>Function Body</b> &minus; The function body contains a collection of statements that define what the function does.</p>\n\t</li>\n</ul>\n\n<h2>Example</h2>\n\n<p>Following is the source code for a function called <b>max()</b>. This function takes two parameters num1 and num2 and return the biggest of both &minus;</p>\n\n<pre class=\"result notranslate\">\n// function returning the max between two numbers\n \nint max(int num1, int num2) {\n   // local variable declaration\n   int result;\n \n   if (num1 &gt; num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n</pre>\n\n<h2>Function Declarations</h2>\n\n<p>A function <b>declaration</b> tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately.</p>\n\n<p>A function declaration has the following parts &minus;</p>\n\n<pre class=\"result notranslate\">\nreturn_type function_name( parameter list );\n</pre>\n\n<p>For the above defined function max(), following is the function declaration &minus;</p>\n\n<pre class=\"result notranslate\">\nint max(int num1, int num2);\n</pre>\n\n<p>Parameter names are not important in function declaration only their type is required, so following is also valid declaration &minus;</p>\n\n<pre class=\"result notranslate\">\nint max(int, int);\n</pre>\n\n<p>Function declaration is required when you define a function in one source file and you call that function in another file. In such case, you should declare the function at the top of the file calling the function.</p>\n\n<h2>Calling a Function</h2>\n\n<p>While creating a C++ function, you give a definition of what the function has to do. To use a function, you will have to call or invoke that function.</p>\n\n<p>When a program calls a function, program control is transferred to the called function. A called function performs defined task and when it&rsquo;s return statement is executed or when its function-ending closing brace is reached, it returns program control back to the main program.</p>\n\n<p>To call a function, you simply need to pass the required parameters along with function name, and if function returns a value, then you can store returned value. For example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/XuXfLz\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">// function declaration</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> max</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> num1</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> num2</span><span class=\"pun\">);</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// local variable declaration:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">100</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">200</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> ret</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// calling a function to get max value.</span><span class=\"pln\">\n   ret </span><span class=\"pun\">=</span><span class=\"pln\"> max</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">);</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Max value is : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> ret </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n \n</span><span class=\"com\">// function returning the max between two numbers</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> max</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> num1</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> num2</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// local variable declaration</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> result</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">num1 </span><span class=\"pun\">&gt;</span><span class=\"pln\"> num2</span><span class=\"pun\">)</span><span class=\"pln\">\n      result </span><span class=\"pun\">=</span><span class=\"pln\"> num1</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">else</span><span class=\"pln\">\n      result </span><span class=\"pun\">=</span><span class=\"pln\"> num2</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> result</span><span class=\"pun\">;</span><span class=\"pln\"> \n</span><span class=\"pun\">}</span></pre>\n\n<p>I kept max() function along with main() function and compiled the source code. While running final executable, it would produce the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nMax value is : 200\n</pre>\n\n<h2>Function Arguments</h2>\n\n<p>If a function is to use arguments, it must declare variables that accept the values of the arguments. These variables are called the <b>formal parameters</b> of the function.</p>\n\n<p>The formal parameters behave like other local variables inside the function and are created upon entry into the function and destroyed upon exit.</p>\n\n<p>While calling a function, there are two ways that arguments can be passed to a function &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Call Type &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_function_call_by_value.htm\" title=\"C++ function call by value\">Call by Value</a>\n\t\t\t<p>This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_function_call_by_pointer.htm\" title=\"C++ function call by pointer\">Call by Pointer</a>\n\t\t\t<p>This method copies the address of an argument into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_function_call_by_reference.htm\" title=\"C++ function call by reference\">Call by Reference</a>\n\t\t\t<p>This method copies the reference of an argument into the formal parameter. Inside the function, the reference is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>By default, C++ uses <b>call by value</b> to pass arguments. In general, this means that code within a function cannot alter the arguments used to call the function and above mentioned example while calling max() function used the same method.</p>\n\n<h2>Default Values for Parameters</h2>\n\n<p>When you define a function, you can specify a default value for each of the last parameters. This value will be used if the corresponding argument is left blank when calling to the function.</p>\n\n<p>This is done by using the assignment operator and assigning values for the arguments in the function definition. If a value for that parameter is not passed when the function is called, the default given value is used, but if a value is specified, this default value is ignored and the passed value is used instead. Consider the following example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/KoJLUN\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> sum</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> result</span><span class=\"pun\">;</span><span class=\"pln\">\n   result </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n  \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">result</span><span class=\"pun\">);</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// local variable declaration:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">100</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">200</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> result</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// calling a function to add the values.</span><span class=\"pln\">\n   result </span><span class=\"pun\">=</span><span class=\"pln\"> sum</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">);</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total value is :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> result </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// calling a function again as follows.</span><span class=\"pln\">\n   result </span><span class=\"pun\">=</span><span class=\"pln\"> sum</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">);</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total value is :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> result </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal value is :300\nTotal value is :120\n</pre>\n"
          ]
        },     {
          "tag_line": "Numbers in C++",
        
          "details": [
            "<h2>Numbers in C++</h2>\n\n<p>Normally, when we work with Numbers, we use primitive data types such as int, short, long, float and double, etc. The number data types, their possible values and number ranges have been explained while discussing C++ Data Types.</p>\n\n<h2>Defining Numbers in C++</h2>\n\n<p>You have already defined numbers in various examples given in previous chapters. Here is another consolidated example to define various types of numbers in C++ &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/Q21eQX\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// number definition:</span><span class=\"pln\">\n   </span><span class=\"kwd\">short</span><span class=\"pln\">  s</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">    i</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">long</span><span class=\"pln\">   l</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">float</span><span class=\"pln\">  f</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">double</span><span class=\"pln\"> d</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// number assignments;</span><span class=\"pln\">\n   s </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">      \n   i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">1000</span><span class=\"pun\">;</span><span class=\"pln\">    \n   l </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">1000000</span><span class=\"pun\">;</span><span class=\"pln\"> \n   f </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">230.47</span><span class=\"pun\">;</span><span class=\"pln\">  \n   d </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">30949.374</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// number printing;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;short  s :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> s </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;int    i :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;long   l :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> l </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;float  f :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> f </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;double d :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> d </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nshort  s :10\nint    i :1000\nlong   l :1000000\nfloat  f :230.47\ndouble d :30949.4\n</pre>\n\n<h2>Math Operations in C++</h2>\n\n<p>In addition to the various functions you can create, C++ also includes some useful functions you can use. These functions are available in standard C and C++ libraries and called <b>built-in</b> functions. These are functions that can be included in your program and then use.</p>\n\n<p>C++ has a rich set of mathematical operations, which can be performed on various numbers. Following table lists down some useful built-in mathematical functions available in C++.</p>\n\n<p>To utilize these functions you need to include the math header file <b>&lt;cmath&gt;</b>.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Function &amp; Purpose</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td>\n\t\t\t<p><b>double cos(double);</b></p>\n\n\t\t\t<p>This function takes an angle (as a double) and returns the cosine.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td>\n\t\t\t<p><b>double sin(double);</b></p>\n\n\t\t\t<p>This function takes an angle (as a double) and returns the sine.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td>\n\t\t\t<p><b>double tan(double);</b></p>\n\n\t\t\t<p>This function takes an angle (as a double) and returns the tangent.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td>\n\t\t\t<p><b>double log(double);</b></p>\n\n\t\t\t<p>This function takes a number and returns the natural log of that number.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td>\n\t\t\t<p><b>double pow(double, double);</b></p>\n\n\t\t\t<p>The first is a number you wish to raise and the second is the power you wish to raise it t</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">6</td>\n\t\t\t<td>\n\t\t\t<p><b>double hypot(double, double);</b></p>\n\n\t\t\t<p>If you pass this function the length of two sides of a right triangle, it will return you the length of the hypotenuse.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">7</td>\n\t\t\t<td>\n\t\t\t<p><b>double sqrt(double);</b></p>\n\n\t\t\t<p>You pass this function a number and it gives you the square root.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">8</td>\n\t\t\t<td>\n\t\t\t<p><b>int abs(int);</b></p>\n\n\t\t\t<p>This function returns the absolute value of an integer that is passed to it.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">9</td>\n\t\t\t<td>\n\t\t\t<p><b>double fabs(double);</b></p>\n\n\t\t\t<p>This function returns the absolute value of any decimal number passed to it.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">10</td>\n\t\t\t<td>\n\t\t\t<p><b>double floor(double);</b></p>\n\n\t\t\t<p>Finds the integer which is less than or equal to the argument passed to it.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Following is a simple example to show few of the mathematical operations &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/qU7JSv\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;cmath&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// number definition:</span><span class=\"pln\">\n   </span><span class=\"kwd\">short</span><span class=\"pln\">  s </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">    i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"lit\">1000</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">long</span><span class=\"pln\">   l </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">100000</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">float</span><span class=\"pln\">  f </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">230.47</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">double</span><span class=\"pln\"> d </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">200.374</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// mathematical operations;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;sin(d) :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> sin</span><span class=\"pun\">(</span><span class=\"pln\">d</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;abs(i)  :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> abs</span><span class=\"pun\">(</span><span class=\"pln\">i</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;floor(d) :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> floor</span><span class=\"pun\">(</span><span class=\"pln\">d</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;sqrt(f) :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> sqrt</span><span class=\"pun\">(</span><span class=\"pln\">f</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;pow( d, 2) :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> pow</span><span class=\"pun\">(</span><span class=\"pln\">d</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nsign(d)     :-0.634939\nabs(i)      :1000\nfloor(d)    :200\nsqrt(f)     :15.1812\npow( d, 2 ) :40149.7\n</pre>\n\n<h2>Random Numbers in C++</h2>\n\n<p>There are many cases where you will wish to generate a random number. There are actually two functions you will need to know about random number generation. The first is <b>rand()</b>, this function will only return a pseudo random number. The way to fix this is to first call the <b>srand()</b> function.</p>\n\n<p>Following is a simple example to generate few random numbers. This example makes use of <b>time()</b> function to get the number of seconds on your system time, to randomly seed the rand() function &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/Z1ZN0e\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;ctime&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;cstdlib&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> i</span><span class=\"pun\">,</span><span class=\"pln\">j</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// set the seed</span><span class=\"pln\">\n   srand</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">unsigned</span><span class=\"pun\">)</span><span class=\"pln\">time</span><span class=\"pun\">(</span><span class=\"pln\"> NULL </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"com\">/* generate 10  random numbers. */</span><span class=\"pln\">\n   </span><span class=\"kwd\">for</span><span class=\"pun\">(</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\"> i</span><span class=\"pun\">++</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      </span><span class=\"com\">// generate actual random number</span><span class=\"pln\">\n      j </span><span class=\"pun\">=</span><span class=\"pln\"> rand</span><span class=\"pun\">();</span><span class=\"pln\">\n      cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"str\">&quot; Random Number : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> j </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nRandom Number : 1748144778\nRandom Number : 630873888\nRandom Number : 2134540646\nRandom Number : 219404170\nRandom Number : 902129458\nRandom Number : 920445370\nRandom Number : 1319072661\nRandom Number : 257938873\nRandom Number : 1256201101\nRandom Number : 580322989\n</pre>\n"
          ]
        },     {
          "tag_line": "C++ Arrays",
        
          "details": [
            "<h2>C++ Arrays</h2>\n\n<p>C++ provides a data structure, <b>the array</b>, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.</p>\n\n<p>Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables. A specific element in an array is accessed by an index.</p>\n\n<p>All arrays consist of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element.</p>\n\n<h2>Declaring Arrays</h2>\n\n<p>To declare an array in C++, the programmer specifies the type of the elements and the number of elements required by an array as follows &minus;</p>\n\n<pre class=\"result notranslate\">\ntype arrayName [ arraySize ];\n</pre>\n\n<p>This is called a single-dimension array. The <b>arraySize</b> must be an integer constant greater than zero and <b>type</b> can be any valid C++ data type. For example, to declare a 10-element array called balance of type double, use this statement &minus;</p>\n\n<pre class=\"result notranslate\">\ndouble balance[10];\n</pre>\n\n<h2>Initializing Arrays</h2>\n\n<p>You can initialize C++ array elements either one by one or using a single statement as follows &minus;</p>\n\n<pre class=\"result notranslate\">\ndouble balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n</pre>\n\n<p>The number of values between braces { } can not be larger than the number of elements that we declare for the array between square brackets [ ]. Following is an example to assign a single element of the array &minus;</p>\n\n<p>If you omit the size of the array, an array just big enough to hold the initialization is created. Therefore, if you write &minus;</p>\n\n<pre class=\"result notranslate\">\ndouble balance[] = {1000.0, 2.0, 3.4, 17.0, 50.0};\n</pre>\n\n<p>You will create exactly the same array as you did in the previous example.</p>\n\n<pre class=\"result notranslate\">\nbalance[4] = 50.0;\n</pre>\n\n<p>The above statement assigns element number 5<sup>th</sup> in the array a value of 50.0. Array with 4<sup>th</sup> index will be 5<sup>th</sup>, i.e., last element because all arrays have 0 as the index of their first element which is also called base index. Following is the pictorial representaion of the same array we discussed above &minus;</p>\n\n<p><img alt=\"Array Presentation\" src=\"https://www.tutorialspoint.com/cplusplus/images/array_presentation.jpg\" /></p>\n\n<h2>Accessing Array Elements</h2>\n\n<p>An element is accessed by indexing the array name. This is done by placing the index of the element within square brackets after the name of the array. For example &minus;</p>\n\n<pre class=\"result notranslate\">\ndouble salary = balance[9];\n</pre>\n\n<p>The above statement will take 10<sup>th</sup> element from the array and assign the value to salary variable. Following is an example, which will use all the above-mentioned three concepts viz. declaration, assignment and accessing arrays &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/QRe4fY\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iomanip&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> std</span><span class=\"pun\">::</span><span class=\"pln\">setw</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> n</span><span class=\"pun\">[</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pln\"> </span><span class=\"pun\">];</span><span class=\"pln\"> </span><span class=\"com\">// n is an array of 10 integers</span><span class=\"pln\">\n \n   </span><span class=\"com\">// initialize elements of array n to 0          </span><span class=\"pln\">\n   </span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\"> i</span><span class=\"pun\">++</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      n</span><span class=\"pun\">[</span><span class=\"pln\"> i </span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> i </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">100</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// set element at location i to i + 100</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Element&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> setw</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">13</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Value&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// output each array element&#39;s value                      </span><span class=\"pln\">\n   </span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> j </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\"> j </span><span class=\"pun\">&lt;</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\"> j</span><span class=\"pun\">++</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> setw</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">7</span><span class=\"pln\"> </span><span class=\"pun\">)&lt;&lt;</span><span class=\"pln\"> j </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> setw</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">13</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> n</span><span class=\"pun\">[</span><span class=\"pln\"> j </span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>This program makes use of <b>setw()</b> function to format the output. When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nElement        Value\n      0          100\n      1          101\n      2          102\n      3          103\n      4          104\n      5          105\n      6          106\n      7          107\n      8          108\n      9          109\n</pre>\n\n<h2>Arrays in C++</h2>\n\n<p>Arrays are important to C++ and should need lots of more detail. There are following few important concepts, which should be clear to a C++ programmer &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Concept &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_multi_dimensional_arrays.htm\" title=\"Multi-dimensional arrays in C++\">Multi-dimensional arrays</a>\n\t\t\t<p>C++ supports multidimensional arrays. The simplest form of the multidimensional array is the two-dimensional array.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_pointer_to_an_array.htm\" title=\"Pointer to an array in C++\">Pointer to an array</a>\n\t\t\t<p>You can generate a pointer to the first element of an array by simply specifying the array name, without any index.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_passing_arrays_to_functions.htm\" title=\"Passing arrays to functions as arguments in C++\">Passing arrays to functions</a>\n\t\t\t<p>You can pass to the function a pointer to an array by specifying the array&#39;s name without an index.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_return_arrays_from_functions.htm\" title=\"Return array from functions in C++\">Return array from functions</a>\n\t\t\t<p>C++ allows a function to return an array.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },
        {
          "tag_line": "C++ Strings",
        
          "details": [
            "<h2>C++ Strings</h2>\n\n<p>C++ provides following two types of string representations &minus;</p>\n\n<ul class=\"list\">\n\t<li>The C-style character string.</li>\n\t<li>The string class type introduced with Standard C++.</li>\n</ul>\n\n<h2>The C-Style Character String</h2>\n\n<p>The C-style character string originated within the C language and continues to be supported within C++. This string is actually a one-dimensional array of characters which is terminated by a <b>null</b> character &#39;\\0&#39;. Thus a null-terminated string contains the characters that comprise the string followed by a <b>null</b>.</p>\n\n<p>The following declaration and initialization create a string consisting of the word &quot;Hello&quot;. To hold the null character at the end of the array, the size of the character array containing the string is one more than the number of characters in the word &quot;Hello.&quot;</p>\n\n<pre class=\"result notranlate\">\nchar greeting[6] = {&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;\\0&#39;};\n</pre>\n\n<p>If you follow the rule of array initialization, then you can write the above statement as follows &minus;</p>\n\n<pre class=\"result notranlate\">\nchar greeting[] = &quot;Hello&quot;;\n</pre>\n\n<p>Following is the memory presentation of above defined string in C/C++ &minus;</p>\n\n<p><img alt=\"String Presentation in C/C++\" src=\"https://www.tutorialspoint.com/cplusplus/images/string_representation.jpg\" /></p>\n\n<p>Actually, you do not place the null character at the end of a string constant. The C++ compiler automatically places the &#39;\\0&#39; at the end of the string when it initializes the array. Let us try to print above-mentioned string &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/OzjL2L\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranlate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">char</span><span class=\"pln\"> greeting</span><span class=\"pun\">[</span><span class=\"lit\">6</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"str\">&#39;H&#39;</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&#39;e&#39;</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&#39;l&#39;</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&#39;l&#39;</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&#39;o&#39;</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&#39;\\0&#39;</span><span class=\"pun\">};</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Greeting message: &quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> greeting </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranlate\">\nGreeting message: Hello\n</pre>\n\n<p>C++ supports a wide range of functions that manipulate null-terminated strings &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Function &amp; Purpose</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td>\n\t\t\t<p><b>strcpy(s1, s2);</b></p>\n\n\t\t\t<p>Copies string s2 into string s1.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td>\n\t\t\t<p><b>strcat(s1, s2);</b></p>\n\n\t\t\t<p>Concatenates string s2 onto the end of string s1.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td>\n\t\t\t<p><b>strlen(s1);</b></p>\n\n\t\t\t<p>Returns the length of string s1.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td>\n\t\t\t<p><b>strcmp(s1, s2);</b></p>\n\n\t\t\t<p>Returns 0 if s1 and s2 are the same; less than 0 if s1&lt;s2; greater than 0 if s1&gt;s2.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td>\n\t\t\t<p><b>strchr(s1, ch);</b></p>\n\n\t\t\t<p>Returns a pointer to the first occurrence of character ch in string s1.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">6</td>\n\t\t\t<td>\n\t\t\t<p><b>strstr(s1, s2);</b></p>\n\n\t\t\t<p>Returns a pointer to the first occurrence of string s2 in string s1.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Following example makes use of few of the above-mentioned functions &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/oA6mP3\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranlate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;cstring&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">char</span><span class=\"pln\"> str1</span><span class=\"pun\">[</span><span class=\"lit\">10</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\"> str2</span><span class=\"pun\">[</span><span class=\"lit\">10</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&quot;World&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\"> str3</span><span class=\"pun\">[</span><span class=\"lit\">10</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">  len </span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// copy str1 into str3</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> str3</span><span class=\"pun\">,</span><span class=\"pln\"> str1</span><span class=\"pun\">);</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;strcpy( str3, str1) : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> str3 </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// concatenates str1 and str2</span><span class=\"pln\">\n   strcat</span><span class=\"pun\">(</span><span class=\"pln\"> str1</span><span class=\"pun\">,</span><span class=\"pln\"> str2</span><span class=\"pun\">);</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;strcat( str1, str2): &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> str1 </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// total lenghth of str1 after concatenation</span><span class=\"pln\">\n   len </span><span class=\"pun\">=</span><span class=\"pln\"> strlen</span><span class=\"pun\">(</span><span class=\"pln\">str1</span><span class=\"pun\">);</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;strlen(str1) : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> len </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces result something as follows &minus;</p>\n\n<pre class=\"result notranlate\">\nstrcpy( str3, str1) : Hello\nstrcat( str1, str2): HelloWorld\nstrlen(str1) : 10\n</pre>\n\n<h2>The String Class in C++</h2>\n\n<p>The standard C++ library provides a <b>string</b> class type that supports all the operations mentioned above, additionally much more functionality. Let us check the following example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/upuWFC\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranlate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;string&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">string</span><span class=\"pln\"> str1 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">string</span><span class=\"pln\"> str2 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&quot;World&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">string</span><span class=\"pln\"> str3</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">  len </span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// copy str1 into str3</span><span class=\"pln\">\n   str3 </span><span class=\"pun\">=</span><span class=\"pln\"> str1</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;str3 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> str3 </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// concatenates str1 and str2</span><span class=\"pln\">\n   str3 </span><span class=\"pun\">=</span><span class=\"pln\"> str1 </span><span class=\"pun\">+</span><span class=\"pln\"> str2</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;str1 + str2 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> str3 </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// total length of str3 after concatenation</span><span class=\"pln\">\n   len </span><span class=\"pun\">=</span><span class=\"pln\"> str3</span><span class=\"pun\">.</span><span class=\"pln\">size</span><span class=\"pun\">();</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;str3.size() :  &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> len </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces result something as follows &minus;</p>\n\n<pre class=\"result notranlate\">\nstr3 : Hello\nstr1 + str2 : HelloWorld\nstr3.size() :  10\n</pre>\n"
          ]
        },     {
          "tag_line": "C++ Pointers",
        
          "details": [
            "<h2>C++ Pointers</h2>\n\n<p>C++ pointers are easy and fun to learn. Some C++ tasks are performed more easily with pointers, and other C++ tasks, such as dynamic memory allocation, cannot be performed without them.</p>\n\n<p>As you know every variable is a memory location and every memory location has its address defined which can be accessed using ampersand (&amp;) operator which denotes an address in memory. Consider the following which will print the address of the variables defined &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/fQ1InE\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">  var1</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\"> var2</span><span class=\"pun\">[</span><span class=\"lit\">10</span><span class=\"pun\">];</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Address of var1 variable: &quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"pln\">var1 </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Address of var2 variable: &quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"pln\">var2 </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nAddress of var1 variable: 0xbfebd5c0\nAddress of var2 variable: 0xbfebd5b6\n</pre>\n\n<h2>What are Pointers?</h2>\n\n<p>A <b>pointer</b> is a variable whose value is the address of another variable. Like any variable or constant, you must declare a pointer before you can work with it. The general form of a pointer variable declaration is &minus;</p>\n\n<pre class=\"result notranslate\">\ntype *var-name;\n</pre>\n\n<p>Here, <b>type</b> is the pointer&#39;s base type; it must be a valid C++ type and <b>var-name</b> is the name of the pointer variable. The asterisk you used to declare a pointer is the same asterisk that you use for multiplication. However, in this statement the asterisk is being used to designate a variable as a pointer. Following are the valid pointer declaration &minus;</p>\n\n<pre class=\"result notranslate\">\nint    *ip;    // pointer to an integer\ndouble *dp;    // pointer to a double\nfloat  *fp;    // pointer to a float\nchar   *ch     // pointer to character\n</pre>\n\n<p>The actual data type of the value of all pointers, whether integer, float, character, or otherwise, is the same, a long hexadecimal number that represents a memory address. The only difference between pointers of different data types is the data type of the variable or constant that the pointer points to.</p>\n\n<h2>Using Pointers in C++</h2>\n\n<p>There are few important operations, which we will do with the pointers very frequently. <b>(a)</b> We define a pointer variable. <b>(b)</b> Assign the address of a variable to a pointer. <b>(c)</b> Finally access the value at the address available in the pointer variable. This is done by using unary operator * that returns the value of the variable located at the address specified by its operand. Following example makes use of these operations &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/gTdFv7\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">  </span><span class=\"kwd\">var</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\">   </span><span class=\"com\">// actual variable declaration.</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">  </span><span class=\"pun\">*</span><span class=\"pln\">ip</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// pointer variable </span><span class=\"pln\">\n\n   ip </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"kwd\">var</span><span class=\"pun\">;</span><span class=\"pln\">       </span><span class=\"com\">// store address of var in pointer variable</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Value of var variable: &quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">var</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// print the address stored in ip pointer variable</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Address stored in ip variable: &quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> ip </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// access the value at the address available in pointer</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Value of *ip variable: &quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\">ip </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces result something as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nValue of var variable: 20\nAddress stored in ip variable: 0xbfc601ac\nValue of *ip variable: 20\n</pre>\n\n<h2>Pointers in C++</h2>\n\n<p>Pointers have many but easy concepts and they are very important to C++ programming. There are following few important pointer concepts which should be clear to a C++ programmer &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:Center;\">Concept &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_null_pointers.htm\" title=\"C++ Null Pointers\">Null Pointers</a>\n\t\t\t<p>C++ supports null pointer, which is a constant with a value of zero defined in several standard libraries.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_pointer_arithmatic.htm\" title=\"C++ Pointer Arithmetic\">Pointer Arithmetic</a>\n\t\t\t<p>There are four arithmetic operators that can be used on pointers: ++, --, +, -</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_pointers_vs_arrays.htm\" title=\"C++ Pointers vs Arrays\">Pointers vs Arrays</a>\n\t\t\t<p>There is a close relationship between pointers and arrays.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_array_of_pointers.htm\" title=\"C++ Array of Pointers\">Array of Pointers</a>\n\t\t\t<p>You can define arrays to hold a number of pointers.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_pointer_to_pointer.htm\" title=\"C++ Pointer to Pointer Operators\">Pointer to Pointer</a>\n\t\t\t<p>C++ allows you to have pointer on a pointer and so on.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">6</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_passing_pointers_to_functions.htm\" title=\"Passing Pointers to Functions in C++\">Passing Pointers to Functions</a>\n\t\t\t<p>Passing an argument by reference or by address both enable the passed argument to be changed in the calling function by the called function.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">7</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_return_pointer_from_functions.htm\" title=\"Return Pointer from Functions in C++\">Return Pointer from Functions</a>\n\t\t\t<p>C++ allows a function to return a pointer to local variable, static variable and dynamically allocated memory as well.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },     {
          "tag_line": "C++ References",
        
          "details": [
            "<h2>C++ References</h2>\n\n<p>A reference variable is an alias, that is, another name for an already existing variable. Once a reference is initialized with a variable, either the variable name or the reference name may be used to refer to the variable.</p>\n\n<h2>References vs Pointers</h2>\n\n<p>References are often confused with pointers but three major differences between references and pointers are &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>You cannot have NULL references. You must always be able to assume that a reference is connected to a legitimate piece of storage.</p>\n\t</li>\n\t<li>\n\t<p>Once a reference is initialized to an object, it cannot be changed to refer to another object. Pointers can be pointed to another object at any time.</p>\n\t</li>\n\t<li>\n\t<p>A reference must be initialized when it is created. Pointers can be initialized at any time.</p>\n\t</li>\n</ul>\n\n<h2>Creating References in C++</h2>\n\n<p>Think of a variable name as a label attached to the variable&#39;s location in memory. You can then think of a reference as a second label attached to that memory location. Therefore, you can access the contents of the variable through either the original variable name or the reference. For example, suppose we have the following example &minus;</p>\n\n<pre class=\"result notranslate\">\nint i = 17;\n</pre>\n\n<p>We can declare reference variables for i as follows.</p>\n\n<pre class=\"result notranslate\">\nint&amp; r = i;\n</pre>\n\n<p>Read the &amp; in these declarations as <b>reference</b>. Thus, read the first declaration as &quot;r is an integer reference initialized to i&quot; and read the second declaration as &quot;s is a double reference initialized to d.&quot;. Following example makes use of references on int and double &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/SS8zU0\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// declare simple variables</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">    i</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">double</span><span class=\"pln\"> d</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// declare reference variables</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pun\">&amp;</span><span class=\"pln\">    r </span><span class=\"pun\">=</span><span class=\"pln\"> i</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">double</span><span class=\"pun\">&amp;</span><span class=\"pln\"> s </span><span class=\"pun\">=</span><span class=\"pln\"> d</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Value of i : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Value of i reference : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> r  </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   d </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">11.7</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Value of d : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> d </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Value of d reference : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> s  </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled together and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nValue of i : 5\nValue of i reference : 5\nValue of d : 11.7\nValue of d reference : 11.7\n</pre>\n\n<p>References are usually used for function argument lists and function return values. So following are two important subjects related to C++ references which should be clear to a C++ programmer &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Concept &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/passing_parameters_by_references.htm\" title=\"Passing parameters by references in C++\">References as Parameters</a>\n\t\t\t<p>C++ supports passing references as function parameter more safely than parameters.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/returning_values_by_reference.htm\" title=\"Returning values by reference in C++\">Reference as Return Value</a>\n\t\t\t<p>You can return reference from a C++ function like any other data type.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },     {
          "tag_line": "C++ Date and Time",
        
          "details": [
            "<h2>C++ Date and Time</h2>\n\n<p>The C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. To access date and time related functions and structures, you would need to include &lt;ctime&gt; header file in your C++ program.</p>\n\n<p>There are four time-related types: <b>clock_t, time_t, size_t</b>, and <b>tm</b>. The types - clock_t, size_t and time_t are capable of representing the system time and date as some sort of integer.</p>\n\n<p>The structure type <b>tm</b> holds the date and time in the form of a C structure having the following elements &minus;</p>\n\n<pre class=\"result notranslate\">\nstruct tm {\n   int tm_sec;   // seconds of minutes from 0 to 61\n   int tm_min;   // minutes of hour from 0 to 59\n   int tm_hour;  // hours of day from 0 to 24\n   int tm_mday;  // day of month from 1 to 31\n   int tm_mon;   // month of year from 0 to 11\n   int tm_year;  // year since 1900\n   int tm_wday;  // days since sunday\n   int tm_yday;  // days since January 1st\n   int tm_isdst; // hours of daylight savings time\n}\n</pre>\n\n<p>Following are the important functions, which we use while working with date and time in C or C++. All these functions are part of standard C and C++ library and you can check their detail using reference to C++ standard library given below.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Function &amp; Purpose</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td>\n\t\t\t<p><b>time_t time(time_t *time);</b></p>\n\n\t\t\t<p>This returns the current calendar time of the system in number of seconds elapsed since January 1, 1970. If the system has no time, .1 is returned.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td>\n\t\t\t<p><b>char *ctime(const time_t *time);</b></p>\n\n\t\t\t<p>This returns a pointer to a string of the form <i>day month year hours:minutes:seconds year\\n\\0</i>.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td>\n\t\t\t<p><b>struct tm *localtime(const time_t *time);</b></p>\n\n\t\t\t<p>This returns a pointer to the <b>tm</b> structure representing local time.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td>\n\t\t\t<p><b>clock_t clock(void);</b></p>\n\n\t\t\t<p>This returns a value that approximates the amount of time the calling program has been running. A value of .1 is returned if the time is not available.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td>\n\t\t\t<p><b>char * asctime ( const struct tm * time );</b></p>\n\n\t\t\t<p>This returns a pointer to a string that contains the information stored in the structure pointed to by time converted into the form: day month date hours:minutes:seconds year\\n\\0</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">6</td>\n\t\t\t<td>\n\t\t\t<p><b>struct tm *gmtime(const time_t *time);</b></p>\n\n\t\t\t<p>This returns a pointer to the time in the form of a tm structure. The time is represented in Coordinated Universal Time (UTC), which is essentially Greenwich Mean Time (GMT).</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">7</td>\n\t\t\t<td>\n\t\t\t<p><b>time_t mktime(struct tm *time);</b></p>\n\n\t\t\t<p>This returns the calendar-time equivalent of the time found in the structure pointed to by time.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">8</td>\n\t\t\t<td>\n\t\t\t<p><b>double difftime ( time_t time2, time_t time1 );</b></p>\n\n\t\t\t<p>This function calculates the difference in seconds between time1 and time2.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">9</td>\n\t\t\t<td>\n\t\t\t<p><b>size_t strftime();</b></p>\n\n\t\t\t<p>This function can be used to format date and time in a specific format.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Current Date and Time</h2>\n\n<p>Suppose you want to retrieve the current system date and time, either as a local time or as a Coordinated Universal Time (UTC). Following is the example to achieve the same &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/DHKMA9\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;ctime&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// current date/time based on current system</span><span class=\"pln\">\n   </span><span class=\"typ\">time_t</span><span class=\"pln\"> now </span><span class=\"pun\">=</span><span class=\"pln\"> time</span><span class=\"pun\">(</span><span class=\"lit\">0</span><span class=\"pun\">);</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// convert now to string form</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pun\">*</span><span class=\"pln\"> dt </span><span class=\"pun\">=</span><span class=\"pln\"> ctime</span><span class=\"pun\">(&amp;</span><span class=\"pln\">now</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;The local date and time is: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> dt </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// convert now to tm struct for UTC</span><span class=\"pln\">\n   tm </span><span class=\"pun\">*</span><span class=\"pln\">gmtm </span><span class=\"pun\">=</span><span class=\"pln\"> gmtime</span><span class=\"pun\">(&amp;</span><span class=\"pln\">now</span><span class=\"pun\">);</span><span class=\"pln\">\n   dt </span><span class=\"pun\">=</span><span class=\"pln\"> asctime</span><span class=\"pun\">(</span><span class=\"pln\">gmtm</span><span class=\"pun\">);</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;The UTC date and time is:&quot;</span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> dt </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nThe local date and time is: Sat Jan  8 20:07:41 2011\n\nThe UTC date and time is:Sun Jan  9 03:07:41 2011\n</pre>\n\n<h2>Format Time using struct tm</h2>\n\n<p>The <b>tm</b> structure is very important while working with date and time in either C or C++. This structure holds the date and time in the form of a C structure as mentioned above. Most of the time related functions makes use of tm structure. Following is an example which makes use of various date and time related functions and tm structure &minus;</p>\n\n<p>While using structure in this chapter, I&#39;m making an assumption that you have basic understanding on C structure and how to access structure members using arrow -&gt; operator.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/SMnO0N\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;ctime&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// current date/time based on current system</span><span class=\"pln\">\n   </span><span class=\"typ\">time_t</span><span class=\"pln\"> now </span><span class=\"pun\">=</span><span class=\"pln\"> time</span><span class=\"pun\">(</span><span class=\"lit\">0</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Number of sec since January 1,1970:&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> now </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   tm </span><span class=\"pun\">*</span><span class=\"pln\">ltm </span><span class=\"pun\">=</span><span class=\"pln\"> localtime</span><span class=\"pun\">(&amp;</span><span class=\"pln\">now</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"com\">// print various components of tm structure.</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Year&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"lit\">1970</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> ltm</span><span class=\"pun\">-&gt;</span><span class=\"pln\">tm_year</span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Month: &quot;</span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> ltm</span><span class=\"pun\">-&gt;</span><span class=\"pln\">tm_mon</span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Day: &quot;</span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">  ltm</span><span class=\"pun\">-&gt;</span><span class=\"pln\">tm_mday </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Time: &quot;</span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> ltm</span><span class=\"pun\">-&gt;</span><span class=\"pln\">tm_hour </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;:&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> ltm</span><span class=\"pun\">-&gt;</span><span class=\"pln\">tm_min </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;:&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> ltm</span><span class=\"pun\">-&gt;</span><span class=\"pln\">tm_sec </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nNumber of sec since January 1, 1970:1294548238\nYear: 2011\nMonth: 1\nDay: 8\nTime: 22: 44:59\n</pre>\n"
          ]
        },
        {
          "tag_line": "C++ Basic Input/Output",
        
          "details": [
            "<h2>C++ Basic Input/Output</h2>\n\n<p>The C++ standard libraries provide an extensive set of input/output capabilities which we will see in subsequent chapters. This chapter will discuss very basic and most common I/O operations required for C++ programming.</p>\n\n<p>C++ I/O occurs in streams, which are sequences of bytes. If bytes flow from a device like a keyboard, a disk drive, or a network connection etc. to main memory, this is called <b>input operation</b> and if bytes flow from main memory to a device like a display screen, a printer, a disk drive, or a network connection, etc., this is called <b>output operation</b>.</p>\n\n<h2>I/O Library Header Files</h2>\n\n<p>There are following header files important to C++ programs &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Header File &amp; Function and Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td>\n\t\t\t<p><b>&lt;iostream&gt;</b></p>\n\n\t\t\t<p>This file defines the <b>cin, cout, cerr</b> and <b>clog</b> objects, which correspond to the standard input stream, the standard output stream, the un-buffered standard error stream and the buffered standard error stream, respectively.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td>\n\t\t\t<p><b>&lt;iomanip&gt;</b></p>\n\n\t\t\t<p>This file declares services useful for performing formatted I/O with so-called parameterized stream manipulators, such as <b>setw</b> and <b>setprecision</b>.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td>\n\t\t\t<p><b>&lt;fstream&gt;</b></p>\n\n\t\t\t<p>This file declares services for user-controlled file processing. We will discuss about it in detail in File and Stream related chapter.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>The Standard Output Stream (cout)</h2>\n\n<p>The predefined object <b>cout</b> is an instance of <b>ostream</b> class. The cout object is said to be &quot;connected to&quot; the standard output device, which usually is the display screen. The <b>cout</b> is used in conjunction with the stream insertion operator, which is written as &lt;&lt; which are two less than signs as shown in the following example.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/qFaiKd\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\"> str</span><span class=\"pun\">[]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello C++&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Value of str is : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> str </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nValue of str is : Hello C++\n</pre>\n\n<p>The C++ compiler also determines the data type of variable to be output and selects the appropriate stream insertion operator to display the value. The &lt;&lt; operator is overloaded to output data items of built-in types integer, float, double, strings and pointer values.</p>\n\n<p>The insertion operator &lt;&lt; may be used more than once in a single statement as shown above and <b>endl</b> is used to add a new-line at the end of the line.</p>\n\n<h2>The Standard Input Stream (cin)</h2>\n\n<p>The predefined object <b>cin</b> is an instance of <b>istream</b> class. The cin object is said to be attached to the standard input device, which usually is the keyboard. The <b>cin</b> is used in conjunction with the stream extraction operator, which is written as &gt;&gt; which are two greater than signs as shown in the following example.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/NDGHmy\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\"> name</span><span class=\"pun\">[</span><span class=\"lit\">50</span><span class=\"pun\">];</span><span class=\"pln\">\n \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Please enter your name: &quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   cin </span><span class=\"pun\">&gt;&gt;</span><span class=\"pln\"> name</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Your name is: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> name </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it will prompt you to enter a name. You enter a value and then hit enter to see the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nPlease enter your name: cplusplus\nYour name is: cplusplus\n</pre>\n\n<p>The C++ compiler also determines the data type of the entered value and selects the appropriate stream extraction operator to extract the value and store it in the given variables.</p>\n\n<p>The stream extraction operator &gt;&gt; may be used more than once in a single statement. To request more than one datum you can use the following &minus;</p>\n\n<pre class=\"result notranslate\">\ncin &gt;&gt; name &gt;&gt; age;\n</pre>\n\n<p>This will be equivalent to the following two statements &minus;</p>\n\n<pre class=\"result notranslate\">\ncin &gt;&gt; name;\ncin &gt;&gt; age;\n</pre>\n\n<h2>The Standard Error Stream (cerr)</h2>\n\n<p>The predefined object <b>cerr</b> is an instance of <b>ostream</b> class. The cerr object is said to be attached to the standard error device, which is also a display screen but the object <b>cerr</b> is un-buffered and each stream insertion to cerr causes its output to appear immediately.</p>\n\n<p>The <b>cerr</b> is also used in conjunction with the stream insertion operator as shown in the following example.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/3xp5lM\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\"> str</span><span class=\"pun\">[]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&quot;Unable to read....&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   cerr </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Error message : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> str </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nError message : Unable to read....\n</pre>\n\n<h2>The Standard Log Stream (clog)</h2>\n\n<p>The predefined object <b>clog</b> is an instance of <b>ostream</b> class. The clog object is said to be attached to the standard error device, which is also a display screen but the object <b>clog</b> is buffered. This means that each insertion to clog could cause its output to be held in a buffer until the buffer is filled or until the buffer is flushed.</p>\n\n<p>The <b>clog</b> is also used in conjunction with the stream insertion operator as shown in the following example.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/Dewejb\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\"> str</span><span class=\"pun\">[]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&quot;Unable to read....&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   clog </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Error message : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> str </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nError message : Unable to read....\n</pre>\n\n<p>You would not be able to see any difference in cout, cerr and clog with these small examples, but while writing and executing big programs the difference becomes obvious. So it is good practice to display error messages using cerr stream and while displaying other log messages then clog should be used.</p>\n"
          ]
        },
        {
          "tag_line": "C++ Data Structures",
        
          "details": [
            "<h2>C++ Data Structures</h2>\n\n<p>C/C++ arrays allow you to define variables that combine several data items of the same kind, but <b>structure</b> is another user defined data type which allows you to combine data items of different kinds.</p>\n\n<p>Structures are used to represent a record, suppose you want to keep track of your books in a library. You might want to track the following attributes about each book &minus;</p>\n\n<ul class=\"list\">\n\t<li>Title</li>\n\t<li>Author</li>\n\t<li>Subject</li>\n\t<li>Book ID</li>\n</ul>\n\n<h2>Defining a Structure</h2>\n\n<p>To define a structure, you must use the struct statement. The struct statement defines a new data type, with more than one member, for your program. The format of the struct statement is this &minus;</p>\n\n<pre class=\"result notranslate\">\nstruct [structure tag] {\n   member definition;\n   member definition;\n   ...\n   member definition;\n} [one or more structure variables];  \n</pre>\n\n<p>The <b>structure tag</b> is optional and each member definition is a normal variable definition, such as int i; or float f; or any other valid variable definition. At the end of the structure&#39;s definition, before the final semicolon, you can specify one or more structure variables but it is optional. Here is the way you would declare the Book structure &minus;</p>\n\n<pre class=\"result notranslate\">\nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} book;  \n</pre>\n\n<h2>Accessing Structure Members</h2>\n\n<p>To access any member of a structure, we use the <b>member access operator (.)</b>. The member access operator is coded as a period between the structure variable name and the structure member that we wish to access. You would use <b>struct</b> keyword to define variables of structure type. Following is the example to explain usage of structure &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/zvIEi0\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;cstring&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\">  title</span><span class=\"pun\">[</span><span class=\"lit\">50</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\">  author</span><span class=\"pun\">[</span><span class=\"lit\">50</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\">  subject</span><span class=\"pun\">[</span><span class=\"lit\">100</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">   book_id</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Book1 of type Book</span><span class=\"pln\">\n   </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Book2 of type Book</span><span class=\"pln\">\n \n   </span><span class=\"com\">// book 1 specification</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Learn C++ Programming&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">author</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Chand Miyan&quot;</span><span class=\"pun\">);</span><span class=\"pln\"> \n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">subject</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;C++ Programming&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">book_id </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">6495407</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// book 2 specification</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Telecom Billing&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">author</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Yakit Singha&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">subject</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Telecom&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">book_id </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">6495700</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// Print Book1 info</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book 1 title : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">title </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book 1 author : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">author </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book 1 subject : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">subject </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book 1 id : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">book_id </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Print Book2 info</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book 2 title : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">title </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book 2 author : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">author </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book 2 subject : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">subject </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book 2 id : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">book_id </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nBook 1 title : Learn C++ Programming\nBook 1 author : Chand Miyan\nBook 1 subject : C++ Programming\nBook 1 id : 6495407\nBook 2 title : Telecom Billing\nBook 2 author : Yakit Singha\nBook 2 subject : Telecom\nBook 2 id : 6495700\n</pre>\n\n<h2>Structures as Function Arguments</h2>\n\n<p>You can pass a structure as a function argument in very similar way as you pass any other variable or pointer. You would access structure variables in the similar way as you have accessed in the above example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/xvb7BQ\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;cstring&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">void</span><span class=\"pln\"> printBook</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> book </span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\">  title</span><span class=\"pun\">[</span><span class=\"lit\">50</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\">  author</span><span class=\"pun\">[</span><span class=\"lit\">50</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\">  subject</span><span class=\"pun\">[</span><span class=\"lit\">100</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">   book_id</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Book1 of type Book</span><span class=\"pln\">\n   </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Book2 of type Book</span><span class=\"pln\">\n \n   </span><span class=\"com\">// book 1 specification</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Learn C++ Programming&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">author</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Chand Miyan&quot;</span><span class=\"pun\">);</span><span class=\"pln\"> \n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">subject</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;C++ Programming&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">book_id </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">6495407</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// book 2 specification</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Telecom Billing&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">author</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Yakit Singha&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">subject</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Telecom&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">book_id </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">6495700</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// Print Book1 info</span><span class=\"pln\">\n   printBook</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pln\"> </span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Print Book2 info</span><span class=\"pln\">\n   printBook</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pln\"> </span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"kwd\">void</span><span class=\"pln\"> printBook</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> book </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book title : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> book</span><span class=\"pun\">.</span><span class=\"pln\">title </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book author : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> book</span><span class=\"pun\">.</span><span class=\"pln\">author </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book subject : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> book</span><span class=\"pun\">.</span><span class=\"pln\">subject </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book id : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> book</span><span class=\"pun\">.</span><span class=\"pln\">book_id </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nBook title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n</pre>\n\n<h2>Pointers to Structures</h2>\n\n<p>You can define pointers to structures in very similar way as you define pointer to any other variable as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nstruct Books *struct_pointer;\n</pre>\n\n<p>Now, you can store the address of a structure variable in the above defined pointer variable. To find the address of a structure variable, place the &amp; operator before the structure&#39;s name as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nstruct_pointer = &amp;Book1;\n</pre>\n\n<p>To access the members of a structure using a pointer to that structure, you must use the -&gt; operator as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nstruct_pointer-&gt;title;\n</pre>\n\n<p>Let us re-write above example using structure pointer, hope this will be easy for you to understand the concept &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/P8IeUE\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;cstring&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">void</span><span class=\"pln\"> printBook</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\">book </span><span class=\"pun\">);</span><span class=\"pln\">\n\n</span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\">  title</span><span class=\"pun\">[</span><span class=\"lit\">50</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\">  author</span><span class=\"pun\">[</span><span class=\"lit\">50</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">char</span><span class=\"pln\">  subject</span><span class=\"pun\">[</span><span class=\"lit\">100</span><span class=\"pun\">];</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\">   book_id</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Book1 of type Book</span><span class=\"pln\">\n   </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Book2 of type Book</span><span class=\"pln\">\n \n   </span><span class=\"com\">// Book 1 specification</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Learn C++ Programming&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">author</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Chand Miyan&quot;</span><span class=\"pun\">);</span><span class=\"pln\"> \n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">subject</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;C++ Programming&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Book1</span><span class=\"pun\">.</span><span class=\"pln\">book_id </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">6495407</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Book 2 specification</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">title</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Telecom Billing&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">author</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Yakit Singha&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   strcpy</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">subject</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">&quot;Telecom&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Book2</span><span class=\"pun\">.</span><span class=\"pln\">book_id </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">6495700</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// Print Book1 info, passing address of structure</span><span class=\"pln\">\n   printBook</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"typ\">Book1</span><span class=\"pln\"> </span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Print Book1 info, passing address of structure</span><span class=\"pln\">\n   printBook</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"typ\">Book2</span><span class=\"pln\"> </span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"com\">// This function accept pointer to structure as parameter.</span><span class=\"pln\">\n</span><span class=\"kwd\">void</span><span class=\"pln\"> printBook</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"typ\">Books</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\">book </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book title : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> book</span><span class=\"pun\">-&gt;</span><span class=\"pln\">title </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book author : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> book</span><span class=\"pun\">-&gt;</span><span class=\"pln\">author </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book subject : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> book</span><span class=\"pun\">-&gt;</span><span class=\"pln\">subject </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Book id : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> book</span><span class=\"pun\">-&gt;</span><span class=\"pln\">book_id </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nBook title : Learn C++ Programming\nBook author : Chand Miyan\nBook subject : C++ Programming\nBook id : 6495407\nBook title : Telecom Billing\nBook author : Yakit Singha\nBook subject : Telecom\nBook id : 6495700\n</pre>\n\n<h2>The typedef Keyword</h2>\n\n<p>There is an easier way to define structs or you could &quot;alias&quot; types you create. For example &minus;</p>\n\n<pre class=\"result notranslate\">\ntypedef struct {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n} Books;\n</pre>\n\n<p>Now, you can use <i>Books</i> directly to define variables of <i>Books</i> type without using struct keyword. Following is the example &minus;</p>\n\n<pre class=\"result notranslate\">\nBooks Book1, Book2;\n</pre>\n\n<p>You can use <b>typedef</b> keyword for non-structs as well as follows &minus;</p>\n\n<pre class=\"result notranslate\">\ntypedef long int *pint32;\n \npint32 x, y, z;\n</pre>\n\n<p>x, y and z are all pointers to long ints.</p>\n"
          ]
        }
      ]
    },

    {
      "title": "C++ Object Oriented",
      "content": [
        {
          "tag_line": "C++ Classes and Objects",
        
          "details": [
            "<h2>C++ Classes and Objects</h2>\n\n<p>The main purpose of C++ programming is to add object orientation to the C programming language and classes are the central feature of C++ that supports object-oriented programming and are often called user-defined types.</p>\n\n<p>A class is used to specify the form of an object and it combines data representation and methods for manipulating that data into one neat package. The data and functions within a class are called members of the class.</p>\n\n<h2>C++ Class Definitions</h2>\n\n<p>When you define a class, you define a blueprint for a data type. This doesn&#39;t actually define any data, but it does define what the class name means, that is, what an object of the class will consist of and what operations can be performed on such an object.</p>\n\n<p>A class definition starts with the keyword <b>class</b> followed by the class name; and the class body, enclosed by a pair of curly braces. A class definition must be followed either by a semicolon or a list of declarations. For example, we defined the Box data type using the keyword <b>class</b> as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      double length;   // Length of a box\n      double breadth;  // Breadth of a box\n      double height;   // Height of a box\n};\n</pre>\n\n<p>The keyword <b>public</b> determines the access attributes of the members of the class that follows it. A public member can be accessed from outside the class anywhere within the scope of the class object. You can also specify the members of a class as <b>private</b> or <b>protected</b> which we will discuss in a sub-section.</p>\n\n<h2>Define C++ Objects</h2>\n\n<p>A class provides the blueprints for objects, so basically an object is created from a class. We declare objects of a class with exactly the same sort of declaration that we declare variables of basic types. Following statements declare two objects of class Box &minus;</p>\n\n<pre class=\"result notranslate\">\nBox Box1;          // Declare Box1 of type Box\nBox Box2;          // Declare Box2 of type Box\n</pre>\n\n<p>Both of the objects Box1 and Box2 will have their own copy of data members.</p>\n\n<h2>Accessing the Data Members</h2>\n\n<p>The public data members of objects of a class can be accessed using the direct member access operator (.). Let us try the following example to make the things clear &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/JeEWd6\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> length</span><span class=\"pun\">;</span><span class=\"pln\">   </span><span class=\"com\">// Length of a box</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> breadth</span><span class=\"pun\">;</span><span class=\"pln\">  </span><span class=\"com\">// Breadth of a box</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">   </span><span class=\"com\">// Height of a box</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Box1 of type Box</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Box2 of type Box</span><span class=\"pln\">\n   </span><span class=\"kwd\">double</span><span class=\"pln\"> volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0.0</span><span class=\"pun\">;</span><span class=\"pln\">     </span><span class=\"com\">// Store the volume of a box here</span><span class=\"pln\">\n \n   </span><span class=\"com\">// box 1 specification</span><span class=\"pln\">\n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5.0</span><span class=\"pun\">;</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">6.0</span><span class=\"pun\">;</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">breadth </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">7.0</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// box 2 specification</span><span class=\"pln\">\n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10.0</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">12.0</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">breadth </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">13.0</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// volume of box 1</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">breadth</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box1 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// volume of box 2</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">breadth</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box2 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nVolume of Box1 : 210\nVolume of Box2 : 1560\n</pre>\n\n<p>It is important to note that private and protected members can not be accessed directly using direct member access operator (.). We will learn how private and protected members can be accessed.</p>\n\n<h2>Classes and Objects in Detail</h2>\n\n<p>So far, you have got very basic idea about C++ Classes and Objects. There are further interesting concepts related to C++ Classes and Objects which we will discuss in various sub-sections listed below &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Concept &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_class_member_functions.htm\" title=\"C++ Class Member Functions\">Class Member Functions</a>\n\t\t\t<p>A member function of a class is a function that has its definition or its prototype within the class definition like any other variable.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_class_access_modifiers.htm\" title=\"C++ Class Access Modifiers\">Class Access Modifiers</a>\n\t\t\t<p>A class member can be defined as public, private or protected. By default members would be assumed as private.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_constructor_destructor.htm\" title=\"C++ Constructor &amp; Destructor\">Constructor &amp; Destructor</a>\n\t\t\t<p>A class constructor is a special function in a class that is called when a new object of the class is created. A destructor is also a special function which is called when created object is deleted.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_copy_constructor.htm\" title=\"C++ Copy Constructor\">Copy Constructor</a>\n\t\t\t<p>The copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_friend_functions.htm\" title=\"C++ Friend Functions\">Friend Functions</a>\n\t\t\t<p>A <b>friend</b> function is permitted full access to private and protected members of a class.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">6</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_inline_functions.htm\" title=\"C++ Inline Functions\">Inline Functions</a>\n\t\t\t<p>With an inline function, the compiler tries to expand the code in the body of the function in place of a call to the function.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">7</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_this_pointer.htm\" title=\"The this Pointer in C++\">this Pointer</a>\n\t\t\t<p>Every object has a special pointer <b>this</b> which points to the object itself.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">8</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_pointer_to_class.htm\" title=\"Pointer to C++ Classes\">Pointer to C++ Classes</a>\n\t\t\t<p>A pointer to a class is done exactly the same way a pointer to a structure is. In fact a class is really just a structure with functions in it.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">9</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_static_members.htm\" title=\"Static members of a class\">Static Members of a Class</a>\n\t\t\t<p>Both data members and function members of a class can be declared as static.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },
        {
          "tag_line": "C++ Inheritance",
        
          "details": [
            "<h2>C++ Inheritance</h2>\n\n<p>One of the most important concepts in object-oriented programming is that of inheritance. Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and fast implementation time.</p>\n\n<p>When creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the <b>base</b> class, and the new class is referred to as the <b>derived</b> class.</p>\n\n<p>The idea of inheritance implements the <b>is a</b> relationship. For example, mammal IS-A animal, dog IS-A mammal hence dog IS-A animal as well and so on.</p>\n\n<h2>Base and Derived Classes</h2>\n\n<p>A class can be derived from more than one classes, which means it can inherit data and functions from multiple base classes. To define a derived class, we use a class derivation list to specify the base class(es). A class derivation list names one or more base classes and has the form &minus;</p>\n\n<pre class=\"result notranslate\">\nclass derived-class: access-specifier base-class\n</pre>\n\n<p>Where access-specifier is one of <b>public, protected,</b> or <b>private</b>, and base-class is the name of a previously defined class. If the access-specifier is not used, then it is private by default.</p>\n\n<p>Consider a base class <b>Shape</b> and its derived class <b>Rectangle</b> as follows &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/ykk4hq\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">// Base class</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setWidth</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> w</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         width </span><span class=\"pun\">=</span><span class=\"pln\"> w</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setHeight</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> h</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> h</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">protected</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> width</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Derived class</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rectangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Rectangle</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setWidth</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Print the area of the object.</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total area: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal area: 35\n</pre>\n\n<h2>Access Control and Inheritance</h2>\n\n<p>A derived class can access all the non-private members of its base class. Thus base-class members that should not be accessible to the member functions of derived classes should be declared private in the base class.</p>\n\n<p>We can summarize the different access types according to - who can access them in the following way &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"25%\">Access</th>\n\t\t\t<th style=\"text-align:center;\" width=\"25%\">public</th>\n\t\t\t<th style=\"text-align:center;\" width=\"25%\">protected</th>\n\t\t\t<th style=\"text-align:center;\" width=\"25%\">private</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Same class</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>yes</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Derived classes</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>no</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Outside classes</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>no</td>\n\t\t\t<td>no</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>A derived class inherits all base class methods with the following exceptions &minus;</p>\n\n<ul class=\"list\">\n\t<li>Constructors, destructors and copy constructors of the base class.</li>\n\t<li>Overloaded operators of the base class.</li>\n\t<li>The friend functions of the base class.</li>\n</ul>\n\n<h2>Type of Inheritance</h2>\n\n<p>When deriving a class from a base class, the base class may be inherited through <b>public, protected</b> or <b> private</b> inheritance. The type of inheritance is specified by the access-specifier as explained above.</p>\n\n<p>We hardly use <b>protected</b> or <b> private</b> inheritance, but <b>public</b> inheritance is commonly used. While using different type of inheritance, following rules are applied &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Public Inheritance</b> &minus; When deriving a class from a <b>public</b> base class, <b>public</b> members of the base class become <b>public</b> members of the derived class and <b>protected</b> members of the base class become <b>protected</b> members of the derived class. A base class&#39;s <b>private</b> members are never accessible directly from a derived class, but can be accessed through calls to the <b>public</b> and <b>protected</b> members of the base class.</p>\n\t</li>\n\t<li>\n\t<p><b>Protected Inheritance</b> &minus; When deriving from a <b>protected</b> base class, <b>public</b> and <b>protected</b> members of the base class become <b>protected</b> members of the derived class.</p>\n\t</li>\n\t<li>\n\t<p><b>Private Inheritance</b> &minus; When deriving from a <b>private</b> base class, <b>public</b> and <b>protected</b> members of the base class become <b>private</b> members of the derived class.</p>\n\t</li>\n</ul>\n\n<h2>Multiple Inheritance</h2>\n\n<p>A C++ class can inherit members from more than one class and here is the extended syntax &minus;</p>\n\n<pre class=\"result notranslate\">\nclass derived-class: access baseA, access baseB....\n</pre>\n\n<p>Where access is one of <b>public, protected,</b> or <b>private</b> and would be given for every base class and they will be separated by comma as shown above. Let us try the following example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/NPe3oQ\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">// Base class Shape</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setWidth</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> w</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         width </span><span class=\"pun\">=</span><span class=\"pln\"> w</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setHeight</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> h</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> h</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">protected</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> width</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Base class PaintCost</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">PaintCost</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getCost</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> area </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"lit\">70</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Derived class</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rectangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">PaintCost</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Rectangle</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setWidth</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   area </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">();</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Print the area of the object.</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total area: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Print the total cost of painting</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total paint cost: $&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getCost</span><span class=\"pun\">(</span><span class=\"pln\">area</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal area: 35\nTotal paint cost: $2450\n</pre>\n"
          ]
        },
        {
          "tag_line": "C++ Overloading (Operator and Function)",
        
          "details": [
            "<h2>C++ Overloading (Operator and Function)</h2>\n\n<p>C++ allows you to specify more than one definition for a <b>function</b> name or an <b>operator</b> in the same scope, which is called <b>function overloading</b> and <b>operator overloading</b> respectively.</p>\n\n<p>An overloaded declaration is a declaration that is declared with the same name as a previously declared declaration in the same scope, except that both declarations have different arguments and obviously different definition (implementation).</p>\n\n<p>When you call an overloaded <b>function</b> or <b>operator</b>, the compiler determines the most appropriate definition to use, by comparing the argument types you have used to call the function or operator with the parameter types specified in the definitions. The process of selecting the most appropriate overloaded function or operator is called <b>overload resolution</b>.</p>\n\n<h2>Function Overloading in C++</h2>\n\n<p>You can have multiple definitions for the same function name in the same scope. The definition of the function must differ from each other by the types and/or the number of arguments in the argument list. You cannot overload function declarations that differ only by return type.</p>\n\n<p>Following is the example where same function <b>print()</b> is being used to print different data types &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/cR3W4M\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">class</span><span class=\"pln\"> printData </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> i</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n        cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Printing int: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"kwd\">double</span><span class=\"pln\">  f</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n        cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Printing float: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> f </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"kwd\">char</span><span class=\"pun\">*</span><span class=\"pln\"> c</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n        cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Printing character: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> c </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   printData pd</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// Call print to print integer</span><span class=\"pln\">\n   pd</span><span class=\"pun\">.</span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Call print to print float</span><span class=\"pln\">\n   pd</span><span class=\"pun\">.</span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"lit\">500.263</span><span class=\"pun\">);</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Call print to print character</span><span class=\"pln\">\n   pd</span><span class=\"pun\">.</span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"str\">&quot;Hello C++&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nPrinting int: 5\nPrinting float: 500.263\nPrinting character: Hello C++\n</pre>\n\n<h2>Operators Overloading in C++</h2>\n\n<p>You can redefine or overload most of the built-in operators available in C++. Thus, a programmer can use operators with user-defined types as well.</p>\n\n<p>Overloaded operators are functions with special names: the keyword &quot;operator&quot; followed by the symbol for the operator being defined. Like any other function, an overloaded operator has a return type and a parameter list.</p>\n\n<pre class=\"result notranslate\">\nBox operator+(const Box&amp;);\n</pre>\n\n<p>declares the addition operator that can be used to <b>add</b> two Box objects and returns final Box object. Most overloaded operators may be defined as ordinary non-member functions or as class member functions. In case we define above function as non-member function of a class then we would have to pass two arguments for each operand as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nBox operator+(const Box&amp;, const Box&amp;);\n</pre>\n\n<p>Following is the example to show the concept of operator over loading using a member function. Here an object is passed as an argument whose properties will be accessed using this object, the object which will call this operator can be accessed using <b>this</b> operator as explained below &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/4Alfgt\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> getVolume</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> length </span><span class=\"pun\">*</span><span class=\"pln\"> breadth </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setLength</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">double</span><span class=\"pln\"> len </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         length </span><span class=\"pun\">=</span><span class=\"pln\"> len</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setBreadth</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">double</span><span class=\"pln\"> bre </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         breadth </span><span class=\"pun\">=</span><span class=\"pln\"> bre</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setHeight</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">double</span><span class=\"pln\"> hei </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> hei</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// Overload + operator to add two Box objects.</span><span class=\"pln\">\n      </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"kwd\">operator</span><span class=\"pun\">+(</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Box</span><span class=\"pun\">&amp;</span><span class=\"pln\"> b</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"typ\">Box</span><span class=\"pln\"> box</span><span class=\"pun\">;</span><span class=\"pln\">\n         box</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">-&gt;</span><span class=\"pln\">length </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">.</span><span class=\"pln\">length</span><span class=\"pun\">;</span><span class=\"pln\">\n         box</span><span class=\"pun\">.</span><span class=\"pln\">breadth </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">-&gt;</span><span class=\"pln\">breadth </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">.</span><span class=\"pln\">breadth</span><span class=\"pun\">;</span><span class=\"pln\">\n         box</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">-&gt;</span><span class=\"pln\">height </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">.</span><span class=\"pln\">height</span><span class=\"pun\">;</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> box</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">private</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> length</span><span class=\"pun\">;</span><span class=\"pln\">      </span><span class=\"com\">// Length of a box</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> breadth</span><span class=\"pun\">;</span><span class=\"pln\">     </span><span class=\"com\">// Breadth of a box</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">      </span><span class=\"com\">// Height of a box</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Main function for the program</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">;</span><span class=\"pln\">                </span><span class=\"com\">// Declare Box1 of type Box</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">;</span><span class=\"pln\">                </span><span class=\"com\">// Declare Box2 of type Box</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box3</span><span class=\"pun\">;</span><span class=\"pln\">                </span><span class=\"com\">// Declare Box3 of type Box</span><span class=\"pln\">\n   </span><span class=\"kwd\">double</span><span class=\"pln\"> volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0.0</span><span class=\"pun\">;</span><span class=\"pln\">     </span><span class=\"com\">// Store the volume of a box here</span><span class=\"pln\">\n \n   </span><span class=\"com\">// box 1 specification</span><span class=\"pln\">\n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">setLength</span><span class=\"pun\">(</span><span class=\"lit\">6.0</span><span class=\"pun\">);</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">setBreadth</span><span class=\"pun\">(</span><span class=\"lit\">7.0</span><span class=\"pun\">);</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">5.0</span><span class=\"pun\">);</span><span class=\"pln\">\n \n   </span><span class=\"com\">// box 2 specification</span><span class=\"pln\">\n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">setLength</span><span class=\"pun\">(</span><span class=\"lit\">12.0</span><span class=\"pun\">);</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">setBreadth</span><span class=\"pun\">(</span><span class=\"lit\">13.0</span><span class=\"pun\">);</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">10.0</span><span class=\"pun\">);</span><span class=\"pln\">\n \n   </span><span class=\"com\">// volume of box 1</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">getVolume</span><span class=\"pun\">();</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box1 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// volume of box 2</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">getVolume</span><span class=\"pun\">();</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box2 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Add two object as follows:</span><span class=\"pln\">\n   </span><span class=\"typ\">Box3</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// volume of box 3</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box3</span><span class=\"pun\">.</span><span class=\"pln\">getVolume</span><span class=\"pun\">();</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box3 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nVolume of Box1 : 210\nVolume of Box2 : 1560\nVolume of Box3 : 5400\n</pre>\n\n<h2>Overloadable/Non-overloadableOperators</h2>\n\n<p>Following is the list of operators which can be overloaded &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td width=\"16.6%\">+</td>\n\t\t\t<td width=\"16.6%\">-</td>\n\t\t\t<td width=\"16.6%\">*</td>\n\t\t\t<td width=\"16.6%\">/</td>\n\t\t\t<td width=\"16.6%\">%</td>\n\t\t\t<td width=\"16.6%\">^</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&amp;</td>\n\t\t\t<td>|</td>\n\t\t\t<td>~</td>\n\t\t\t<td>!</td>\n\t\t\t<td>,</td>\n\t\t\t<td>=</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&lt;</td>\n\t\t\t<td>&gt;</td>\n\t\t\t<td>&lt;=</td>\n\t\t\t<td>&gt;=</td>\n\t\t\t<td>++</td>\n\t\t\t<td>--</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&lt;&lt;</td>\n\t\t\t<td>&gt;&gt;</td>\n\t\t\t<td>==</td>\n\t\t\t<td>!=</td>\n\t\t\t<td>&amp;&amp;</td>\n\t\t\t<td>||</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>+=</td>\n\t\t\t<td>-=</td>\n\t\t\t<td>/=</td>\n\t\t\t<td>%=</td>\n\t\t\t<td>^=</td>\n\t\t\t<td>&amp;=</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>|=</td>\n\t\t\t<td>*=</td>\n\t\t\t<td>&lt;&lt;=</td>\n\t\t\t<td>&gt;&gt;=</td>\n\t\t\t<td>[]</td>\n\t\t\t<td>()</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>-&gt;</td>\n\t\t\t<td>-&gt;*</td>\n\t\t\t<td>new</td>\n\t\t\t<td>new []</td>\n\t\t\t<td>delete</td>\n\t\t\t<td>delete []</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Following is the list of operators, which can not be overloaded &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td width=\"25%\">::</td>\n\t\t\t<td width=\"25%\">.*</td>\n\t\t\t<td width=\"25%\">.</td>\n\t\t\t<td width=\"25%\">?:</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2 id=\"examples\">Operator Overloading Examples</h2>\n\n<p>Here are various operator overloading examples to help you in understanding the concept.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\">Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Operators &amp; Example</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/unary_operators_overloading.htm\">Unary Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/binary_operators_overloading.htm\">Binary Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/relational_operators_overloading.htm\">Relational Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">4</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/input_output_operators_overloading.htm\">Input/Output Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">5</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/increment_decrement_operators_overloading.htm\">++ and -- Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">6</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/assignment_operators_overloading.htm\">Assignment Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">7</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/function_call_operator_overloading.htm\">Function call () Operator Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">8</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/subscripting_operator_overloading.htm\">Subscripting [] Operator Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">9</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/class_member_access_operator_overloading.htm\">Class Member Access Operator -&gt; Overloading</a></td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },
        {
          "tag_line": "Polymorphism in C++",
        
          "details": [
            "<h1>Polymorphism in C++</h1>\n\n<p>The word <b>polymorphism</b> means having many forms. Typically, polymorphism occurs when there is a hierarchy of classes and they are related by inheritance.</p>\n\n<p>C++ polymorphism means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.</p>\n\n<p>Consider the following example where a base class has been derived by other two classes &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/LSyBTc\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\"> \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">protected</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> width</span><span class=\"pun\">,</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"typ\">Shape</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">){</span><span class=\"pln\">\n         width </span><span class=\"pun\">=</span><span class=\"pln\"> a</span><span class=\"pun\">;</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Parent class area :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rectangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"typ\">Rectangle</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">):</span><span class=\"typ\">Shape</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"kwd\">int</span><span class=\"pln\"> area </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Rectangle class area :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Triangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"typ\">Triangle</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">):</span><span class=\"typ\">Shape</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"kwd\">int</span><span class=\"pln\"> area </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Triangle class area :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height </span><span class=\"pun\">/</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Main function for the program</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\">shape</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"typ\">Rectangle</span><span class=\"pln\"> rec</span><span class=\"pun\">(</span><span class=\"lit\">10</span><span class=\"pun\">,</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Triangle</span><span class=\"pln\">  tri</span><span class=\"pun\">(</span><span class=\"lit\">10</span><span class=\"pun\">,</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"com\">// store the address of Rectangle</span><span class=\"pln\">\n   shape </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"pln\">rec</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// call rectangle area.</span><span class=\"pln\">\n   shape</span><span class=\"pun\">-&gt;</span><span class=\"pln\">area</span><span class=\"pun\">();</span><span class=\"pln\">\n\n   </span><span class=\"com\">// store the address of Triangle</span><span class=\"pln\">\n   shape </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"pln\">tri</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// call triangle area.</span><span class=\"pln\">\n   shape</span><span class=\"pun\">-&gt;</span><span class=\"pln\">area</span><span class=\"pun\">();</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nParent class area :\nParent class area :\n</pre>\n\n<p>The reason for the incorrect output is that the call of the function area() is being set once by the compiler as the version defined in the base class. This is called <b>static resolution</b> of the function call, or <b>static linkage</b> - the function call is fixed before the program is executed. This is also sometimes called <b>early binding</b> because the area() function is set during the compilation of the program.</p>\n\n<p>But now, let&#39;s make a slight modification in our program and precede the declaration of area() in the Shape class with the keyword <b>virtual</b> so that it looks like this &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Shape {\n   protected:\n      int width, height;\n      \n   public:\n      Shape( int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      virtual int area() {\n         cout &lt;&lt; &quot;Parent class area :&quot; &lt;&lt;endl;\n         return 0;\n      }\n};\n</pre>\n\n<p>After this slight modification, when the previous example code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nRectangle class area\nTriangle class area\n</pre>\n\n<p>This time, the compiler looks at the contents of the pointer instead of it&#39;s type. Hence, since addresses of objects of tri and rec classes are stored in *shape the respective area() function is called.</p>\n\n<p>As you can see, each of the child classes has a separate implementation for the function area(). This is how <b>polymorphism</b> is generally used. You have different classes with a function of the same name, and even the same parameters, but with different implementations.</p>\n\n<h2>Virtual Function</h2>\n\n<p>A <b>virtual</b> function is a function in a base class that is declared using the keyword <b>virtual</b>. Defining in a base class a virtual function, with another version in a derived class, signals to the compiler that we don&#39;t want static linkage for this function.</p>\n\n<p>What we do want is the selection of the function to be called at any given point in the program to be based on the kind of object for which it is called. This sort of operation is referred to as <b>dynamic linkage</b>, or <b>late binding</b>.</p>\n\n<h2>Pure Virtual Functions</h2>\n\n<p>It is possible that you want to include a virtual function in a base class so that it may be redefined in a derived class to suit the objects of that class, but that there is no meaningful definition you could give for the function in the base class.</p>\n\n<p>We can change the virtual function area() in the base class to the following &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Shape {\n   protected:\n      int width, height;\n\n   public:\n      Shape(int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      \n      // pure virtual function\n      virtual int area() = 0;\n};\n</pre>\n\n<p>The = 0 tells the compiler that the function has no body and above virtual function will be called <b>pure virtual function</b>.</p>\n\n<hr />"
          ]
        },
        {
          "tag_line": "Data Abstraction in C++",
        
          "details": [
            "<h2>Data Abstraction in C++</h2>\n\n<p>Data abstraction refers to providing only essential information to the outside world and hiding their background details, i.e., to represent the needed information in program without presenting the details.</p>\n\n<p>Data abstraction is a programming (and design) technique that relies on the separation of interface and implementation.</p>\n\n<p>Let&#39;s take one real life example of a TV, which you can turn on and off, change the channel, adjust the volume, and add external components such as speakers, VCRs, and DVD players, BUT you do not know its internal details, that is, you do not know how it receives signals over the air or through a cable, how it translates them, and finally displays them on the screen.</p>\n\n<p>Thus, we can say a television clearly separates its internal implementation from its external interface and you can play with its interfaces like the power button, channel changer, and volume control without having any knowledge of its internals.</p>\n\n<p>In C++, classes provides great level of <b>data abstraction</b>. They provide sufficient public methods to the outside world to play with the functionality of the object and to manipulate object data, i.e., state without actually knowing how class has been implemented internally.</p>\n\n<p>For example, your program can make a call to the <b>sort()</b> function without knowing what algorithm the function actually uses to sort the given values. In fact, the underlying implementation of the sorting functionality could change between releases of the library, and as long as the interface stays the same, your function call will still work.</p>\n\n<p>In C++, we use <b>classes</b> to define our own abstract data types (ADT). You can use the <b>cout</b> object of class <b>ostream</b> to stream data to standard output like this &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/iaAqF8\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello C++&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>Here, you don&#39;t need to understand how <b>cout</b> displays the text on the user&#39;s screen. You need to only know the public interface and the underlying implementation of &lsquo;cout&rsquo; is free to change.</p>\n\n<h2>Access Labels Enforce Abstraction</h2>\n\n<p>In C++, we use access labels to define the abstract interface to the class. A class may contain zero or more access labels &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Members defined with a public label are accessible to all parts of the program. The data-abstraction view of a type is defined by its public members.</p>\n\t</li>\n\t<li>\n\t<p>Members defined with a private label are not accessible to code that uses the class. The private sections hide the implementation from code that uses the type.</p>\n\t</li>\n</ul>\n\n<p>There are no restrictions on how often an access label may appear. Each access label specifies the access level of the succeeding member definitions. The specified access level remains in effect until the next access label is encountered or the closing right brace of the class body is seen.</p>\n\n<h2>Benefits of Data Abstraction</h2>\n\n<p>Data abstraction provides two important advantages &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Class internals are protected from inadvertent user-level errors, which might corrupt the state of the object.</p>\n\t</li>\n\t<li>\n\t<p>The class implementation may evolve over time in response to changing requirements or bug reports without requiring change in user-level code.</p>\n\t</li>\n</ul>\n\n<p>By defining data members only in the private section of the class, the class author is free to make changes in the data. If the implementation changes, only the class code needs to be examined to see what affect the change may have. If data is public, then any function that directly access the data members of the old representation might be broken.</p>\n\n<h2>Data Abstraction Example</h2>\n\n<p>Any C++ program where you implement a class with public and private members is an example of data abstraction. Consider the following example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/Dm4Yt3\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Adder</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// constructor</span><span class=\"pln\">\n      </span><span class=\"typ\">Adder</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         total </span><span class=\"pun\">=</span><span class=\"pln\"> i</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// interface to outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> addNum</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> number</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         total </span><span class=\"pun\">+=</span><span class=\"pln\"> number</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// interface to outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getTotal</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> total</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">};</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">private</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// hidden data from outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> total</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Adder</span><span class=\"pln\"> a</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">10</span><span class=\"pun\">);</span><span class=\"pln\">\n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">);</span><span class=\"pln\">\n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">30</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> a</span><span class=\"pun\">.</span><span class=\"pln\">getTotal</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal 60\n</pre>\n\n<p>Above class adds numbers together, and returns the sum. The public members - <b>addNum</b> and <b>getTotal</b> are the interfaces to the outside world and a user needs to know them to use the class. The private member <b>total</b> is something that the user doesn&#39;t need to know about, but is needed for the class to operate properly.</p>\n\n<h2>Designing Strategy</h2>\n\n<p>Abstraction separates code into interface and implementation. So while designing your component, you must keep interface independent of the implementation so that if you change underlying implementation then interface would remain intact.</p>\n\n<p>In this case whatever programs are using these interfaces, they would not be impacted and would just need a recompilation with the latest implementation.</p>\n"
          ]
        },
        {
          "tag_line": "Data Encapsulation in C++",
        
          "details": [
            "<h2>Data Encapsulation in C++</h2>\n\n<p>All C++ programs are composed of the following two fundamental elements &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Program statements (code)</b> &minus; This is the part of a program that performs actions and they are called functions.</p>\n\t</li>\n\t<li>\n\t<p><b>Program data</b> &minus; The data is the information of the program which gets affected by the program functions.</p>\n\t</li>\n</ul>\n\n<p>Encapsulation is an Object Oriented Programming concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse. Data encapsulation led to the important OOP concept of <b>data hiding</b>.</p>\n\n<p><b>Data encapsulation</b> is a mechanism of bundling the data, and the functions that use them and <b>data abstraction</b> is a mechanism of exposing only the interfaces and hiding the implementation details from the user.</p>\n\n<p>C++ supports the properties of encapsulation and data hiding through the creation of user-defined types, called <b>classes</b>. We already have studied that a class can contain <b>private, protected </b> and <b>public</b> members. By default, all items defined in a class are private. For example &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n\n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n</pre>\n\n<p>The variables length, breadth, and height are <b>private</b>. This means that they can be accessed only by other members of the Box class, and not by any other part of your program. This is one way encapsulation is achieved.</p>\n\n<p>To make parts of a class <b>public</b> (i.e., accessible to other parts of your program), you must declare them after the <b>public</b> keyword. All variables or functions defined after the public specifier are accessible by all other functions in your program.</p>\n\n<p>Making one class a friend of another exposes the implementation details and reduces encapsulation. The ideal is to keep as many of the details of each class hidden from all other classes as possible.</p>\n\n<h2>Data Encapsulation Example</h2>\n\n<p>Any C++ program where you implement a class with public and private members is an example of data encapsulation and data abstraction. Consider the following example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/lZz6R0\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Adder</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// constructor</span><span class=\"pln\">\n      </span><span class=\"typ\">Adder</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         total </span><span class=\"pun\">=</span><span class=\"pln\"> i</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// interface to outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> addNum</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> number</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         total </span><span class=\"pun\">+=</span><span class=\"pln\"> number</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// interface to outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getTotal</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> total</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">};</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">private</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// hidden data from outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> total</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Adder</span><span class=\"pln\"> a</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">10</span><span class=\"pun\">);</span><span class=\"pln\">\n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">);</span><span class=\"pln\">\n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">30</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> a</span><span class=\"pun\">.</span><span class=\"pln\">getTotal</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal 60\n</pre>\n\n<p>Above class adds numbers together, and returns the sum. The public members <b>addNum</b> and <b>getTotal </b> are the interfaces to the outside world and a user needs to know them to use the class. The private member <b>total</b> is something that is hidden from the outside world, but is needed for the class to operate properly.</p>\n\n<h2>Designing Strategy</h2>\n\n<p>Most of us have learnt to make class members private by default unless we really need to expose them. That&#39;s just good <b>encapsulation</b>.</p>\n\n<p>This is applied most frequently to data members, but it applies equally to all members, including virtual functions.</p>\n"
          ]
        },
        {
          "tag_line": "Interfaces in C++ (Abstract Classes)",
        
          "details": [
            "<h2>Interfaces in C++ (Abstract Classes)</h2>\n\n<p>An interface describes the behavior or capabilities of a C++ class without committing to a particular implementation of that class.</p>\n\n<p>The C++ interfaces are implemented using <b>abstract classes</b> and these abstract classes should not be confused with data abstraction which is a concept of keeping implementation details separate from associated data.</p>\n\n<p>A class is made abstract by declaring at least one of its functions as <b>pure virtual</b> function. A pure virtual function is specified by placing &quot;= 0&quot; in its declaration as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      // pure virtual function\n      virtual double getVolume() = 0;\n      \n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n</pre>\n\n<p>The purpose of an <b>abstract class</b> (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit. Abstract classes cannot be used to instantiate objects and serves only as an <b>interface</b>. Attempting to instantiate an object of an abstract class causes a compilation error.</p>\n\n<p>Thus, if a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC. Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.</p>\n\n<p>Classes that can be used to instantiate objects are called <b>concrete classes</b>.</p>\n\n<h2>Abstract Class Example</h2>\n\n<p>Consider the following example where parent class provides an interface to the base class to implement a function called <b>getArea()</b> &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/5qXjq1\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">// Base class</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// pure virtual function providing interface framework.</span><span class=\"pln\">\n      </span><span class=\"kwd\">virtual</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setWidth</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> w</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         width </span><span class=\"pun\">=</span><span class=\"pln\"> w</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n   \n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setHeight</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> h</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> h</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">protected</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> width</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n \n</span><span class=\"com\">// Derived classes</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rectangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Triangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">)/</span><span class=\"lit\">2</span><span class=\"pun\">;</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Rectangle</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"typ\">Triangle</span><span class=\"pln\">  </span><span class=\"typ\">Tri</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setWidth</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Print the area of the object.</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total Rectangle area: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"typ\">Tri</span><span class=\"pun\">.</span><span class=\"pln\">setWidth</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Tri</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Print the area of the object.</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total Triangle area: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Tri</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\"> \n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal Rectangle area: 35\nTotal Triangle area: 17\n</pre>\n\n<p>You can see how an abstract class defined an interface in terms of getArea() and two other classes implemented same function but with different algorithm to calculate the area specific to the shape.</p>\n\n<h2>Designing Strategy</h2>\n\n<p>An object-oriented system might use an abstract base class to provide a common and standardized interface appropriate for all the external applications. Then, through inheritance from that abstract base class, derived classes are formed that operate similarly.</p>\n\n<p>The capabilities (i.e., the public functions) offered by the external applications are provided as pure virtual functions in the abstract base class. The implementations of these pure virtual functions are provided in the derived classes that correspond to the specific types of the application.</p>\n\n<p>This architecture also allows new applications to be added to a system easily, even after the system has been defined.</p>\n"
          ]
        }
      ]
    },

    {
      "title": "Operating System",
      "content": [
        {
          "tag_line": "Operating System - Overview",
        
          "details": [
            "<h2>Operating System - Overview</h2>\n\n<p>An Operating System (OS) is an interface between a computer user and computer hardware. An operating system is a software which performs all the basic tasks like file management, memory management, process management, handling input and output, and controlling peripheral devices such as disk drives and printers.</p>\n\n<p>Some popular Operating Systems include Linux Operating System, Windows Operating System, VMS, OS/400, AIX, z/OS, etc.</p>\n\n<h2>Definition</h2>\n\n<p>An operating system is a program that acts as an interface between the user and the computer hardware and controls the execution of all kinds of programs.</p>\n\n<p><img alt=\"Conceptual view of an Operating System\" src=\"https://www.tutorialspoint.com/operating_system/images/conceptual_view.jpg\" /></p>\n\n<p>Following are some of important functions of an operating System.</p>\n\n<ul class=\"list\">\n\t<li>Memory Management</li>\n\t<li>Processor Management</li>\n\t<li>Device Management</li>\n\t<li>File Management</li>\n\t<li>Security</li>\n\t<li>Control over system performance</li>\n\t<li>Job accounting</li>\n\t<li>Error detecting aids</li>\n\t<li>Coordination between other software and users</li>\n</ul>\n\n<h2>Memory Management</h2>\n\n<p>Memory management refers to management of Primary Memory or Main Memory. Main memory is a large array of words or bytes where each word or byte has its own address.</p>\n\n<p>Main memory provides a fast storage that can be accessed directly by the CPU. For a program to be executed, it must in the main memory. An Operating System does the following activities for memory management &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Keeps tracks of primary memory, i.e., what part of it are in use by whom, what part are not in use.</p>\n\t</li>\n\t<li>\n\t<p>In multiprogramming, the OS decides which process will get memory when and how much.</p>\n\t</li>\n\t<li>\n\t<p>Allocates the memory when a process requests it to do so.</p>\n\t</li>\n\t<li>\n\t<p>De-allocates the memory when a process no longer needs it or has been terminated.</p>\n\t</li>\n</ul>\n\n<h2>Processor Management</h2>\n\n<p>In multiprogramming environment, the OS decides which process gets the processor when and for how much time. This function is called <b>process scheduling</b>. An Operating System does the following activities for processor management &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Keeps tracks of processor and status of process. The program responsible for this task is known as <b>traffic controller</b>.</p>\n\t</li>\n\t<li>\n\t<p>Allocates the processor (CPU) to a process.</p>\n\t</li>\n\t<li>\n\t<p>De-allocates processor when a process is no longer required.</p>\n\t</li>\n</ul>\n\n<h2>Device Management</h2>\n\n<p>An Operating System manages device communication via their respective drivers. It does the following activities for device management &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Keeps tracks of all devices. Program responsible for this task is known as the <b>I/O controller</b>.</p>\n\t</li>\n\t<li>\n\t<p>Decides which process gets the device when and for how much time.</p>\n\t</li>\n\t<li>\n\t<p>Allocates the device in the efficient way.</p>\n\t</li>\n\t<li>\n\t<p>De-allocates devices.</p>\n\t</li>\n</ul>\n\n<h2>File Management</h2>\n\n<p>A file system is normally organized into directories for easy navigation and usage. These directories may contain files and other directions.</p>\n\n<p>An Operating System does the following activities for file management &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Keeps track of information, location, uses, status etc. The collective facilities are often known as <b>file system</b>.</p>\n\t</li>\n\t<li>\n\t<p>Decides who gets the resources.</p>\n\t</li>\n\t<li>\n\t<p>Allocates the resources.</p>\n\t</li>\n\t<li>\n\t<p>De-allocates the resources.</p>\n\t</li>\n</ul>\n\n<h2>Other Important Activities</h2>\n\n<p>Following are some of the important activities that an Operating System performs &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Security</b> &minus; By means of password and similar other techniques, it prevents unauthorized access to programs and data.</p>\n\t</li>\n\t<li>\n\t<p><b>Control over system performance</b> &minus; Recording delays between request for a service and response from the system.</p>\n\t</li>\n\t<li>\n\t<p><b>Job accounting</b> &minus; Keeping track of time and resources used by various jobs and users.</p>\n\t</li>\n\t<li>\n\t<p><b>Error detecting aids</b> &minus; Production of dumps, traces, error messages, and other debugging and error detecting aids.</p>\n\t</li>\n\t<li>\n\t<p><b>Coordination between other softwares and users</b> &minus; Coordination and assignment of compilers, interpreters, assemblers and other software to the various users of the computer systems.</p>\n\t</li>\n</ul>\n"
          ]
        },
        {
          "tag_line": "Types of Operating System",
        
          "details": [
            "<h2>Types of Operating System</h2>\n\n<p>Operating systems are there from the very first computer generation and they keep evolving with time. In this chapter, we will discuss some of the important types of operating systems which are most commonly used.</p>\n\n<h2>Batch operating system</h2>\n\n<p>The users of a batch operating system do not interact with the computer directly. Each user prepares his job on an off-line device like punch cards and submits it to the computer operator. To speed up processing, jobs with similar needs are batched together and run as a group. The programmers leave their programs with the operator and the operator then sorts the programs with similar requirements into batches.</p>\n\n<p>The problems with Batch Systems are as follows &minus;</p>\n\n<ul class=\"list\">\n\t<li>Lack of interaction between the user and the job.</li>\n\t<li>CPU is often idle, because the speed of the mechanical I/O devices is slower than the CPU.</li>\n\t<li>Difficult to provide the desired priority.</li>\n</ul>\n\n<h2>Time-sharing operating systems</h2>\n\n<p>Time-sharing is a technique which enables many people, located at various terminals, to use a particular computer system at the same time. Time-sharing or multitasking is a logical extension of multiprogramming. Processor&#39;s time which is shared among multiple users simultaneously is termed as time-sharing.</p>\n\n<p>The main difference between Multiprogrammed Batch Systems and Time-Sharing Systems is that in case of Multiprogrammed batch systems, the objective is to maximize processor use, whereas in Time-Sharing Systems, the objective is to minimize response time.</p>\n\n<p>Multiple jobs are executed by the CPU by switching between them, but the switches occur so frequently. Thus, the user can receive an immediate response. For example, in a transaction processing, the processor executes each user program in a short burst or quantum of computation. That is, if <b>n</b> users are present, then each user can get a time quantum. When the user submits the command, the response time is in few seconds at most.</p>\n\n<p>The operating system uses CPU scheduling and multiprogramming to provide each user with a small portion of a time. Computer systems that were designed primarily as batch systems have been modified to time-sharing systems.</p>\n\n<p>Advantages of Timesharing operating systems are as follows &minus;</p>\n\n<ul class=\"list\">\n\t<li>Provides the advantage of quick response.</li>\n\t<li>Avoids duplication of software.</li>\n\t<li>Reduces CPU idle time.</li>\n</ul>\n\n<p>Disadvantages of Time-sharing operating systems are as follows &minus;</p>\n\n<ul class=\"list\">\n\t<li>Problem of reliability.</li>\n\t<li>Question of security and integrity of user programs and data.</li>\n\t<li>Problem of data communication.</li>\n</ul>\n\n<h2>Distributed operating System</h2>\n\n<p>Distributed systems use multiple central processors to serve multiple real-time applications and multiple users. Data processing jobs are distributed among the processors accordingly.</p>\n\n<p>The processors communicate with one another through various communication lines (such as high-speed buses or telephone lines). These are referred as <b>loosely coupled systems</b> or distributed systems. Processors in a distributed system may vary in size and function. These processors are referred as sites, nodes, computers, and so on.</p>\n\n<p>The advantages of distributed systems are as follows &minus;</p>\n\n<ul class=\"list\">\n\t<li>With resource sharing facility, a user at one site may be able to use the resources available at another.</li>\n\t<li>Speedup the exchange of data with one another via electronic mail.</li>\n\t<li>If one site fails in a distributed system, the remaining sites can potentially continue operating.</li>\n\t<li>Better service to the customers.</li>\n\t<li>Reduction of the load on the host computer.</li>\n\t<li>Reduction of delays in data processing.</li>\n</ul>\n\n<h2>Network operating System</h2>\n\n<p>A Network Operating System runs on a server and provides the server the capability to manage data, users, groups, security, applications, and other networking functions. The primary purpose of the network operating system is to allow shared file and printer access among multiple computers in a network, typically a local area network (LAN), a private network or to other networks.</p>\n\n<p>Examples of network operating systems include Microsoft Windows Server 2003, Microsoft Windows Server 2008, UNIX, Linux, Mac OS X, Novell NetWare, and BSD.</p>\n\n<p>The advantages of network operating systems are as follows &minus;</p>\n\n<ul class=\"list\">\n\t<li>Centralized servers are highly stable.</li>\n\t<li>Security is server managed.</li>\n\t<li>Upgrades to new technologies and hardware can be easily integrated into the system.</li>\n\t<li>Remote access to servers is possible from different locations and types of systems.</li>\n</ul>\n\n<p>The disadvantages of network operating systems are as follows &minus;</p>\n\n<ul class=\"list\">\n\t<li>High cost of buying and running a server.</li>\n\t<li>Dependency on a central location for most operations.</li>\n\t<li>Regular maintenance and updates are required.</li>\n</ul>\n\n<h2>Real Time operating System</h2>\n\n<p>A real-time system is defined as a data processing system in which the time interval required to process and respond to inputs is so small that it controls the environment. The time taken by the system to respond to an input and display of required updated information is termed as the <b>response time</b>. So in this method, the response time is very less as compared to online processing.</p>\n\n<p>Real-time systems are used when there are rigid time requirements on the operation of a processor or the flow of data and real-time systems can be used as a control device in a dedicated application. A real-time operating system must have well-defined, fixed time constraints, otherwise the system will fail. For example, Scientific experiments, medical imaging systems, industrial control systems, weapon systems, robots, air traffic control systems, etc.</p>\n\n<p>There are two types of real-time operating systems.</p>\n\n<h3>Hard real-time systems</h3>\n\n<p>Hard real-time systems guarantee that critical tasks complete on time. In hard real-time systems, secondary storage is limited or missing and the data is stored in ROM. In these systems, virtual memory is almost never found.</p>\n\n<h3>Soft real-time systems</h3>\n\n<p>Soft real-time systems are less restrictive. A critical real-time task gets priority over other tasks and retains the priority until it completes. Soft real-time systems have limited utility than hard real-time systems. For example, multimedia, virtual reality, Advanced Scientific Projects like undersea exploration and planetary rovers, etc.</p>\n"
          ]
        },
        {
          "tag_line": "Operating System - Services",
        
          "details": [
            "<h2>Operating System - Services</h2>\n\n<p>An Operating System provides services to both the users and to the programs.</p>\n\n<ul class=\"list\">\n\t<li>It provides programs an environment to execute.</li>\n\t<li>It provides users the services to execute the programs in a convenient manner.</li>\n</ul>\n\n<p>Following are a few common services provided by an operating system &minus;</p>\n\n<ul class=\"list\">\n\t<li>Program execution</li>\n\t<li>I/O operations</li>\n\t<li>File System manipulation</li>\n\t<li>Communication</li>\n\t<li>Error Detection</li>\n\t<li>Resource Allocation</li>\n\t<li>Protection</li>\n</ul>\n\n<h2>Program execution</h2>\n\n<p>Operating systems handle many kinds of activities from user programs to system programs like printer spooler, name servers, file server, etc. Each of these activities is encapsulated as a process.</p>\n\n<p>A process includes the complete execution context (code to execute, data to manipulate, registers, OS resources in use). Following are the major activities of an operating system with respect to program management &minus;</p>\n\n<ul class=\"list\">\n\t<li>Loads a program into memory.</li>\n\t<li>Executes the program.</li>\n\t<li>Handles program&#39;s execution.</li>\n\t<li>Provides a mechanism for process synchronization.</li>\n\t<li>Provides a mechanism for process communication.</li>\n\t<li>Provides a mechanism for deadlock handling.</li>\n</ul>\n\n<h2>I/O Operation</h2>\n\n<p>An I/O subsystem comprises of I/O devices and their corresponding driver software. Drivers hide the peculiarities of specific hardware devices from the users.</p>\n\n<p>An Operating System manages the communication between user and device drivers.</p>\n\n<ul class=\"list\">\n\t<li>I/O operation means read or write operation with any file or any specific I/O device.</li>\n\t<li>Operating system provides the access to the required I/O device when required.</li>\n</ul>\n\n<h2>File system manipulation</h2>\n\n<p>A file represents a collection of related information. Computers can store files on the disk (secondary storage), for long-term storage purpose. Examples of storage media include magnetic tape, magnetic disk and optical disk drives like CD, DVD. Each of these media has its own properties like speed, capacity, data transfer rate and data access methods.</p>\n\n<p>A file system is normally organized into directories for easy navigation and usage. These directories may contain files and other directions. Following are the major activities of an operating system with respect to file management &minus;</p>\n\n<ul class=\"list\">\n\t<li>Program needs to read a file or write a file.</li>\n\t<li>The operating system gives the permission to the program for operation on file.</li>\n\t<li>Permission varies from read-only, read-write, denied and so on.</li>\n\t<li>Operating System provides an interface to the user to create/delete files.</li>\n\t<li>Operating System provides an interface to the user to create/delete directories.</li>\n\t<li>Operating System provides an interface to create the backup of file system.</li>\n</ul>\n\n<h2>Communication</h2>\n\n<p>In case of distributed systems which are a collection of processors that do not share memory, peripheral devices, or a clock, the operating system manages communications between all the processes. Multiple processes communicate with one another through communication lines in the network.</p>\n\n<p>The OS handles routing and connection strategies, and the problems of contention and security. Following are the major activities of an operating system with respect to communication &minus;</p>\n\n<ul class=\"list\">\n\t<li>Two processes often require data to be transferred between them</li>\n\t<li>Both the processes can be on one computer or on different computers, but are connected through a computer network.</li>\n\t<li>Communication may be implemented by two methods, either by Shared Memory or by Message Passing.</li>\n</ul>\n\n<h2>Error handling</h2>\n\n<p>Errors can occur anytime and anywhere. An error may occur in CPU, in I/O devices or in the memory hardware. Following are the major activities of an operating system with respect to error handling &minus;</p>\n\n<ul class=\"list\">\n\t<li>The OS constantly checks for possible errors.</li>\n\t<li>The OS takes an appropriate action to ensure correct and consistent computing.</li>\n</ul>\n\n<h2>Resource Management</h2>\n\n<p>In case of multi-user or multi-tasking environment, resources such as main memory, CPU cycles and files storage are to be allocated to each user or job. Following are the major activities of an operating system with respect to resource management &minus;</p>\n\n<ul class=\"list\">\n\t<li>The OS manages all kinds of resources using schedulers.</li>\n\t<li>CPU scheduling algorithms are used for better utilization of CPU.</li>\n</ul>\n\n<h2>Protection</h2>\n\n<p>Considering a computer system having multiple users and concurrent execution of multiple processes, the various processes must be protected from each other&#39;s activities.</p>\n\n<p>Protection refers to a mechanism or a way to control the access of programs, processes, or users to the resources defined by a computer system. Following are the major activities of an operating system with respect to protection &minus;</p>\n\n<ul class=\"list\">\n\t<li>The OS ensures that all access to system resources is controlled.</li>\n\t<li>The OS ensures that external I/O devices are protected from invalid access attempts.</li>\n\t<li>The OS provides authentication features for each user by means of passwords.</li>\n</ul>\n"
          ]
        },
        {
          "tag_line": "Operating System - Properties",
        
          "details": [
            "<h2>Operating System - Properties</h2>\n\n<h2>Batch processing</h2>\n\n<p>Batch processing is a technique in which an Operating System collects the programs and data together in a batch before processing starts. An operating system does the following activities related to batch processing &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The OS defines a job which has predefined sequence of commands, programs and data as a single unit.</p>\n\t</li>\n\t<li>\n\t<p>The OS keeps a number a jobs in memory and executes them without any manual information.</p>\n\t</li>\n\t<li>\n\t<p>Jobs are processed in the order of submission, i.e., first come first served fashion.</p>\n\t</li>\n\t<li>\n\t<p>When a job completes its execution, its memory is released and the output for the job gets copied into an output spool for later printing or processing.</p>\n\t</li>\n</ul>\n\n<p><img alt=\"Batch Processing\" src=\"https://www.tutorialspoint.com/operating_system/images/batch_processing.jpg\" /></p>\n\n<h3>Advantages</h3>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Batch processing takes much of the work of the operator to the computer.</p>\n\t</li>\n\t<li>\n\t<p>Increased performance as a new job get started as soon as the previous job is finished, without any manual intervention.</p>\n\t</li>\n</ul>\n\n<h3>Disadvantages</h3>\n\n<ul class=\"list\">\n\t<li>Difficult to debug program.</li>\n\t<li>A job could enter an infinite loop.</li>\n\t<li>Due to lack of protection scheme, one batch job can affect pending jobs.</li>\n</ul>\n\n<h2>Multitasking</h2>\n\n<p>Multitasking is when multiple jobs are executed by the CPU simultaneously by switching between them. Switches occur so frequently that the users may interact with each program while it is running. An OS does the following activities related to multitasking &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The user gives instructions to the operating system or to a program directly, and receives an immediate response.</p>\n\t</li>\n\t<li>\n\t<p>The OS handles multitasking in the way that it can handle multiple operations/executes multiple programs at a time.</p>\n\t</li>\n\t<li>\n\t<p>Multitasking Operating Systems are also known as Time-sharing systems.</p>\n\t</li>\n\t<li>\n\t<p>These Operating Systems were developed to provide interactive use of a computer system at a reasonable cost.</p>\n\t</li>\n\t<li>\n\t<p>A time-shared operating system uses the concept of CPU scheduling and multiprogramming to provide each user with a small portion of a time-shared CPU.</p>\n\t</li>\n\t<li>\n\t<p>Each user has at least one separate program in memory.</p>\n\t</li>\n</ul>\n\n<p><img alt=\"Multitasking\" src=\"https://www.tutorialspoint.com/operating_system/images/multitasking.jpg\" /></p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>A program that is loaded into memory and is executing is commonly referred to as a <b>process</b>.</p>\n\t</li>\n\t<li>\n\t<p>When a process executes, it typically executes for only a very short time before it either finishes or needs to perform I/O.</p>\n\t</li>\n\t<li>\n\t<p>Since interactive I/O typically runs at slower speeds, it may take a long time to complete. During this time, a CPU can be utilized by another process.</p>\n\t</li>\n\t<li>\n\t<p>The operating system allows the users to share the computer simultaneously. Since each action or command in a time-shared system tends to be short, only a little CPU time is needed for each user.</p>\n\t</li>\n\t<li>\n\t<p>As the system switches CPU rapidly from one user/program to the next, each user is given the impression that he/she has his/her own CPU, whereas actually one CPU is being shared among many users.</p>\n\t</li>\n</ul>\n\n<h2>Multiprogramming</h2>\n\n<p>Sharing the processor, when two or more programs reside in memory at the same time, is referred as <b> multiprogramming</b>. Multiprogramming assumes a single shared processor. Multiprogramming increases CPU utilization by organizing jobs so that the CPU always has one to execute.</p>\n\n<p>The following figure shows the memory layout for a multiprogramming system.</p>\n\n<p><img alt=\"Memory layout\" src=\"https://www.tutorialspoint.com/operating_system/images/memory_layout.jpg\" /></p>\n\n<p>An OS does the following activities related to multiprogramming.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The operating system keeps several jobs in memory at a time.</p>\n\t</li>\n\t<li>\n\t<p>This set of jobs is a subset of the jobs kept in the job pool.</p>\n\t</li>\n\t<li>\n\t<p>The operating system picks and begins to execute one of the jobs in the memory.</p>\n\t</li>\n\t<li>\n\t<p>Multiprogramming operating systems monitor the state of all active programs and system resources using memory management programs to ensures that the CPU is never idle, unless there are no jobs to process.</p>\n\t</li>\n</ul>\n\n<h3>Advantages</h3>\n\n<ul class=\"list\">\n\t<li>High and efficient CPU utilization.</li>\n\t<li>User feels that many programs are allotted CPU almost simultaneously.</li>\n</ul>\n\n<h3>Disadvantages</h3>\n\n<ul class=\"list\">\n\t<li>CPU scheduling is required.</li>\n\t<li>To accommodate many jobs in memory, memory management is required.</li>\n</ul>\n\n<h2>Interactivity</h2>\n\n<p>Interactivity refers to the ability of users to interact with a computer system. An Operating system does the following activities related to interactivity &minus;</p>\n\n<ul class=\"list\">\n\t<li>Provides the user an interface to interact with the system.</li>\n\t<li>Manages input devices to take inputs from the user. For example, keyboard.</li>\n\t<li>Manages output devices to show outputs to the user. For example, Monitor.</li>\n</ul>\n\n<p>The response time of the OS needs to be short, since the user submits and waits for the result.</p>\n\n<h2>Real Time System</h2>\n\n<p>Real-time systems are usually dedicated, embedded systems. An operating system does the following activities related to real-time system activity.</p>\n\n<ul class=\"list\">\n\t<li>In such systems, Operating Systems typically read from and react to sensor data.</li>\n\t<li>The Operating system must guarantee response to events within fixed periods of time to ensure correct performance.</li>\n</ul>\n\n<h2>Distributed Environment</h2>\n\n<p>A distributed environment refers to multiple independent CPUs or processors in a computer system. An operating system does the following activities related to distributed environment &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The OS distributes computation logics among several physical processors.</p>\n\t</li>\n\t<li>\n\t<p>The processors do not share memory or a clock. Instead, each processor has its own local memory.</p>\n\t</li>\n\t<li>\n\t<p>The OS manages the communications between the processors. They communicate with each other through various communication lines.</p>\n\t</li>\n</ul>\n\n<h2>Spooling</h2>\n\n<p>Spooling is an acronym for simultaneous peripheral operations on line. Spooling refers to putting data of various I/O jobs in a buffer. This buffer is a special area in memory or hard disk which is accessible to I/O devices.</p>\n\n<p>An operating system does the following activities related to distributed environment &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Handles I/O device data spooling as devices have different data access rates.</p>\n\t</li>\n\t<li>\n\t<p>Maintains the spooling buffer which provides a waiting station where data can rest while the slower device catches up.</p>\n\t</li>\n\t<li>\n\t<p>Maintains parallel computation because of spooling process as a computer can perform I/O in parallel fashion. It becomes possible to have the computer read data from a tape, write data to disk and to write out to a tape printer while it is doing its computing task.</p>\n\t</li>\n</ul>\n\n<p><img alt=\"Spooling\" src=\"https://www.tutorialspoint.com/operating_system/images/spooling.jpg\" /></p>\n\n<h3>Advantages</h3>\n\n<ul class=\"list\">\n\t<li>The spooling operation uses a disk as a very large buffer.</li>\n\t<li>Spooling is capable of overlapping I/O operation for one job with processor operations for another job.</li>\n</ul>\n"
          ]
        },
        {
          "tag_line": "Operating System - Processes",
        
          "details": [
            "<h2>Operating System - Processes</h2>\n\n<h2>Process</h2>\n\n<p>A process is basically a program in execution. The execution of a process must progress in a sequential fashion.</p>\n\n<blockquote>A process is defined as an entity which represents the basic unit of work to be implemented in the system.</blockquote>\n\n<p>To put it in simple terms, we write our computer programs in a text file and when we execute this program, it becomes a process which performs all the tasks mentioned in the program.</p>\n\n<p>When a program is loaded into the memory and it becomes a process, it can be divided into four sections ─ stack, heap, text and data. The following image shows a simplified layout of a process inside main memory &minus;</p>\n\n<p><img alt=\"Process Components\" src=\"https://www.tutorialspoint.com/operating_system/images/process_components.jpg\" /></p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%;\">S.N.</th>\n\t\t\t<th style=\"text-align:center\">Component &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>\n\t\t\t<p><b>Stack</b></p>\n\n\t\t\t<p>The process Stack contains the temporary data such as method/function parameters, return address and local variables.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>\n\t\t\t<p><b>Heap</b></p>\n\n\t\t\t<p>This is dynamically allocated memory to a process during its run time.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>\n\t\t\t<p><b>Text</b></p>\n\n\t\t\t<p>This includes the current activity represented by the value of Program Counter and the contents of the processor&#39;s registers.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>\n\t\t\t<p><b>Data</b></p>\n\n\t\t\t<p>This section contains the global and static variables.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Program</h2>\n\n<p>A program is a piece of code which may be a single line or millions of lines. A computer program is usually written by a computer programmer in a programming language. For example, here is a simple program written in C programming language &minus;</p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;stdio.h&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   printf</span><span class=\"pun\">(</span><span class=\"str\">&quot;Hello, World! \\n&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>A computer program is a collection of instructions that performs a specific task when executed by a computer. When we compare a program with a process, we can conclude that a process is a dynamic instance of a computer program.</p>\n\n<p>A part of a computer program that performs a well-defined task is known as an <b>algorithm</b>. A collection of computer programs, libraries and related data are referred to as a <b>software</b>.</p>\n\n<h2>Process Life Cycle</h2>\n\n<p>When a process executes, it passes through different states. These stages may differ in different operating systems, and the names of these states are also not standardized.</p>\n\n<p>In general, a process can have one of the following five states at a time.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%;\">S.N.</th>\n\t\t\t<th style=\"text-align:center\">State &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>\n\t\t\t<p><b>Start</b></p>\n\n\t\t\t<p>This is the initial state when a process is first started/created.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>\n\t\t\t<p><b>Ready</b></p>\n\n\t\t\t<p>The process is waiting to be assigned to a processor. Ready processes are waiting to have the processor allocated to them by the operating system so that they can run. Process may come into this state after <b>Start</b> state or while running it by but interrupted by the scheduler to assign CPU to some other process.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>\n\t\t\t<p><b>Running</b></p>\n\n\t\t\t<p>Once the process has been assigned to a processor by the OS scheduler, the process state is set to running and the processor executes its instructions.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>\n\t\t\t<p><b>Waiting</b></p>\n\n\t\t\t<p>Process moves into the waiting state if it needs to wait for a resource, such as waiting for user input, or waiting for a file to become available.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>\n\t\t\t<p><b>Terminated or Exit</b></p>\n\n\t\t\t<p>Once the process finishes its execution, or it is terminated by the operating system, it is moved to the terminated state where it waits to be removed from main memory.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><img alt=\"Process States\" src=\"https://www.tutorialspoint.com/operating_system/images/process_state.jpg\" /></p>\n\n<h2>Process Control Block (PCB)</h2>\n\n<p>A Process Control Block is a data structure maintained by the Operating System for every process. The PCB is identified by an integer process ID (PID). A PCB keeps all the information needed to keep track of a process as listed below in the table &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%;\">S.N.</th>\n\t\t\t<th style=\"text-align:center\">Information &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>\n\t\t\t<p><b>Process State</b></p>\n\n\t\t\t<p>The current state of the process i.e., whether it is ready, running, waiting, or whatever.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>\n\t\t\t<p><b>Process privileges</b></p>\n\n\t\t\t<p>This is required to allow/disallow access to system resources.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>\n\t\t\t<p><b>Process ID</b></p>\n\n\t\t\t<p>Unique identification for each of the process in the operating system.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>\n\t\t\t<p><b>Pointer</b></p>\n\n\t\t\t<p>A pointer to parent process.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>\n\t\t\t<p><b>Program Counter</b></p>\n\n\t\t\t<p>Program Counter is a pointer to the address of the next instruction to be executed for this process.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>\n\t\t\t<p><b>CPU registers</b></p>\n\n\t\t\t<p>Various CPU registers where process need to be stored for execution for running state.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>7</td>\n\t\t\t<td>\n\t\t\t<p><b>CPU Scheduling Information</b></p>\n\n\t\t\t<p>Process priority and other scheduling information which is required to schedule the process.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>8</td>\n\t\t\t<td>\n\t\t\t<p><b>Memory management information</b></p>\n\n\t\t\t<p>This includes the information of page table, memory limits, Segment table depending on memory used by the operating system.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>9</td>\n\t\t\t<td>\n\t\t\t<p><b>Accounting information</b></p>\n\n\t\t\t<p>This includes the amount of CPU used for process execution, time limits, execution ID etc.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>10</td>\n\t\t\t<td>\n\t\t\t<p><b>IO status information</b></p>\n\n\t\t\t<p>This includes a list of I/O devices allocated to the process.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The architecture of a PCB is completely dependent on Operating System and may contain different information in different operating systems. Here is a simplified diagram of a PCB &minus;</p>\n\n<p><img alt=\"Process Control Block\" src=\"https://www.tutorialspoint.com/operating_system/images/pcb.jpg\" /></p>\n\n<p>The PCB is maintained for a process throughout its lifetime, and is deleted once the process terminates.</p>\n"
          ]
        },
        {
          "tag_line": "Operating System - Process Scheduling",
        
          "details": [
            "<h1>Operating System - Process Scheduling</h1>\n\n<h2>Definition</h2>\n\n<p>The process scheduling is the activity of the process manager that handles the removal of the running process from the CPU and the selection of another process on the basis of a particular strategy.</p>\n\n<p>Process scheduling is an essential part of a Multiprogramming operating systems. Such operating systems allow more than one process to be loaded into the executable memory at a time and the loaded process shares the CPU using time multiplexing.</p>\n\n<h2>Process Scheduling Queues</h2>\n\n<p>The OS maintains all PCBs in Process Scheduling Queues. The OS maintains a separate queue for each of the process states and PCBs of all processes in the same execution state are placed in the same queue. When the state of a process is changed, its PCB is unlinked from its current queue and moved to its new state queue.</p>\n\n<p>The Operating System maintains the following important process scheduling queues &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Job queue</b> &minus; This queue keeps all the processes in the system.</p>\n\t</li>\n\t<li>\n\t<p><b>Ready queue</b> &minus; This queue keeps a set of all processes residing in main memory, ready and waiting to execute. A new process is always put in this queue.</p>\n\t</li>\n\t<li>\n\t<p><b>Device queues</b> &minus; The processes which are blocked due to unavailability of an I/O device constitute this queue.</p>\n\t</li>\n</ul>\n\n<p><img alt=\"Process Scheduling Queuing\" src=\"https://www.tutorialspoint.com/operating_system/images/queuing_diagram.jpg\" /></p>\n\n<p>The OS can use different policies to manage each queue (FIFO, Round Robin, Priority, etc.). The OS scheduler determines how to move processes between the ready and run queues which can only have one entry per processor core on the system; in the above diagram, it has been merged with the CPU.</p>\n\n<h2>Two-State Process Model</h2>\n\n<p>Two-state process model refers to running and non-running states which are described below &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%;\">S.N.</th>\n\t\t\t<th style=\"text-align:center\">State &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>\n\t\t\t<p><b>Running</b></p>\n\n\t\t\t<p>When a new process is created, it enters into the system as in the running state.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>\n\t\t\t<p><b>Not Running</b></p>\n\n\t\t\t<p>Processes that are not running are kept in queue, waiting for their turn to execute. Each entry in the queue is a pointer to a particular process. Queue is implemented by using linked list. Use of dispatcher is as follows. When a process is interrupted, that process is transferred in the waiting queue. If the process has completed or aborted, the process is discarded. In either case, the dispatcher then selects a process from the queue to execute.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Schedulers</h2>\n\n<p>Schedulers are special system software which handle process scheduling in various ways. Their main task is to select the jobs to be submitted into the system and to decide which process to run. Schedulers are of three types &minus;</p>\n\n<ul class=\"list\">\n\t<li>Long-Term Scheduler</li>\n\t<li>Short-Term Scheduler</li>\n\t<li>Medium-Term Scheduler</li>\n</ul>\n\n<h2>Long Term Scheduler</h2>\n\n<p>It is also called a <b>job scheduler</b>. A long-term scheduler determines which programs are admitted to the system for processing. It selects processes from the queue and loads them into memory for execution. Process loads into the memory for CPU scheduling.</p>\n\n<p>The primary objective of the job scheduler is to provide a balanced mix of jobs, such as I/O bound and processor bound. It also controls the degree of multiprogramming. If the degree of multiprogramming is stable, then the average rate of process creation must be equal to the average departure rate of processes leaving the system.</p>\n\n<p>On some systems, the long-term scheduler may not be available or minimal. Time-sharing operating systems have no long term scheduler. When a process changes the state from new to ready, then there is use of long-term scheduler.</p>\n\n<h2>Short Term Scheduler</h2>\n\n<p>It is also called as <b>CPU scheduler</b>. Its main objective is to increase system performance in accordance with the chosen set of criteria. It is the change of ready state to running state of the process. CPU scheduler selects a process among the processes that are ready to execute and allocates CPU to one of them.</p>\n\n<p>Short-term schedulers, also known as dispatchers, make the decision of which process to execute next. Short-term schedulers are faster than long-term schedulers.</p>\n\n<h2>Medium Term Scheduler</h2>\n\n<p>Medium-term scheduling is a part of <b>swapping</b>. It removes the processes from the memory. It reduces the degree of multiprogramming. The medium-term scheduler is in-charge of handling the swapped out-processes.</p>\n\n<p>A running process may become suspended if it makes an I/O request. A suspended processes cannot make any progress towards completion. In this condition, to remove the process from memory and make space for other processes, the suspended process is moved to the secondary storage. This process is called <b>swapping</b>, and the process is said to be swapped out or rolled out. Swapping may be necessary to improve the process mix.</p>\n\n<h2>Comparison among Scheduler</h2>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%;\">S.N.</th>\n\t\t\t<th style=\"text-align:center\">Long-Term Scheduler</th>\n\t\t\t<th style=\"text-align:center\">Short-Term Scheduler</th>\n\t\t\t<th style=\"text-align:center\">Medium-Term Scheduler</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>It is a job scheduler</td>\n\t\t\t<td>It is a CPU scheduler</td>\n\t\t\t<td>It is a process swapping scheduler.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Speed is lesser than short term scheduler</td>\n\t\t\t<td>Speed is fastest among other two</td>\n\t\t\t<td>Speed is in between both short and long term scheduler.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>It controls the degree of multiprogramming</td>\n\t\t\t<td>It provides lesser control over degree of multiprogramming</td>\n\t\t\t<td>It reduces the degree of multiprogramming.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>It is almost absent or minimal in time sharing system</td>\n\t\t\t<td>It is also minimal in time sharing system</td>\n\t\t\t<td>It is a part of Time sharing systems.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>It selects processes from pool and loads them into memory for execution</td>\n\t\t\t<td>It selects those processes which are ready to execute</td>\n\t\t\t<td>It can re-introduce the process into memory and execution can be continued.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Context Switch</h2>\n\n<p>A context switch is the mechanism to store and restore the state or context of a CPU in Process Control block so that a process execution can be resumed from the same point at a later time. Using this technique, a context switcher enables multiple processes to share a single CPU. Context switching is an essential part of a multitasking operating system features.</p>\n\n<p>When the scheduler switches the CPU from executing one process to execute another, the state from the current running process is stored into the process control block. After this, the state for the process to run next is loaded from its own PCB and used to set the PC, registers, etc. At that point, the second process can start executing.</p>\n\n<p><img alt=\"Process Context Switch\" src=\"https://www.tutorialspoint.com/operating_system/images/context_switch.jpg\" /></p>\n\n<p>Context switches are computationally intensive since register and memory state must be saved and restored. To avoid the amount of context switching time, some hardware systems employ two or more sets of processor registers. When the process is switched, the following information is stored for later use.</p>\n\n<ul class=\"list\">\n\t<li>Program Counter</li>\n\t<li>Scheduling information</li>\n\t<li>Base and limit register value</li>\n\t<li>Currently used register</li>\n\t<li>Changed State</li>\n\t<li>I/O State information</li>\n\t<li>Accounting information</li>\n</ul>\n"
          ]
        },
        {
          "tag_line": "Operating System Scheduling algorithms",
        
          "details": [
            "<h2>Operating System Scheduling algorithms</h2>\n\n<p>A Process Scheduler schedules different processes to be assigned to the CPU based on particular scheduling algorithms. There are six popular process scheduling algorithms which we are going to discuss in this chapter &minus;</p>\n\n<ul class=\"list\">\n\t<li>First-Come, First-Served (FCFS) Scheduling</li>\n\t<li>Shortest-Job-Next (SJN) Scheduling</li>\n\t<li>Priority Scheduling</li>\n\t<li>Shortest Remaining Time</li>\n\t<li>Round Robin(RR) Scheduling</li>\n\t<li>Multiple-Level Queues Scheduling</li>\n</ul>\n\n<p>These algorithms are either <b>non-preemptive or preemptive</b>. Non-preemptive algorithms are designed so that once a process enters the running state, it cannot be preempted until it completes its allotted time, whereas the preemptive scheduling is based on priority where a scheduler may preempt a low priority running process anytime when a high priority process enters into a ready state.</p>\n\n<h2>First Come First Serve (FCFS)</h2>\n\n<ul class=\"list\">\n\t<li>Jobs are executed on first come, first serve basis.</li>\n\t<li>It is a non-preemptive, pre-emptive scheduling algorithm.</li>\n\t<li>Easy to understand and implement.</li>\n\t<li>Its implementation is based on FIFO queue.</li>\n\t<li>Poor in performance as average wait time is high.</li>\n</ul>\n\n<p><img alt=\"First Come First Serve Scheduling Algorithm\" src=\"https://www.tutorialspoint.com/operating_system/images/fcfs.jpg\" /></p>\n\n<p><b>Wait time</b> of each process is as follows &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:10%;\">Process</th>\n\t\t\t<th style=\"text-align:center\">Wait Time : Service Time - Arrival Time</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P0</td>\n\t\t\t<td>0 - 0 = 0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P1</td>\n\t\t\t<td>5 - 1 = 4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P2</td>\n\t\t\t<td>8 - 2 = 6</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P3</td>\n\t\t\t<td>16 - 3 = 13</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Average Wait Time: (0+4+6+13) / 4 = 5.75</p>\n\n<h2>Shortest Job Next (SJN)</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p>This is also known as <b>shortest job first</b>, or SJF</p>\n\t</li>\n\t<li>\n\t<p>This is a non-preemptive, pre-emptive scheduling algorithm.</p>\n\t</li>\n\t<li>\n\t<p>Best approach to minimize waiting time.</p>\n\t</li>\n\t<li>\n\t<p>Easy to implement in Batch systems where required CPU time is known in advance.</p>\n\t</li>\n\t<li>\n\t<p>Impossible to implement in interactive systems where required CPU time is not known.</p>\n\t</li>\n\t<li>\n\t<p>The processer should know in advance how much time process will take.</p>\n\t</li>\n</ul>\n\n<p>Given: Table of processes, and their Arrival time, Execution time</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Process</th>\n\t\t\t<th>Arrival Time</th>\n\t\t\t<th>Execution Time</th>\n\t\t\t<th>Service Time</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P0</td>\n\t\t\t<td>0</td>\n\t\t\t<td>5</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P2</td>\n\t\t\t<td>2</td>\n\t\t\t<td>8</td>\n\t\t\t<td>14</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P3</td>\n\t\t\t<td>3</td>\n\t\t\t<td>6</td>\n\t\t\t<td>8</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><img alt=\"Shortest Job First Scheduling Algorithm\" src=\"https://www.tutorialspoint.com/operating_system/images/shortest_job_first.jpg\" /></p>\n\n<p><b>Waiting time</b> of each process is as follows &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:10%; text-align:center\">Process</th>\n\t\t\t<th style=\"text-align:center\">Waiting Time</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P0</td>\n\t\t\t<td>0 - 0 = 0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P1</td>\n\t\t\t<td>5 - 1 = 4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P2</td>\n\t\t\t<td>14 - 2 = 12</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P3</td>\n\t\t\t<td>8 - 3 = 5</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Average Wait Time: (0 + 4 + 12 + 5)/4 = 21 / 4 = 5.25</p>\n\n<h2>Priority Based Scheduling</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Priority scheduling is a non-preemptive algorithm and one of the most common scheduling algorithms in batch systems.</p>\n\t</li>\n\t<li>\n\t<p>Each process is assigned a priority. Process with highest priority is to be executed first and so on.</p>\n\t</li>\n\t<li>\n\t<p>Processes with same priority are executed on first come first served basis.</p>\n\t</li>\n\t<li>\n\t<p>Priority can be decided based on memory requirements, time requirements or any other resource requirement.</p>\n\t</li>\n</ul>\n\n<p>Given: Table of processes, and their Arrival time, Execution time, and priority. Here we are considering 1 is the lowest priority.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Process</th>\n\t\t\t<th>Arrival Time</th>\n\t\t\t<th>Execution Time</th>\n\t\t\t<th>Priority</th>\n\t\t\t<th>Service Time</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P0</td>\n\t\t\t<td>0</td>\n\t\t\t<td>5</td>\n\t\t\t<td>1</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t\t<td>2</td>\n\t\t\t<td>11</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P2</td>\n\t\t\t<td>2</td>\n\t\t\t<td>8</td>\n\t\t\t<td>1</td>\n\t\t\t<td>14</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P3</td>\n\t\t\t<td>3</td>\n\t\t\t<td>6</td>\n\t\t\t<td>3</td>\n\t\t\t<td>5</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><img alt=\"Priority Scheduling Algorithm\" src=\"https://www.tutorialspoint.com/operating_system/images/priority_scheduling_algorithm.jpg\" /></p>\n\n<p><b>Waiting time</b> of each process is as follows &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:10%; text-align:center\">Process</th>\n\t\t\t<th style=\"text-align:center\">Waiting Time</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P0</td>\n\t\t\t<td>0 - 0 = 0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P1</td>\n\t\t\t<td>11 - 1 = 10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P2</td>\n\t\t\t<td>14 - 2 = 12</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P3</td>\n\t\t\t<td>5 - 3 = 2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Average Wait Time: (0 + 10 + 12 + 2)/4 = 24 / 4 = 6</p>\n\n<h2>Shortest Remaining Time</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Shortest remaining time (SRT) is the preemptive version of the SJN algorithm.</p>\n\t</li>\n\t<li>\n\t<p>The processor is allocated to the job closest to completion but it can be preempted by a newer ready job with shorter time to completion.</p>\n\t</li>\n\t<li>\n\t<p>Impossible to implement in interactive systems where required CPU time is not known.</p>\n\t</li>\n\t<li>\n\t<p>It is often used in batch environments where short jobs need to give preference.</p>\n\t</li>\n</ul>\n\n<h2>Round Robin Scheduling</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Round Robin is the preemptive process scheduling algorithm.</p>\n\t</li>\n\t<li>\n\t<p>Each process is provided a fix time to execute, it is called a <b>quantum</b>.</p>\n\t</li>\n\t<li>\n\t<p>Once a process is executed for a given time period, it is preempted and other process executes for a given time period.</p>\n\t</li>\n\t<li>\n\t<p>Context switching is used to save states of preempted processes.</p>\n\t</li>\n</ul>\n\n<p><img alt=\"Round Robin Scheduling Algorithm\" src=\"https://www.tutorialspoint.com/operating_system/images/round_robin.jpg\" /></p>\n\n<p><b>Wait time</b> of each process is as follows &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:10%; text-align:center\">Process</th>\n\t\t\t<th style=\"text-align:center\">Wait Time : Service Time - Arrival Time</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P0</td>\n\t\t\t<td>(0 - 0) + (12 - 3) = 9</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P1</td>\n\t\t\t<td>(3 - 1) = 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P2</td>\n\t\t\t<td>(6 - 2) + (14 - 9) + (20 - 17) = 12</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>P3</td>\n\t\t\t<td>(9 - 3) + (17 - 12) = 11</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Average Wait Time: (9+2+12+11) / 4 = 8.5</p>\n\n<h2>Multiple-Level Queues Scheduling</h2>\n\n<p>Multiple-level queues are not an independent scheduling algorithm. They make use of other existing algorithms to group and schedule jobs with common characteristics.</p>\n\n<ul class=\"list\">\n\t<li>Multiple queues are maintained for processes with common characteristics.</li>\n\t<li>Each queue can have its own scheduling algorithms.</li>\n\t<li>Priorities are assigned to each queue.</li>\n</ul>\n\n<p>For example, CPU-bound jobs can be scheduled in one queue and all I/O-bound jobs in another queue. The Process Scheduler then alternately selects jobs from each queue and assigns them to the CPU based on the algorithm assigned to the queue.</p>\n"
          ]
        },
        {
          "tag_line": "Operating System - Multi-Threading",
          "details": [
            "<h2>Operating System - Multi-Threading</h2>\n\n<h2>What is Thread?</h2>\n\n<p>A thread is a flow of execution through the process code, with its own program counter that keeps track of which instruction to execute next, system registers which hold its current working variables, and a stack which contains the execution history.</p>\n\n<p>A thread shares with its peer threads few information like code segment, data segment and open files. When one thread alters a code segment memory item, all other threads see that.</p>\n\n<p>A thread is also called a <b>lightweight process</b>. Threads provide a way to improve application performance through parallelism. Threads represent a software approach to improving performance of operating system by reducing the overhead thread is equivalent to a classical process.</p>\n\n<p>Each thread belongs to exactly one process and no thread can exist outside a process. Each thread represents a separate flow of control. Threads have been successfully used in implementing network servers and web server. They also provide a suitable foundation for parallel execution of applications on shared memory multiprocessors. The following figure shows the working of a single-threaded and a multithreaded process.</p>\n\n<p><img alt=\"Single vs Multithreaded Process\" src=\"https://www.tutorialspoint.com/operating_system/images/thread_processes.jpg\" /></p>\n\n<h2>Difference between Process and Thread</h2>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%;\">S.N.</th>\n\t\t\t<th style=\"width:45%;\">Process</th>\n\t\t\t<th>Thread</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Process is heavy weight or resource intensive.</td>\n\t\t\t<td>Thread is light weight, taking lesser resources than a process.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Process switching needs interaction with operating system.</td>\n\t\t\t<td>Thread switching does not need to interact with operating system.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>In multiple processing environments, each process executes the same code but has its own memory and file resources.</td>\n\t\t\t<td>All threads can share same set of open files, child processes.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>If one process is blocked, then no other process can execute until the first process is unblocked.</td>\n\t\t\t<td>While one thread is blocked and waiting, a second thread in the same task can run.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>Multiple processes without using threads use more resources.</td>\n\t\t\t<td>Multiple threaded processes use fewer resources.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>In multiple processes each process operates independently of the others.</td>\n\t\t\t<td>One thread can read, write or change another thread&#39;s data.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Advantages of Thread</h2>\n\n<ul class=\"list\">\n\t<li>Threads minimize the context switching time.</li>\n\t<li>Use of threads provides concurrency within a process.</li>\n\t<li>Efficient communication.</li>\n\t<li>It is more economical to create and context switch threads.</li>\n\t<li>Threads allow utilization of multiprocessor architectures to a greater scale and efficiency.</li>\n</ul>\n\n<h2>Types of Thread</h2>\n\n<p>Threads are implemented in following two ways &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>User Level Threads</b> &minus; User managed threads.</p>\n\t</li>\n\t<li>\n\t<p><b>Kernel Level Threads</b> &minus; Operating System managed threads acting on kernel, an operating system core.</p>\n\t</li>\n</ul>\n\n<h2>User Level Threads</h2>\n\n<p>In this case, the thread management kernel is not aware of the existence of threads. The thread library contains code for creating and destroying threads, for passing message and data between threads, for scheduling thread execution and for saving and restoring thread contexts. The application starts with a single thread.</p>\n\n<p><img alt=\"User level thread\" src=\"https://www.tutorialspoint.com/operating_system/images/user_threads.jpg\" /></p>\n\n<h3>Advantages</h3>\n\n<ul class=\"list\">\n\t<li>Thread switching does not require Kernel mode privileges.</li>\n\t<li>User level thread can run on any operating system.</li>\n\t<li>Scheduling can be application specific in the user level thread.</li>\n\t<li>User level threads are fast to create and manage.</li>\n</ul>\n\n<h3>Disadvantages</h3>\n\n<ul class=\"list\">\n\t<li>In a typical operating system, most system calls are blocking.</li>\n\t<li>Multithreaded application cannot take advantage of multiprocessing.</li>\n</ul>\n\n<h2>Kernel Level Threads</h2>\n\n<p>In this case, thread management is done by the Kernel. There is no thread management code in the application area. Kernel threads are supported directly by the operating system. Any application can be programmed to be multithreaded. All of the threads within an application are supported within a single process.</p>\n\n<p>The Kernel maintains context information for the process as a whole and for individuals threads within the process. Scheduling by the Kernel is done on a thread basis. The Kernel performs thread creation, scheduling and management in Kernel space. Kernel threads are generally slower to create and manage than the user threads.</p>\n\n<h3>Advantages</h3>\n\n<ul class=\"list\">\n\t<li>Kernel can simultaneously schedule multiple threads from the same process on multiple processes.</li>\n\t<li>If one thread in a process is blocked, the Kernel can schedule another thread of the same process.</li>\n\t<li>Kernel routines themselves can be multithreaded.</li>\n</ul>\n\n<h3>Disadvantages</h3>\n\n<ul class=\"list\">\n\t<li>Kernel threads are generally slower to create and manage than the user threads.</li>\n\t<li>Transfer of control from one thread to another within the same process requires a mode switch to the Kernel.</li>\n</ul>\n\n<h2>Multithreading Models</h2>\n\n<p>Some operating system provide a combined user level thread and Kernel level thread facility. Solaris is a good example of this combined approach. In a combined system, multiple threads within the same application can run in parallel on multiple processors and a blocking system call need not block the entire process. Multithreading models are three types</p>\n\n<ul class=\"list\">\n\t<li>Many to many relationship.</li>\n\t<li>Many to one relationship.</li>\n\t<li>One to one relationship.</li>\n</ul>\n\n<h2>Many to Many Model</h2>\n\n<p>The many-to-many model multiplexes any number of user threads onto an equal or smaller number of kernel threads.</p>\n\n<p>The following diagram shows the many-to-many threading model where 6 user level threads are multiplexing with 6 kernel level threads. In this model, developers can create as many user threads as necessary and the corresponding Kernel threads can run in parallel on a multiprocessor machine. This model provides the best accuracy on concurrency and when a thread performs a blocking system call, the kernel can schedule another thread for execution.</p>\n\n<p><img alt=\"Many to many thread model\" src=\"https://www.tutorialspoint.com/operating_system/images/many_to_many.jpg\" /></p>\n\n<h2>Many to One Model</h2>\n\n<p>Many-to-one model maps many user level threads to one Kernel-level thread. Thread management is done in user space by the thread library. When thread makes a blocking system call, the entire process will be blocked. Only one thread can access the Kernel at a time, so multiple threads are unable to run in parallel on multiprocessors.</p>\n\n<p>If the user-level thread libraries are implemented in the operating system in such a way that the system does not support them, then the Kernel threads use the many-to-one relationship modes.</p>\n\n<p><img alt=\"Many to one thread model\" src=\"https://www.tutorialspoint.com/operating_system/images/many_to_one.jpg\" /></p>\n\n<h2>One to One Model</h2>\n\n<p>There is one-to-one relationship of user-level thread to the kernel-level thread. This model provides more concurrency than the many-to-one model. It also allows another thread to run when a thread makes a blocking system call. It supports multiple threads to execute in parallel on microprocessors.</p>\n\n<p>Disadvantage of this model is that creating user thread requires the corresponding Kernel thread. OS/2, windows NT and windows 2000 use one to one relationship model.</p>\n\n<p><img alt=\"One to one thread model\" src=\"https://www.tutorialspoint.com/operating_system/images/one_to_one.jpg\" /></p>\n\n<h2>Difference between User-Level &amp; Kernel-Level Thread</h2>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%; text-align:center\">S.N.</th>\n\t\t\t<th style=\"width:45%; text-align:center\">User-Level Threads</th>\n\t\t\t<th style=\"width:45%; text-align:center\">Kernel-Level Thread</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>User-level threads are faster to create and manage.</td>\n\t\t\t<td>Kernel-level threads are slower to create and manage.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Implementation is by a thread library at the user level.</td>\n\t\t\t<td>Operating system supports creation of Kernel threads.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>User-level thread is generic and can run on any operating system.</td>\n\t\t\t<td>Kernel-level thread is specific to the operating system.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>Multi-threaded applications cannot take advantage of multiprocessing.</td>\n\t\t\t<td>Kernel routines themselves can be multithreaded.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<hr />"
          ]
        },
        {
          "tag_line": "Operating System - Memory Management",
          "details": [
            "<h2>Operating System - Memory Management</h2>\n\n<p>Memory management is the functionality of an operating system which handles or manages primary memory and moves processes back and forth between main memory and disk during execution. Memory management keeps track of each and every memory location, regardless of either it is allocated to some process or it is free. It checks how much memory is to be allocated to processes. It decides which process will get memory at what time. It tracks whenever some memory gets freed or unallocated and correspondingly it updates the status.</p>\n\n<p>This tutorial will teach you basic concepts related to Memory Management.</p>\n\n<h2>Process Address Space</h2>\n\n<p>The process address space is the set of logical addresses that a process references in its code. For example, when 32-bit addressing is in use, addresses can range from 0 to 0x7fffffff; that is, 2^31 possible numbers, for a total theoretical size of 2 gigabytes.</p>\n\n<p>The operating system takes care of mapping the logical addresses to physical addresses at the time of memory allocation to the program. There are three types of addresses used in a program before and after memory is allocated &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>S.N.</th>\n\t\t\t<th style=\"text-align:center\">Memory Addresses &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>\n\t\t\t<p><b>Symbolic addresses</b></p>\n\n\t\t\t<p>The addresses used in a source code. The variable names, constants, and instruction labels are the basic elements of the symbolic address space.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>\n\t\t\t<p><b>Relative addresses</b></p>\n\n\t\t\t<p>At the time of compilation, a compiler converts symbolic addresses into relative addresses.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>\n\t\t\t<p><b>Physical addresses</b></p>\n\n\t\t\t<p>The loader generates these addresses at the time when a program is loaded into main memory.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Virtual and physical addresses are the same in compile-time and load-time address-binding schemes. Virtual and physical addresses differ in execution-time address-binding scheme.</p>\n\n<p>The set of all logical addresses generated by a program is referred to as a <b>logical address space</b>. The set of all physical addresses corresponding to these logical addresses is referred to as a <b>physical address space.</b></p>\n\n<p>The runtime mapping from virtual to physical address is done by the memory management unit (MMU) which is a hardware device. MMU uses following mechanism to convert virtual address to physical address.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The value in the base register is added to every address generated by a user process, which is treated as offset at the time it is sent to memory. For example, if the base register value is 10000, then an attempt by the user to use address location 100 will be dynamically reallocated to location 10100.</p>\n\t</li>\n\t<li>\n\t<p>The user program deals with virtual addresses; it never sees the real physical addresses.</p>\n\t</li>\n</ul>\n\n<h2>Static vs Dynamic Loading</h2>\n\n<p>The choice between Static or Dynamic Loading is to be made at the time of computer program being developed. If you have to load your program statically, then at the time of compilation, the complete programs will be compiled and linked without leaving any external program or module dependency. The linker combines the object program with other necessary object modules into an absolute program, which also includes logical addresses.</p>\n\n<p>If you are writing a Dynamically loaded program, then your compiler will compile the program and for all the modules which you want to include dynamically, only references will be provided and rest of the work will be done at the time of execution.</p>\n\n<p>At the time of loading, with <b>static loading</b>, the absolute program (and data) is loaded into memory in order for execution to start.</p>\n\n<p>If you are using <b>dynamic loading</b>, dynamic routines of the library are stored on a disk in relocatable form and are loaded into memory only when they are needed by the program.</p>\n\n<h2>Static vs Dynamic Linking</h2>\n\n<p>As explained above, when static linking is used, the linker combines all other modules needed by a program into a single executable program to avoid any runtime dependency.</p>\n\n<p>When dynamic linking is used, it is not required to link the actual module or library with the program, rather a reference to the dynamic module is provided at the time of compilation and linking. Dynamic Link Libraries (DLL) in Windows and Shared Objects in Unix are good examples of dynamic libraries.</p>\n\n<h2>Swapping</h2>\n\n<p>Swapping is a mechanism in which a process can be swapped temporarily out of main memory (or move) to secondary storage (disk) and make that memory available to other processes. At some later time, the system swaps back the process from the secondary storage to main memory.</p>\n\n<p>Though performance is usually affected by swapping process but it helps in running multiple and big processes in parallel and that&#39;s the reason <b>Swapping is also known as a technique for memory compaction</b>.</p>\n\n<p><img alt=\"Process Swapping\" src=\"https://www.tutorialspoint.com/operating_system/images/process_swapping.jpg\" /></p>\n\n<p>The total time taken by swapping process includes the time it takes to move the entire process to a secondary disk and then to copy the process back to memory, as well as the time the process takes to regain main memory.</p>\n\n<p>Let us assume that the user process is of size 2048KB and on a standard hard disk where swapping will take place has a data transfer rate around 1 MB per second. The actual transfer of the 1000K process to or from memory will take</p>\n\n<pre class=\"result notranslate\">\n2048KB / 1024KB per second\n= 2 seconds\n= 2000 milliseconds\n</pre>\n\n<p>Now considering in and out time, it will take complete 4000 milliseconds plus other overhead where the process competes to regain main memory.</p>\n\n<h2>Memory Allocation</h2>\n\n<p>Main memory usually has two partitions &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Low Memory</b> &minus; Operating system resides in this memory.</p>\n\t</li>\n\t<li>\n\t<p><b>High Memory</b> &minus; User processes are held in high memory.</p>\n\t</li>\n</ul>\n\n<p>Operating system uses the following memory allocation mechanism.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>S.N.</th>\n\t\t\t<th style=\"text-align:center\">Memory Allocation &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>\n\t\t\t<p><b>Single-partition allocation</b></p>\n\n\t\t\t<p>In this type of allocation, relocation-register scheme is used to protect user processes from each other, and from changing operating-system code and data. Relocation register contains value of smallest physical address whereas limit register contains range of logical addresses. Each logical address must be less than the limit register.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>\n\t\t\t<p><b>Multiple-partition allocation</b></p>\n\n\t\t\t<p>In this type of allocation, main memory is divided into a number of fixed-sized partitions where each partition should contain only one process. When a partition is free, a process is selected from the input queue and is loaded into the free partition. When the process terminates, the partition becomes available for another process.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Fragmentation</h2>\n\n<p>As processes are loaded and removed from memory, the free memory space is broken into little pieces. It happens after sometimes that processes cannot be allocated to memory blocks considering their small size and memory blocks remains unused. This problem is known as Fragmentation.</p>\n\n<p>Fragmentation is of two types &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>S.N.</th>\n\t\t\t<th style=\"text-align:center\">Fragmentation &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>\n\t\t\t<p><b>External fragmentation</b></p>\n\n\t\t\t<p>Total memory space is enough to satisfy a request or to reside a process in it, but it is not contiguous, so it cannot be used.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>\n\t\t\t<p><b>Internal fragmentation</b></p>\n\n\t\t\t<p>Memory block assigned to process is bigger. Some portion of memory is left unused, as it cannot be used by another process.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The following diagram shows how fragmentation can cause waste of memory and a compaction technique can be used to create more free memory out of fragmented memory &minus;</p>\n\n<p><img alt=\"Memory Fragmentation\" src=\"https://www.tutorialspoint.com/operating_system/images/memory_fragmentation.jpg\" /></p>\n\n<p>External fragmentation can be reduced by compaction or shuffle memory contents to place all free memory together in one large block. To make compaction feasible, relocation should be dynamic.</p>\n\n<p>The internal fragmentation can be reduced by effectively assigning the smallest partition but large enough for the process.</p>\n\n<h2>Paging</h2>\n\n<p>A computer can address more memory than the amount physically installed on the system. This extra memory is actually called virtual memory and it is a section of a hard that&#39;s set up to emulate the computer&#39;s RAM. Paging technique plays an important role in implementing virtual memory.</p>\n\n<p>Paging is a memory management technique in which process address space is broken into blocks of the same size called <b>pages</b> (size is power of 2, between 512 bytes and 8192 bytes). The size of the process is measured in the number of pages.</p>\n\n<p>Similarly, main memory is divided into small fixed-sized blocks of (physical) memory called <b>frames</b> and the size of a frame is kept the same as that of a page to have optimum utilization of the main memory and to avoid external fragmentation.</p>\n\n<p><img alt=\"Paging\" src=\"https://www.tutorialspoint.com/operating_system/images/paging.jpg\" /></p>\n\n<h3>Address Translation</h3>\n\n<p>Page address is called <b>logical address</b> and represented by <b>page number</b> and the <b>offset</b>.</p>\n\n<pre class=\"result notranslate\">\nLogical Address = Page number + page offset\n</pre>\n\n<p>Frame address is called <b>physical address</b> and represented by a <b>frame number</b> and the <b>offset</b>.</p>\n\n<pre class=\"result notranslate\">\nPhysical Address = Frame number + page offset\n</pre>\n\n<p>A data structure called <b>page map table</b> is used to keep track of the relation between a page of a process to a frame in physical memory.</p>\n\n<p><img alt=\"Page Map Table\" src=\"https://www.tutorialspoint.com/operating_system/images/page_map_table.jpg\" /></p>\n\n<p>When the system allocates a frame to any page, it translates this logical address into a physical address and create entry into the page table to be used throughout execution of the program.</p>\n\n<p>When a process is to be executed, its corresponding pages are loaded into any available memory frames. Suppose you have a program of 8Kb but your memory can accommodate only 5Kb at a given point in time, then the paging concept will come into picture. When a computer runs out of RAM, the operating system (OS) will move idle or unwanted pages of memory to secondary memory to free up RAM for other processes and brings them back when needed by the program.</p>\n\n<p>This process continues during the whole execution of the program where the OS keeps removing idle pages from the main memory and write them onto the secondary memory and bring them back when required by the program.</p>\n\n<h3>Advantages and Disadvantages of Paging</h3>\n\n<p>Here is a list of advantages and disadvantages of paging &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Paging reduces external fragmentation, but still suffer from internal fragmentation.</p>\n\t</li>\n\t<li>\n\t<p>Paging is simple to implement and assumed as an efficient memory management technique.</p>\n\t</li>\n\t<li>\n\t<p>Due to equal size of the pages and frames, swapping becomes very easy.</p>\n\t</li>\n\t<li>\n\t<p>Page table requires extra memory space, so may not be good for a system having small RAM.</p>\n\t</li>\n</ul>\n\n<h2>Segmentation</h2>\n\n<p>Segmentation is a memory management technique in which each job is divided into several segments of different sizes, one for each module that contains pieces that perform related functions. Each segment is actually a different logical address space of the program.</p>\n\n<p>When a process is to be executed, its corresponding segmentation are loaded into non-contiguous memory though every segment is loaded into a contiguous block of available memory.</p>\n\n<p>Segmentation memory management works very similar to paging but here segments are of variable-length where as in paging pages are of fixed size.</p>\n\n<p>A program segment contains the program&#39;s main function, utility functions, data structures, and so on. The operating system maintains a <b>segment map table</b> for every process and a list of free memory blocks along with segment numbers, their size and corresponding memory locations in main memory. For each segment, the table stores the starting address of the segment and the length of the segment. A reference to a memory location includes a value that identifies a segment and an offset.</p>\n\n<p><img alt=\"Segment Map Table\" src=\"https://www.tutorialspoint.com/operating_system/images/segment_map_table.jpg\" /></p>\n"
          ]
        },
        {
          "tag_line": "Operating System - Virtual Memory",
          "details": [
            "<h2>Operating System - Virtual Memory</h2>\n\n<p>A computer can address more memory than the amount physically installed on the system. This extra memory is actually called <b>virtual memory</b> and it is a section of a hard disk that&#39;s set up to emulate the computer&#39;s RAM.</p>\n\n<p>The main visible advantage of this scheme is that programs can be larger than physical memory. Virtual memory serves two purposes. First, it allows us to extend the use of physical memory by using disk. Second, it allows us to have memory protection, because each virtual address is translated to a physical address.</p>\n\n<p>Following are the situations, when entire program is not required to be loaded fully in main memory.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>User written error handling routines are used only when an error occurred in the data or computation.</p>\n\t</li>\n\t<li>\n\t<p>Certain options and features of a program may be used rarely.</p>\n\t</li>\n\t<li>\n\t<p>Many tables are assigned a fixed amount of address space even though only a small amount of the table is actually used.</p>\n\t</li>\n\t<li>\n\t<p>The ability to execute a program that is only partially in memory would counter many benefits.</p>\n\t</li>\n\t<li>\n\t<p>Less number of I/O would be needed to load or swap each user program into memory.</p>\n\t</li>\n\t<li>\n\t<p>A program would no longer be constrained by the amount of physical memory that is available.</p>\n\t</li>\n\t<li>\n\t<p>Each user program could take less physical memory, more programs could be run the same time, with a corresponding increase in CPU utilization and throughput.</p>\n\t</li>\n</ul>\n\n<p>Modern microprocessors intended for general-purpose use, a memory management unit, or MMU, is built into the hardware. The MMU&#39;s job is to translate virtual addresses into physical addresses. A basic example is given below &minus;</p>\n\n<p><img alt=\"Virtual Memory\" src=\"https://www.tutorialspoint.com/operating_system/images/virtual_memory.jpg\" /></p>\n\n<p>Virtual memory is commonly implemented by demand paging. It can also be implemented in a segmentation system. Demand segmentation can also be used to provide virtual memory.</p>\n\n<h2>Demand Paging</h2>\n\n<p>A demand paging system is quite similar to a paging system with swapping where processes reside in secondary memory and pages are loaded only on demand, not in advance. When a context switch occurs, the operating system does not copy any of the old program&rsquo;s pages out to the disk or any of the new program&rsquo;s pages into the main memory Instead, it just begins executing the new program after loading the first page and fetches that program&rsquo;s pages as they are referenced.</p>\n\n<p><img alt=\"Demand Paging\" src=\"https://www.tutorialspoint.com/operating_system/images/demand_paging.jpg\" /></p>\n\n<p>While executing a program, if the program references a page which is not available in the main memory because it was swapped out a little ago, the processor treats this invalid memory reference as a <b>page fault</b> and transfers control from the program to the operating system to demand the page back into the memory.</p>\n\n<h3>Advantages</h3>\n\n<p>Following are the advantages of Demand Paging &minus;</p>\n\n<ul class=\"list\">\n\t<li>Large virtual memory.</li>\n\t<li>More efficient use of memory.</li>\n\t<li>There is no limit on degree of multiprogramming.</li>\n</ul>\n\n<h3>Disadvantages</h3>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Number of tables and the amount of processor overhead for handling page interrupts are greater than in the case of the simple paged management techniques.</p>\n\t</li>\n</ul>\n\n<h2>Page Replacement Algorithm</h2>\n\n<p>Page replacement algorithms are the techniques using which an Operating System decides which memory pages to swap out, write to disk when a page of memory needs to be allocated. Paging happens whenever a page fault occurs and a free page cannot be used for allocation purpose accounting to reason that pages are not available or the number of free pages is lower than required pages.</p>\n\n<p>When the page that was selected for replacement and was paged out, is referenced again, it has to read in from disk, and this requires for I/O completion. This process determines the quality of the page replacement algorithm: the lesser the time waiting for page-ins, the better is the algorithm.</p>\n\n<p>A page replacement algorithm looks at the limited information about accessing the pages provided by hardware, and tries to select which pages should be replaced to minimize the total number of page misses, while balancing it with the costs of primary storage and processor time of the algorithm itself. There are many different page replacement algorithms. We evaluate an algorithm by running it on a particular string of memory reference and computing the number of page faults,</p>\n\n<h2>Reference String</h2>\n\n<p>The string of memory references is called reference string. Reference strings are generated artificially or by tracing a given system and recording the address of each memory reference. The latter choice produces a large number of data, where we note two things.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>For a given page size, we need to consider only the page number, not the entire address.</p>\n\t</li>\n\t<li>\n\t<p>If we have a reference to a page <b>p</b>, then any immediately following references to page <b>p</b> will never cause a page fault. Page p will be in memory after the first reference; the immediately following references will not fault.</p>\n\t</li>\n\t<li>\n\t<p>For example, consider the following sequence of addresses &minus; 123,215,600,1234,76,96</p>\n\t</li>\n\t<li>\n\t<p>If page size is 100, then the reference string is 1,2,6,12,0,0</p>\n\t</li>\n</ul>\n\n<h2>First In First Out (FIFO) algorithm</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Oldest page in main memory is the one which will be selected for replacement.</p>\n\t</li>\n\t<li>\n\t<p>Easy to implement, keep a list, replace pages from the tail and add new pages at the head.</p>\n\t</li>\n</ul>\n\n<p><img alt=\"First In First Out\" src=\"https://www.tutorialspoint.com/operating_system/images/fifo.jpg\" /></p>\n\n<h2>Optimal Page algorithm</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p>An optimal page-replacement algorithm has the lowest page-fault rate of all algorithms. An optimal page-replacement algorithm exists, and has been called OPT or MIN.</p>\n\t</li>\n\t<li>\n\t<p>Replace the page that will not be used for the longest period of time. Use the time when a page is to be used.</p>\n\t</li>\n</ul>\n\n<p><img alt=\"Optimal page replacement\" src=\"https://www.tutorialspoint.com/operating_system/images/opr.jpg\" /></p>\n\n<h2>Least Recently Used (LRU) algorithm</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Page which has not been used for the longest time in main memory is the one which will be selected for replacement.</p>\n\t</li>\n\t<li>\n\t<p>Easy to implement, keep a list, replace pages by looking back into time.</p>\n\t</li>\n</ul>\n\n<p><img alt=\"Least Recently Used\" src=\"https://www.tutorialspoint.com/operating_system/images/lru.jpg\" /></p>\n\n<h2>Page Buffering algorithm</h2>\n\n<ul class=\"list\">\n\t<li>To get a process start quickly, keep a pool of free frames.</li>\n\t<li>On page fault, select a page to be replaced.</li>\n\t<li>Write the new page in the frame of free pool, mark the page table and restart the process.</li>\n\t<li>Now write the dirty page out of disk and place the frame holding replaced page in free pool.</li>\n</ul>\n\n<h2>Least frequently Used(LFU) algorithm</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The page with the smallest count is the one which will be selected for replacement.</p>\n\t</li>\n\t<li>\n\t<p>This algorithm suffers from the situation in which a page is used heavily during the initial phase of a process, but then is never used again.</p>\n\t</li>\n</ul>\n\n<h2>Most frequently Used(MFU) algorithm</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p>This algorithm is based on the argument that the page with the smallest count was probably just brought in and has yet to be used.</p>\n\t</li>\n</ul>\n"
          ]
        },
        {
          "tag_line": "Operating System - I/O Hardware",
          "details": [
            "<h2>Operating System - I/O Hardware</h2>\n\n<p>One of the important jobs of an Operating System is to manage various I/O devices including mouse, keyboards, touch pad, disk drives, display adapters, USB devices, Bit-mapped screen, LED, Analog-to-digital converter, On/off switch, network connections, audio I/O, printers etc.</p>\n\n<p>An I/O system is required to take an application I/O request and send it to the physical device, then take whatever response comes back from the device and send it to the application. I/O devices can be divided into two categories &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Block devices</b> &minus; A block device is one with which the driver communicates by sending entire blocks of data. For example, Hard disks, USB cameras, Disk-On-Key etc.</p>\n\t</li>\n\t<li>\n\t<p><b>Character devices</b> &minus; A character device is one with which the driver communicates by sending and receiving single characters (bytes, octets). For example, serial ports, parallel ports, sounds cards etc</p>\n\t</li>\n</ul>\n\n<h2>Device Controllers</h2>\n\n<p>Device drivers are software modules that can be plugged into an OS to handle a particular device. Operating System takes help from device drivers to handle all I/O devices.</p>\n\n<p>The Device Controller works like an interface between a device and a device driver. I/O units (Keyboard, mouse, printer, etc.) typically consist of a mechanical component and an electronic component where electronic component is called the device controller.</p>\n\n<p>There is always a device controller and a device driver for each device to communicate with the Operating Systems. A device controller may be able to handle multiple devices. As an interface its main task is to convert serial bit stream to block of bytes, perform error correction as necessary.</p>\n\n<p>Any device connected to the computer is connected by a plug and socket, and the socket is connected to a device controller. Following is a model for connecting the CPU, memory, controllers, and I/O devices where CPU and device controllers all use a common bus for communication.</p>\n\n<p><img alt=\"Device Controllers\" src=\"https://www.tutorialspoint.com/operating_system/images/device_controllers.jpg\" /></p>\n\n<h2>Synchronous vs asynchronous I/O</h2>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Synchronous I/O</b> &minus; In this scheme CPU execution waits while I/O proceeds</p>\n\t</li>\n\t<li>\n\t<p><b>Asynchronous I/O</b> &minus; I/O proceeds concurrently with CPU execution</p>\n\t</li>\n</ul>\n\n<h2>Communication to I/O Devices</h2>\n\n<p>The CPU must have a way to pass information to and from an I/O device. There are three approaches available to communicate with the CPU and Device.</p>\n\n<ul class=\"list\">\n\t<li>Special Instruction I/O</li>\n\t<li>Memory-mapped I/O</li>\n\t<li>Direct memory access (DMA)</li>\n</ul>\n\n<h3>Special Instruction I/O</h3>\n\n<p>This uses CPU instructions that are specifically made for controlling I/O devices. These instructions typically allow data to be sent to an I/O device or read from an I/O device.</p>\n\n<h3>Memory-mapped I/O</h3>\n\n<p>When using memory-mapped I/O, the same address space is shared by memory and I/O devices. The device is connected directly to certain main memory locations so that I/O device can transfer block of data to/from memory without going through CPU.</p>\n\n<p><img alt=\"Memory-mapped I/O\" src=\"https://www.tutorialspoint.com/operating_system/images/memory_mapped_io.jpg\" /></p>\n\n<p>While using memory mapped IO, OS allocates buffer in memory and informs I/O device to use that buffer to send data to the CPU. I/O device operates asynchronously with CPU, interrupts CPU when finished.</p>\n\n<p>The advantage to this method is that every instruction which can access memory can be used to manipulate an I/O device. Memory mapped IO is used for most high-speed I/O devices like disks, communication interfaces.</p>\n\n<h2>Direct Memory Access (DMA)</h2>\n\n<p>Slow devices like keyboards will generate an interrupt to the main CPU after each byte is transferred. If a fast device such as a disk generated an interrupt for each byte, the operating system would spend most of its time handling these interrupts. So a typical computer uses direct memory access (DMA) hardware to reduce this overhead.</p>\n\n<p>Direct Memory Access (DMA) means CPU grants I/O module authority to read from or write to memory without involvement. DMA module itself controls exchange of data between main memory and the I/O device. CPU is only involved at the beginning and end of the transfer and interrupted only after entire block has been transferred.</p>\n\n<p>Direct Memory Access needs a special hardware called DMA controller (DMAC) that manages the data transfers and arbitrates access to the system bus. The controllers are programmed with source and destination pointers (where to read/write the data), counters to track the number of transferred bytes, and settings, which includes I/O and memory types, interrupts and states for the CPU cycles.</p>\n\n<p><img alt=\"DMA\" src=\"https://www.tutorialspoint.com/operating_system/images/dma.jpg\" /></p>\n\n<p>The operating system uses the DMA hardware as follows &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%;\">Step</th>\n\t\t\t<th style=\"text-align:center\">Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>Device driver is instructed to transfer disk data to a buffer address X.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>Device driver then instruct disk controller to transfer data to buffer.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>Disk controller starts DMA transfer.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>Disk controller sends each byte to DMA controller.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>DMA controller transfers bytes to buffer, increases the memory address, decreases the counter C until C becomes zero.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>When C becomes zero, DMA interrupts CPU to signal transfer completion.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Polling vs Interrupts I/O</h2>\n\n<p>A computer must have a way of detecting the arrival of any type of input. There are two ways that this can happen, known as <b>polling</b> and <b>interrupts</b>. Both of these techniques allow the processor to deal with events that can happen at any time and that are not related to the process it is currently running.</p>\n\n<h3>Polling I/O</h3>\n\n<p>Polling is the simplest way for an I/O device to communicate with the processor. The process of periodically checking status of the device to see if it is time for the next I/O operation, is called polling. The I/O device simply puts the information in a Status register, and the processor must come and get the information.</p>\n\n<p>Most of the time, devices will not require attention and when one does it will have to wait until it is next interrogated by the polling program. This is an inefficient method and much of the processors time is wasted on unnecessary polls.</p>\n\n<p>Compare this method to a teacher continually asking every student in a class, one after another, if they need help. Obviously the more efficient method would be for a student to inform the teacher whenever they require assistance.</p>\n\n<h3>Interrupts I/O</h3>\n\n<p>An alternative scheme for dealing with I/O is the interrupt-driven method. An interrupt is a signal to the microprocessor from a device that requires attention.</p>\n\n<p>A device controller puts an interrupt signal on the bus when it needs CPU&rsquo;s attention when CPU receives an interrupt, It saves its current state and invokes the appropriate interrupt handler using the interrupt vector (addresses of OS routines to handle various events). When the interrupting device has been dealt with, the CPU continues with its original task as if it had never been interrupted.</p>\n"
          ]
        },
        {
          "tag_line": "Operating System - I/O Softwares",
          "details": [
            "<h2>Operating System - I/O Softwares</h2>\n\n<p>I/O software is often organized in the following layers &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>User Level Libraries</b> &minus; This provides simple interface to the user program to perform input and output. For example, <b>stdio</b> is a library provided by C and C++ programming languages.</p>\n\t</li>\n\t<li>\n\t<p><b>Kernel Level Modules</b> &minus; This provides device driver to interact with the device controller and device independent I/O modules used by the device drivers.</p>\n\t</li>\n\t<li>\n\t<p><b>Hardware</b> &minus; This layer includes actual hardware and hardware controller which interact with the device drivers and makes hardware alive.</p>\n\t</li>\n</ul>\n\n<p>A key concept in the design of I/O software is that it should be device independent where it should be possible to write programs that can access any I/O device without having to specify the device in advance. For example, a program that reads a file as input should be able to read a file on a floppy disk, on a hard disk, or on a CD-ROM, without having to modify the program for each different device.</p>\n\n<p><img alt=\"I/O Softwares\" src=\"https://www.tutorialspoint.com/operating_system/images/io_software.jpg\" /></p>\n\n<h2>Device Drivers</h2>\n\n<p>Device drivers are software modules that can be plugged into an OS to handle a particular device. Operating System takes help from device drivers to handle all I/O devices. Device drivers encapsulate device-dependent code and implement a standard interface in such a way that code contains device-specific register reads/writes. Device driver, is generally written by the device&#39;s manufacturer and delivered along with the device on a CD-ROM.</p>\n\n<p>A device driver performs the following jobs &minus;</p>\n\n<ul class=\"list\">\n\t<li>To accept request from the device independent software above to it.</li>\n\t<li>Interact with the device controller to take and give I/O and perform required error handling</li>\n\t<li>Making sure that the request is executed successfully</li>\n</ul>\n\n<p>How a device driver handles a request is as follows: Suppose a request comes to read a block N. If the driver is idle at the time a request arrives, it starts carrying out the request immediately. Otherwise, if the driver is already busy with some other request, it places the new request in the queue of pending requests.</p>\n\n<h2>Interrupt handlers</h2>\n\n<p>An interrupt handler, also known as an interrupt service routine or ISR, is a piece of software or more specifically a callback function in an operating system or more specifically in a device driver, whose execution is triggered by the reception of an interrupt.</p>\n\n<p>When the interrupt happens, the interrupt procedure does whatever it has to in order to handle the interrupt, updates data structures and wakes up process that was waiting for an interrupt to happen.</p>\n\n<p>The interrupt mechanism accepts an address ─ a number that selects a specific interrupt handling routine/function from a small set. In most architectures, this address is an offset stored in a table called the interrupt vector table. This vector contains the memory addresses of specialized interrupt handlers.</p>\n\n<h2>Device-Independent I/O Software</h2>\n\n<p>The basic function of the device-independent software is to perform the I/O functions that are common to all devices and to provide a uniform interface to the user-level software. Though it is difficult to write completely device independent software but we can write some modules which are common among all the devices. Following is a list of functions of device-independent I/O Software &minus;</p>\n\n<ul class=\"list\">\n\t<li>Uniform interfacing for device drivers</li>\n\t<li>Device naming - Mnemonic names mapped to Major and Minor device numbers</li>\n\t<li>Device protection</li>\n\t<li>Providing a device-independent block size</li>\n\t<li>Buffering because data coming off a device cannot be stored in final destination.</li>\n\t<li>Storage allocation on block devices</li>\n\t<li>Allocation and releasing dedicated devices</li>\n\t<li>Error Reporting</li>\n</ul>\n\n<h2>User-Space I/O Software</h2>\n\n<p>These are the libraries which provide richer and simplified interface to access the functionality of the kernel or ultimately interactive with the device drivers. Most of the user-level I/O software consists of library procedures with some exception like spooling system which is a way of dealing with dedicated I/O devices in a multiprogramming system.</p>\n\n<p>I/O Libraries (e.g., stdio) are in user-space to provide an interface to the OS resident device-independent I/O SW. For example putchar(), getchar(), printf() and scanf() are example of user level I/O library stdio available in C programming.</p>\n\n<h2>Kernel I/O Subsystem</h2>\n\n<p>Kernel I/O Subsystem is responsible to provide many services related to I/O. Following are some of the services provided.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Scheduling</b> &minus; Kernel schedules a set of I/O requests to determine a good order in which to execute them. When an application issues a blocking I/O system call, the request is placed on the queue for that device. The Kernel I/O scheduler rearranges the order of the queue to improve the overall system efficiency and the average response time experienced by the applications.</p>\n\t</li>\n\t<li>\n\t<p><b>Buffering</b> &minus; Kernel I/O Subsystem maintains a memory area known as <b>buffer</b> that stores data while they are transferred between two devices or between a device with an application operation. Buffering is done to cope with a speed mismatch between the producer and consumer of a data stream or to adapt between devices that have different data transfer sizes.</p>\n\t</li>\n\t<li>\n\t<p><b>Caching</b> &minus; Kernel maintains cache memory which is region of fast memory that holds copies of data. Access to the cached copy is more efficient than access to the original.</p>\n\t</li>\n\t<li>\n\t<p><b>Spooling and Device Reservation</b> &minus; A spool is a buffer that holds output for a device, such as a printer, that cannot accept interleaved data streams. The spooling system copies the queued spool files to the printer one at a time. In some operating systems, spooling is managed by a system daemon process. In other operating systems, it is handled by an in kernel thread.</p>\n\t</li>\n\t<li>\n\t<p><b>Error Handling</b> &minus; An operating system that uses protected memory can guard against many kinds of hardware and application errors.</p>\n\t</li>\n</ul>\n\n<hr />"
          ]
        },
        {
          "tag_line": "Operating System - File System",
          "details": [
            "<h2>Operating System - File System</h2>\n\n<h2>File</h2>\n\n<p>A file is a named collection of related information that is recorded on secondary storage such as magnetic disks, magnetic tapes and optical disks. In general, a file is a sequence of bits, bytes, lines or records whose meaning is defined by the files creator and user.</p>\n\n<h2>File Structure</h2>\n\n<p>A File Structure should be according to a required format that the operating system can understand.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>A file has a certain defined structure according to its type.</p>\n\t</li>\n\t<li>\n\t<p>A text file is a sequence of characters organized into lines.</p>\n\t</li>\n\t<li>\n\t<p>A source file is a sequence of procedures and functions.</p>\n\t</li>\n\t<li>\n\t<p>An object file is a sequence of bytes organized into blocks that are understandable by the machine.</p>\n\t</li>\n\t<li>\n\t<p>When operating system defines different file structures, it also contains the code to support these file structure. Unix, MS-DOS support minimum number of file structure.</p>\n\t</li>\n</ul>\n\n<h2>File Type</h2>\n\n<p>File type refers to the ability of the operating system to distinguish different types of file such as text files source files and binary files etc. Many operating systems support many types of files. Operating system like MS-DOS and UNIX have the following types of files &minus;</p>\n\n<h3>Ordinary files</h3>\n\n<ul class=\"list\">\n\t<li>These are the files that contain user information.</li>\n\t<li>These may have text, databases or executable program.</li>\n\t<li>The user can apply various operations on such files like add, modify, delete or even remove the entire file.</li>\n</ul>\n\n<h3>Directory files</h3>\n\n<ul class=\"list\">\n\t<li>These files contain list of file names and other information related to these files.</li>\n</ul>\n\n<h3>Special files</h3>\n\n<ul class=\"list\">\n\t<li>These files are also known as device files.</li>\n\t<li>These files represent physical device like disks, terminals, printers, networks, tape drive etc.</li>\n</ul>\n\n<p>These files are of two types &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Character special files</b> &minus; data is handled character by character as in case of terminals or printers.</p>\n\t</li>\n\t<li>\n\t<p><b>Block special files</b> &minus; data is handled in blocks as in the case of disks and tapes.</p>\n\t</li>\n</ul>\n\n<h2>File Access Mechanisms</h2>\n\n<p>File access mechanism refers to the manner in which the records of a file may be accessed. There are several ways to access files &minus;</p>\n\n<ul class=\"list\">\n\t<li>Sequential access</li>\n\t<li>Direct/Random access</li>\n\t<li>Indexed sequential access</li>\n</ul>\n\n<h3>Sequential access</h3>\n\n<p>A sequential access is that in which the records are accessed in some sequence, i.e., the information in the file is processed in order, one record after the other. This access method is the most primitive one. Example: Compilers usually access files in this fashion.</p>\n\n<h3>Direct/Random access</h3>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Random access file organization provides, accessing the records directly.</p>\n\t</li>\n\t<li>\n\t<p>Each record has its own address on the file with by the help of which it can be directly accessed for reading or writing.</p>\n\t</li>\n\t<li>\n\t<p>The records need not be in any sequence within the file and they need not be in adjacent locations on the storage medium.</p>\n\t</li>\n</ul>\n\n<h3>Indexed sequential access</h3>\n\n<ul class=\"list\">\n\t<li>This mechanism is built up on base of sequential access.</li>\n\t<li>An index is created for each file which contains pointers to various blocks.</li>\n\t<li>Index is searched sequentially and its pointer is used to access the file directly.</li>\n</ul>\n\n<h2>Space Allocation</h2>\n\n<p>Files are allocated disk spaces by operating system. Operating systems deploy following three main ways to allocate disk space to files.</p>\n\n<ul class=\"list\">\n\t<li>Contiguous Allocation</li>\n\t<li>Linked Allocation</li>\n\t<li>Indexed Allocation</li>\n</ul>\n\n<h3>Contiguous Allocation</h3>\n\n<ul class=\"list\">\n\t<li>Each file occupies a contiguous address space on disk.</li>\n\t<li>Assigned disk address is in linear order.</li>\n\t<li>Easy to implement.</li>\n\t<li>External fragmentation is a major issue with this type of allocation technique.</li>\n</ul>\n\n<h3>Linked Allocation</h3>\n\n<ul class=\"list\">\n\t<li>Each file carries a list of links to disk blocks.</li>\n\t<li>Directory contains link / pointer to first block of a file.</li>\n\t<li>No external fragmentation</li>\n\t<li>Effectively used in sequential access file.</li>\n\t<li>Inefficient in case of direct access file.</li>\n</ul>\n\n<h3>Indexed Allocation</h3>\n\n<ul class=\"list\">\n\t<li>Provides solutions to problems of contiguous and linked allocation.</li>\n\t<li>A index block is created having all pointers to files.</li>\n\t<li>Each file has its own index block which stores the addresses of disk space occupied by the file.</li>\n\t<li>Directory contains the addresses of index blocks of files.</li>\n</ul>\n\n<hr />"
          ]
        },
        {
          "tag_line": "Operating System - Security",
          "details": [
            "<h2>Operating System - Security</h2>\n\n<p>Security refers to providing a protection system to computer system resources such as CPU, memory, disk, software programs and most importantly data/information stored in the computer system. If a computer program is run by an unauthorized user, then he/she may cause severe damage to computer or data stored in it. So a computer system must be protected against unauthorized access, malicious access to system memory, viruses, worms etc. We&#39;re going to discuss following topics in this chapter.</p>\n\n<ul class=\"list\">\n\t<li>Authentication</li>\n\t<li>One Time passwords</li>\n\t<li>Program Threats</li>\n\t<li>System Threats</li>\n\t<li>Computer Security Classifications</li>\n</ul>\n\n<h2>Authentication</h2>\n\n<p>Authentication refers to identifying each user of the system and associating the executing programs with those users. It is the responsibility of the Operating System to create a protection system which ensures that a user who is running a particular program is authentic. Operating Systems generally identifies/authenticates users using following three ways &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Username / Password</b> &minus; User need to enter a registered username and password with Operating system to login into the system.</p>\n\t</li>\n\t<li>\n\t<p><b>User card/key</b> &minus; User need to punch card in card slot, or enter key generated by key generator in option provided by operating system to login into the system.</p>\n\t</li>\n\t<li>\n\t<p><b>User attribute - fingerprint/ eye retina pattern/ signature</b> &minus; User need to pass his/her attribute via designated input device used by operating system to login into the system.</p>\n\t</li>\n</ul>\n\n<h2>One Time passwords</h2>\n\n<p>One-time passwords provide additional security along with normal authentication. In One-Time Password system, a unique password is required every time user tries to login into the system. Once a one-time password is used, then it cannot be used again. One-time password are implemented in various ways.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Random numbers</b> &minus; Users are provided cards having numbers printed along with corresponding alphabets. System asks for numbers corresponding to few alphabets randomly chosen.</p>\n\t</li>\n\t<li>\n\t<p><b>Secret key</b> &minus; User are provided a hardware device which can create a secret id mapped with user id. System asks for such secret id which is to be generated every time prior to login.</p>\n\t</li>\n\t<li>\n\t<p><b>Network password</b> &minus; Some commercial applications send one-time passwords to user on registered mobile/ email which is required to be entered prior to login.</p>\n\t</li>\n</ul>\n\n<h2>Program Threats</h2>\n\n<p>Operating system&#39;s processes and kernel do the designated task as instructed. If a user program made these process do malicious tasks, then it is known as <b>Program Threats</b>. One of the common example of program threat is a program installed in a computer which can store and send user credentials via network to some hacker. Following is the list of some well-known program threats.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Trojan Horse</b> &minus; Such program traps user login credentials and stores them to send to malicious user who can later on login to computer and can access system resources.</p>\n\t</li>\n\t<li>\n\t<p><b>Trap Door</b> &minus; If a program which is designed to work as required, have a security hole in its code and perform illegal action without knowledge of user then it is called to have a trap door.</p>\n\t</li>\n\t<li>\n\t<p><b>Logic Bomb</b> &minus; Logic bomb is a situation when a program misbehaves only when certain conditions met otherwise it works as a genuine program. It is harder to detect.</p>\n\t</li>\n\t<li>\n\t<p><b>Virus</b> &minus; Virus as name suggest can replicate themselves on computer system. They are highly dangerous and can modify/delete user files, crash systems. A virus is generatlly a small code embedded in a program. As user accesses the program, the virus starts getting embedded in other files/ programs and can make system unusable for user</p>\n\t</li>\n</ul>\n\n<h2>System Threats</h2>\n\n<p>System threats refers to misuse of system services and network connections to put user in trouble. System threats can be used to launch program threats on a complete network called as program attack. System threats creates such an environment that operating system resources/ user files are misused. Following is the list of some well-known system threats.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Worm</b> &minus; Worm is a process which can choked down a system performance by using system resources to extreme levels. A Worm process generates its multiple copies where each copy uses system resources, prevents all other processes to get required resources. Worms processes can even shut down an entire network.</p>\n\t</li>\n\t<li>\n\t<p><b>Port Scanning</b> &minus; Port scanning is a mechanism or means by which a hacker can detects system vulnerabilities to make an attack on the system.</p>\n\t</li>\n\t<li>\n\t<p><b>Denial of Service</b> &minus; Denial of service attacks normally prevents user to make legitimate use of the system. For example, a user may not be able to use internet if denial of service attacks browser&#39;s content settings.</p>\n\t</li>\n</ul>\n\n<h2>Computer Security Classifications</h2>\n\n<p>As per the U.S. Department of Defense Trusted Computer System&#39;s Evaluation Criteria there are four security classifications in computer systems: A, B, C, and D. This is widely used specifications to determine and model the security of systems and of security solutions. Following is the brief description of each classification.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%;\">S.N.</th>\n\t\t\t<th style=\"text-align:center\">Classification Type &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>\n\t\t\t<p><b>Type A</b></p>\n\n\t\t\t<p>Highest Level. Uses formal design specifications and verification techniques. Grants a high degree of assurance of process security.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>\n\t\t\t<p><b>Type B</b></p>\n\n\t\t\t<p>Provides mandatory protection system. Have all the properties of a class C2 system. Attaches a sensitivity label to each object. It is of three types.</p>\n\n\t\t\t<ul class=\"list\">\n\t\t\t\t<li>\n\t\t\t\t<p><b>B1</b> &minus; Maintains the security label of each object in the system. Label is used for making decisions to access control.</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t<p><b>B2</b> &minus; Extends the sensitivity labels to each system resource, such as storage objects, supports covert channels and auditing of events.</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t<p><b>B3</b> &minus; Allows creating lists or user groups for access-control to grant access or revoke access to a given named object.</p>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>\n\t\t\t<p><b>Type C</b></p>\n\n\t\t\t<p>Provides protection and user accountability using audit capabilities. It is of two types.</p>\n\n\t\t\t<ul class=\"list\">\n\t\t\t\t<li>\n\t\t\t\t<p><b>C1</b> &minus; Incorporates controls so that users can protect their private information and keep other users from accidentally reading / deleting their data. UNIX versions are mostly Cl class.</p>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t<p><b>C2</b> &minus; Adds an individual-level access control to the capabilities of a Cl level system.</p>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>\n\t\t\t<p><b>Type D</b></p>\n\n\t\t\t<p>Lowest level. Minimum protection. MS-DOS, Window 3.1 fall in this category.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },
        {
          "tag_line": "Operating System - Linux",
          "details": [
            "<h2>Operating System - Linux</h2>\n\n<p>Linux is one of popular version of UNIX operating System. It is open source as its source code is freely available. It is free to use. Linux was designed considering UNIX compatibility. Its functionality list is quite similar to that of UNIX.</p>\n\n<h2>Components of Linux System</h2>\n\n<p>Linux Operating System has primarily three components</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Kernel</b> &minus; Kernel is the core part of Linux. It is responsible for all major activities of this operating system. It consists of various modules and it interacts directly with the underlying hardware. Kernel provides the required abstraction to hide low level hardware details to system or application programs.</p>\n\t</li>\n\t<li>\n\t<p><b>System Library</b> &minus; System libraries are special functions or programs using which application programs or system utilities accesses Kernel&#39;s features. These libraries implement most of the functionalities of the operating system and do not requires kernel module&#39;s code access rights.</p>\n\t</li>\n\t<li>\n\t<p><b>System Utility</b> &minus; System Utility programs are responsible to do specialized, individual level tasks.</p>\n\t</li>\n</ul>\n\n<p><img alt=\"Linux Operating System\" src=\"https://www.tutorialspoint.com/operating_system/images/linux_os.jpg\" /></p>\n\n<h2>Kernel Mode vs User Mode</h2>\n\n<p>Kernel component code executes in a special privileged mode called <b>kernel mode</b> with full access to all resources of the computer. This code represents a single process, executes in single address space and do not require any context switch and hence is very efficient and fast. Kernel runs each processes and provides system services to processes, provides protected access to hardware to processes.</p>\n\n<p>Support code which is not required to run in kernel mode is in System Library. User programs and other system programs works in <b>User Mode</b> which has no access to system hardware and kernel code. User programs/ utilities use System libraries to access Kernel functions to get system&#39;s low level tasks.</p>\n\n<h2>Basic Features</h2>\n\n<p>Following are some of the important features of Linux Operating System.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Portable</b> &minus; Portability means software can works on different types of hardware in same way. Linux kernel and application programs supports their installation on any kind of hardware platform.</p>\n\t</li>\n\t<li>\n\t<p><b>Open Source</b> &minus; Linux source code is freely available and it is community based development project. Multiple teams work in collaboration to enhance the capability of Linux operating system and it is continuously evolving.</p>\n\t</li>\n\t<li>\n\t<p><b>Multi-User</b> &minus; Linux is a multiuser system means multiple users can access system resources like memory/ ram/ application programs at same time.</p>\n\t</li>\n\t<li>\n\t<p><b>Multiprogramming</b> &minus; Linux is a multiprogramming system means multiple applications can run at same time.</p>\n\t</li>\n\t<li>\n\t<p><b>Hierarchical File System</b> &minus; Linux provides a standard file structure in which system files/ user files are arranged.</p>\n\t</li>\n\t<li>\n\t<p><b>Shell</b> &minus; Linux provides a special interpreter program which can be used to execute commands of the operating system. It can be used to do various types of operations, call application programs. etc.</p>\n\t</li>\n\t<li>\n\t<p><b>Security</b> &minus; Linux provides user security using authentication features like password protection/ controlled access to specific files/ encryption of data.</p>\n\t</li>\n</ul>\n\n<h2>Architecture</h2>\n\n<p>The following illustration shows the architecture of a Linux system &minus;</p>\n\n<p><img alt=\"Linux Operating System Architecture\" src=\"https://www.tutorialspoint.com/operating_system/images/linux_architecture.jpg\" /></p>\n\n<p>The architecture of a Linux System consists of the following layers &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Hardware layer</b> &minus; Hardware consists of all peripheral devices (RAM/ HDD/ CPU etc).</p>\n\t</li>\n\t<li>\n\t<p><b>Kernel</b> &minus; It is the core component of Operating System, interacts directly with hardware, provides low level services to upper layer components.</p>\n\t</li>\n\t<li>\n\t<p><b>Shell</b> &minus; An interface to kernel, hiding complexity of kernel&#39;s functions from users. The shell takes commands from the user and executes kernel&#39;s functions.</p>\n\t</li>\n\t<li>\n\t<p><b>Utilities</b> &minus; Utility programs that provide the user most of the functionalities of an operating systems.</p>\n\t</li>\n</ul>\n"
          ]
        }
      ]
    },

    {
      "title": "Java 9",
      "content": [
        {
          "tag_line": "Java 9 - Overview",

          "details": [
            "<h2>Java 9 - Overview</h2>\n\n<p>JAVA 9 (aka jdk 1.9) is a major release of JAVA programming language development. Its initial version was released on 21 Sep 2017. The main goals of Java 9 release are &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>To make JDK and Java Standard Edition platform modular based in the sense that it can be scalled down to small computing devices well.</p>\n\t</li>\n\t<li>\n\t<p>To improve the overall security of the JDK and Java Implementations.</p>\n\t</li>\n\t<li>\n\t<p>To make build process and maintainance of java code libraries and large applications easy for for JAVA SE and EE platforms.</p>\n\t</li>\n\t<li>\n\t<p>To design and implement a standard module system for the Java Platform which can be applied on both Platform and JDK easily.</p>\n\t</li>\n</ul>\n\n<h2>New Features</h2>\n\n<p>There are 90+ enhancements added to Java 8, the most significant ones are mentioned below &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Module</b> &minus; A new kind of Java programing component introduced as module, which is a named, self-describing collection of code and data.</p>\n\t</li>\n\t<li>\n\t<p><b>REPL (JShell)</b> &minus; Read-Eval-Print Loop (REPL) capability added to the Java platform.</p>\n\t</li>\n\t<li>\n\t<p><b>HTTP 2 Client</b> &minus; new HTTPClient API supporting websockets and HTTP 2 streams and server push features.</p>\n\t</li>\n\t<li>\n\t<p><b>Improved JavaDocs</b> &minus; Supports HTML5 output generation. Provides a search box to generated API documentation.</p>\n\t</li>\n\t<li>\n\t<p><b>Multirelease JAR</b> &minus; Enhances the JAR format so that multiple, Java release-specific versions of class files can coexist in a single archive.</p>\n\t</li>\n\t<li>\n\t<p><b>Collection Factory Methods</b> &minus; New static factory methods for List, Set, and Map interfaces to create immutable instances of those collections.</p>\n\t</li>\n\t<li>\n\t<p><b>Private Interface Methods</b> &minus; Enhanced interfaces with private and private static methods.</p>\n\t</li>\n\t<li>\n\t<p><b>Process API Improvements</b> &minus; Improved API to control and manage operating system processes.</p>\n\t</li>\n\t<li>\n\t<p><b>Stream API Improvements</b> &minus; Enhanced security and robustness by allowing incoming streams of object-serialization data to be filtered.</p>\n\t</li>\n\t<li>\n\t<p><b>Try With Resources improvement</b> &minus; Now final variables can be used as resources in the try-with-resources statement.</p>\n\t</li>\n\t<li>\n\t<p><b>Enhanced @Deprecated Annotation</b> &minus; @Deprecated annotation revamped to provide more information about the status and intended disposition of an API.</p>\n\t</li>\n\t<li>\n\t<p><b>Inner Class Diamond Operator</b> &minus; Allow the diamond operator to be used with anonymous classes if the argument type of the inferred type can be denoted.</p>\n\t</li>\n\t<li>\n\t<p><b>Optional Class Improvements</b> &minus; New useful methods are added to java.util.Optional class.</p>\n\t</li>\n\t<li>\n\t<p><b>Multiresolution Image API</b> &minus; Supports encapsulation of a set of images with different resolutions into a single multiresolution image.</p>\n\t</li>\n\t<li>\n\t<p><b>CompletableFuture API improvements</b> &minus; The asynchronous mechanisms of the CompletableFuture class can perform an action when the process exits with ProcessHandle.onExit method.</p>\n\t</li>\n\t<li>\n\t<p><b>Lightweight JSON</b> &minus; A lightweight API introduced to consume and generating documents and data streams via json in java 9.</p>\n\t</li>\n\t<li>\n\t<p><b>Reactive Streams API</b> &minus; A new Reactive Streams API in Java SE 9 has been introduced to support reactive programming in java 9.</p>\n\t</li>\n</ul>\n"
          ]
        },
        {
          "tag_line": "Java 9 - Module System",

          "details": [
            "<h2>Java 9 - Module System</h2>\n\n<p>Java 9, a new kind of programming component called module has been introduced. A module is a self-describing collection of code and data and has a name to identify it.</p>\n\n<h2>Features</h2>\n\n<p>With the Modules component, following enhancements has been added in Java 9 &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>A new optional phase,link time, is introduced. This phase is in-between compile time and run time. During this phase, a set of modules can be assembled and optimized, making a custom runtime image using jlink tool.</p>\n\t</li>\n\t<li>\n\t<p>javac, jlink, and java have additional options to specify module paths, which further locate definitions of modules.</p>\n\t</li>\n\t<li>\n\t<p>JAR format updated as modular JAR, which contains module-info.class file in its root directory.</p>\n\t</li>\n\t<li>\n\t<p>JMOD format introduced, a packaging format (similar to JAR) which can include native code and configuration files.</p>\n\t</li>\n</ul>\n\n<h2>Creating Module</h2>\n\n<p>Following the steps to create a module say com.tutorialspoint.greetings.</p>\n\n<h3>Step 1</h3>\n\n<p>Create a folder C:\\&gt;JAVA\\src. Now create a folder com.tutorialspoint.greetings which is same as the name of module we&#39;re creating.</p>\n\n<h3>Step 2</h3>\n\n<p>Create module-info.java in C:\\&gt;JAVA\\src\\com.tutorialspoint.greetings folder with following code.</p>\n\n<p><i>module-info.java</i></p>\n\n<pre class=\"result notranslate\">\nmodule com.tutorialspoint.greetings { }\n</pre>\n\n<p>module-info.java is the file which is used to create module. In this step we&#39;ve created a module named com.tutorialspoint.greetings. By convention this file should reside in the folder whose name is same as module name.</p>\n\n<h3>Step 3</h3>\n\n<p>Add the source code in the module. Create Java9Tester.java in C:\\&gt;JAVA\\src\\com.tutorialspoint.greetings\\com\\ tutorialspoint\\greetings folder with following code.</p>\n\n<p><i>Java9Tester.java</i></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"kwd\">package</span><span class=\"pln\"> com</span><span class=\"pun\">.</span><span class=\"pln\">tutorialspoint</span><span class=\"pun\">.</span><span class=\"pln\">greetings</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Java9Tester</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pun\">[]</span><span class=\"pln\"> args</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"kwd\">out</span><span class=\"pun\">.</span><span class=\"pln\">println</span><span class=\"pun\">(</span><span class=\"str\">&quot;Hello World!&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>By convention, the source code of a module to lie in same directory which is the name of the module.</p>\n\n<h3>Step 4</h3>\n\n<p>Create a folder C:\\&gt;JAVA\\mods. Now create a folder com.tutorialspoint.greetings which is same as the name of module we&#39;ve created. Now compile the module to mods directory.</p>\n\n<pre class=\"result notranslate\">\nC:/ &gt; JAVA &gt; javac -d mods/com.tutorialspoint.greetings \n   src/com.tutorialspoint.greetings/module-info.java \n   src/com.tutorialspoint.greetings/com/tutorialspoint/greetings/Java9Tester.java\n</pre>\n\n<h3>Step 5</h3>\n\n<p>Let&#39;s run the module to see the result. Run the following command.</p>\n\n<pre class=\"result notranslate\">\nC:/&gt;JAVA&gt;java --module-path mods -m com.tutorialspoint.greetings/com.tutorialspoint.greetings.Java9Tester\n</pre>\n\n<p>Here module-path provides the module location as mods and -m signifies the main module.</p>\n\n<h2>Output</h2>\n\n<p>It will print the following output on console.</p>\n"
          ]
        },
        {
          "tag_line": "Java 9 - REPL (JShell)",

          "details": [
            "<h2>Java 9 - REPL (JShell)</h2>\n\n<p>REPL stands for Read-Eval-Print Loop. With JShell, java has REPL capability. Using REPL, we can code and test java based logic without compiling using javac and see the result of calculations directly.</p>\n\n<h2>Running JShell</h2>\n\n<p>Open command prompt and type jshell.</p>\n\n<pre class=\"result notranslate\">\n$ jshell\n|  Welcome to JShell -- Version 9-ea\n|  For an introduction type: /help intro\njshell&gt;\n</pre>\n\n<h2>Viewing JShell commands</h2>\n\n<p>Type /help once jshell command starts running.</p>\n\n<pre class=\"result notranslate\">\njshell&gt; /help\n|  Type a Java language expression, statement, or declaration.\n|  Or type one of the following commands:\n|  /list [&lt;name or id&gt;|-all|-start]\n|  list the source you have typed\n|  /edit &lt;name or id&gt;\n|  edit a source entry referenced by name or id\n|  /drop &lt;name or id&gt;\n|  delete a source entry referenced by name or id\n|  /save [-all|-history|-start] &lt;file&gt;\n|  Save snippet source to a file.\n|  /open &lt;file&gt;\n|  open a file as source input\n|  /vars [&lt;name or id&gt;|-all|-start]\n|  list the declared variables and their values\n|  /methods [&lt;name or id&gt;|-all|-start]\n|  list the declared methods and their signatures\n|  /types [&lt;name or id&gt;|-all|-start]\n|  list the declared types\n|  /imports \n|  list the imported items\n</pre>\n\n<h2>Running JShell command</h2>\n\n<p>Type /imports once jshell command starts running and see the used imports.</p>\n\n<pre class=\"result notranslate\">\njshell&gt; /imports\n|    import java.io.*\n|    import java.math.*\n|    import java.net.*\n|    import java.nio.file.*\n|    import java.util.*\n|    import java.util.concurrent.*\n|    import java.util.function.*\n|    import java.util.prefs.*\n|    import java.util.regex.*\n|    import java.util.stream.*\njshell&gt;\n</pre>\n\n<h2>Running Calculations in JShell.</h2>\n\n<p>Try running simple calculations in JShell.</p>\n\n<pre class=\"result notranslate\">\njshell&gt; 3+1\n$1 ==&gt; 4\njshell&gt; 13%7\n$2 ==&gt; 6\njshell&gt; $2\n$2 ==&gt; 6\njshell&gt;\n</pre>\n\n<h2>Creating and using functions in JShell</h2>\n\n<p>Create a function doubled() to take int and return its doubled value.</p>\n\n<pre class=\"result notranslate\">\njshell&gt; int doubled(int i){ return i*2;}\n|  created method doubled(int)\njshell&gt; doubled(6)\n$3 ==&gt; 12\njshell&gt;\n</pre>\n\n<h2>Exiting JShell</h2>\n\n<p>Type /exit.</p>\n\n<pre class=\"result notranslate\">\njshell&gt; /exit\n| Goodbye\n</pre>\n"
          ]
        },
        {
          "tag_line": "Java 9 - Process API Improvements",

          "details": [
            "<h2>Java 9 - Process API Improvements</h2>\n\n<p>In Java 9 Process API which is responsible to control and manage operating system processes has been improved considerably. ProcessHandle Class now provides process&#39;s native process ID, start time, accumulated CPU time, arguments, command, user, parent process, and descendants. ProcessHandle class also provides method to check processes&#39; liveness and to destroy processes. It has onExit method, the CompletableFuture class can perform action asynchronously when process exits.</p>\n\n<h3>Tester.java</h3>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">time</span><span class=\"pun\">.</span><span class=\"typ\">ZoneId</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">util</span><span class=\"pun\">.</span><span class=\"pln\">stream</span><span class=\"pun\">.</span><span class=\"typ\">Stream</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">util</span><span class=\"pun\">.</span><span class=\"pln\">stream</span><span class=\"pun\">.</span><span class=\"typ\">Collectors</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">IOException</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Tester</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pun\">[]</span><span class=\"pln\"> args</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">throws</span><span class=\"pln\"> </span><span class=\"typ\">IOException</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      </span><span class=\"typ\">ProcessBuilder</span><span class=\"pln\"> pb </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">ProcessBuilder</span><span class=\"pun\">(</span><span class=\"str\">&quot;notepad.exe&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n      </span><span class=\"typ\">String</span><span class=\"pln\"> np </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&quot;Not Present&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"typ\">Process</span><span class=\"pln\"> p </span><span class=\"pun\">=</span><span class=\"pln\"> pb</span><span class=\"pun\">.</span><span class=\"pln\">start</span><span class=\"pun\">();</span><span class=\"pln\">\n      </span><span class=\"typ\">ProcessHandle</span><span class=\"pun\">.</span><span class=\"typ\">Info</span><span class=\"pln\"> info </span><span class=\"pun\">=</span><span class=\"pln\"> p</span><span class=\"pun\">.</span><span class=\"pln\">info</span><span class=\"pun\">();</span><span class=\"pln\">\n      </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"kwd\">out</span><span class=\"pun\">.</span><span class=\"pln\">printf</span><span class=\"pun\">(</span><span class=\"str\">&quot;Process ID : %s%n&quot;</span><span class=\"pun\">,</span><span class=\"pln\"> p</span><span class=\"pun\">.</span><span class=\"pln\">pid</span><span class=\"pun\">());</span><span class=\"pln\">\n      </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"kwd\">out</span><span class=\"pun\">.</span><span class=\"pln\">printf</span><span class=\"pun\">(</span><span class=\"str\">&quot;Command name : %s%n&quot;</span><span class=\"pun\">,</span><span class=\"pln\"> info</span><span class=\"pun\">.</span><span class=\"pln\">command</span><span class=\"pun\">().</span><span class=\"pln\">orElse</span><span class=\"pun\">(</span><span class=\"pln\">np</span><span class=\"pun\">));</span><span class=\"pln\">\n      </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"kwd\">out</span><span class=\"pun\">.</span><span class=\"pln\">printf</span><span class=\"pun\">(</span><span class=\"str\">&quot;Command line : %s%n&quot;</span><span class=\"pun\">,</span><span class=\"pln\"> info</span><span class=\"pun\">.</span><span class=\"pln\">commandLine</span><span class=\"pun\">().</span><span class=\"pln\">orElse</span><span class=\"pun\">(</span><span class=\"pln\">np</span><span class=\"pun\">));</span><span class=\"pln\">\n\n      </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"kwd\">out</span><span class=\"pun\">.</span><span class=\"pln\">printf</span><span class=\"pun\">(</span><span class=\"str\">&quot;Start time: %s%n&quot;</span><span class=\"pun\">,</span><span class=\"pln\">\n         info</span><span class=\"pun\">.</span><span class=\"pln\">startInstant</span><span class=\"pun\">().</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">i </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> i</span><span class=\"pun\">.</span><span class=\"pln\">atZone</span><span class=\"pun\">(</span><span class=\"typ\">ZoneId</span><span class=\"pun\">.</span><span class=\"pln\">systemDefault</span><span class=\"pun\">())</span><span class=\"pln\">\n         </span><span class=\"pun\">.</span><span class=\"pln\">toLocalDateTime</span><span class=\"pun\">().</span><span class=\"pln\">toString</span><span class=\"pun\">()).</span><span class=\"pln\">orElse</span><span class=\"pun\">(</span><span class=\"pln\">np</span><span class=\"pun\">));</span><span class=\"pln\">\n\n      </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"kwd\">out</span><span class=\"pun\">.</span><span class=\"pln\">printf</span><span class=\"pun\">(</span><span class=\"str\">&quot;Arguments : %s%n&quot;</span><span class=\"pun\">,</span><span class=\"pln\">\n         info</span><span class=\"pun\">.</span><span class=\"pln\">arguments</span><span class=\"pun\">().</span><span class=\"pln\">map</span><span class=\"pun\">(</span><span class=\"pln\">a </span><span class=\"pun\">-&gt;</span><span class=\"pln\"> </span><span class=\"typ\">Stream</span><span class=\"pun\">.</span><span class=\"pln\">of</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">).</span><span class=\"pln\">collect</span><span class=\"pun\">(</span><span class=\"pln\">\n         </span><span class=\"typ\">Collectors</span><span class=\"pun\">.</span><span class=\"pln\">joining</span><span class=\"pun\">(</span><span class=\"str\">&quot; &quot;</span><span class=\"pun\">))).</span><span class=\"pln\">orElse</span><span class=\"pun\">(</span><span class=\"pln\">np</span><span class=\"pun\">));</span><span class=\"pln\">\n\n      </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"kwd\">out</span><span class=\"pun\">.</span><span class=\"pln\">printf</span><span class=\"pun\">(</span><span class=\"str\">&quot;User : %s%n&quot;</span><span class=\"pun\">,</span><span class=\"pln\"> info</span><span class=\"pun\">.</span><span class=\"pln\">user</span><span class=\"pun\">().</span><span class=\"pln\">orElse</span><span class=\"pun\">(</span><span class=\"pln\">np</span><span class=\"pun\">));</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\"> \n</span><span class=\"pun\">}</span></pre>\n\n<h2>Output</h2>\n\n<p>You will see the following output.</p>\n\n<pre class=\"result notranslate\">\nProcess ID : 5800\nCommand name : C:\\Windows\\System32\\notepad.exe\nCommand line : Not Present\nStart time: 2017-11-04T21:35:03.626\nArguments : Not Present\nUser: administrator\n</pre>\n"
          ]
        },
        {
          "tag_line": "Java 9 - Try With Resources improvement",

          "details": [
            "<h1>Java 9 - Try With Resources improvement</h1>\n\n<p>The try-with-resources statement is a try statement with one or more resources duly declared. Here resource is an object which should be closed once it is no more required. The try-with-resources statement ensures that each resource is closed after the requirement finishes. Any object implementing java.lang.AutoCloseable or java.io.Closeable, interface can be used as a resource.</p>\n\n<p>Prior to Java 9, resources are to be declared before try or inside try statement as shown below in given example. In this example, we&#39;ll use BufferedReader as resource to read a string and then BufferedReader is to be closed.</p>\n\n<h2>Tester.java</h2>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/YTdfcl\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">BufferedReader</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">IOException</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">Reader</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">StringReader</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Tester</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pun\">[]</span><span class=\"pln\"> args</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">throws</span><span class=\"pln\"> </span><span class=\"typ\">IOException</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"kwd\">out</span><span class=\"pun\">.</span><span class=\"pln\">println</span><span class=\"pun\">(</span><span class=\"pln\">readData</span><span class=\"pun\">(</span><span class=\"str\">&quot;test&quot;</span><span class=\"pun\">));</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\"> \n   </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> readData</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pln\"> message</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">throws</span><span class=\"pln\"> </span><span class=\"typ\">IOException</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      </span><span class=\"typ\">Reader</span><span class=\"pln\"> inputString </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">StringReader</span><span class=\"pun\">(</span><span class=\"pln\">message</span><span class=\"pun\">);</span><span class=\"pln\">\n      </span><span class=\"typ\">BufferedReader</span><span class=\"pln\"> br </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">BufferedReader</span><span class=\"pun\">(</span><span class=\"pln\">inputString</span><span class=\"pun\">);</span><span class=\"pln\">\n      </span><span class=\"kwd\">try</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">BufferedReader</span><span class=\"pln\"> br1 </span><span class=\"pun\">=</span><span class=\"pln\"> br</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> br1</span><span class=\"pun\">.</span><span class=\"pln\">readLine</span><span class=\"pun\">();</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<h3>Output</h3>\n\n<pre class=\"result notranslate\">\ntest\n</pre>\n\n<p>Here we need to declare a resource br1 within try statment and then use it. In Java9, we don&#39;t need to declare br1 anymore and following program will give the same result.</p>\n\n<h2>Tester.java</h2>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">BufferedReader</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">IOException</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">Reader</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">StringReader</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Tester</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pun\">[]</span><span class=\"pln\"> args</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">throws</span><span class=\"pln\"> </span><span class=\"typ\">IOException</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"kwd\">out</span><span class=\"pun\">.</span><span class=\"pln\">println</span><span class=\"pun\">(</span><span class=\"pln\">readData</span><span class=\"pun\">(</span><span class=\"str\">&quot;test&quot;</span><span class=\"pun\">));</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\"> \n   </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> readData</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pln\"> message</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">throws</span><span class=\"pln\"> </span><span class=\"typ\">IOException</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      </span><span class=\"typ\">Reader</span><span class=\"pln\"> inputString </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">StringReader</span><span class=\"pun\">(</span><span class=\"pln\">message</span><span class=\"pun\">);</span><span class=\"pln\">\n      </span><span class=\"typ\">BufferedReader</span><span class=\"pln\"> br </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">BufferedReader</span><span class=\"pun\">(</span><span class=\"pln\">inputString</span><span class=\"pun\">);</span><span class=\"pln\">\n      </span><span class=\"kwd\">try</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">br</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> br</span><span class=\"pun\">.</span><span class=\"pln\">readLine</span><span class=\"pun\">();</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<h3>Output</h3>\n\n<pre class=\"result notranslate\">\ntest\n</pre>\n"
          ]
        },
        {
          "tag_line": "CompletableFuture API Improvements",

          "details": [
            "<h2>CompletableFuture API Improvements</h2>\n\n<p>CompletableFuture class was introduced in Java 8 to represent the Future which can be completed by setting its value and status explicity. It can be used as java.util.concurrent.CompletionStage. It supports dependent functions and actions which got triggered upon the future&#39;s completion. In java 9 CompletableFuture API has been enhanced further. Following are the relevant changes done to the API.</p>\n\n<ul class=\"list\">\n\t<li>Support for delays and timeouts.</li>\n\t<li>Improved support for subclassing.</li>\n\t<li>New factory methods added.</li>\n</ul>\n\n<h2>Support for delays and timeouts</h2>\n\n<pre class=\"result notranslate\">\npublic CompletableFuture&lt;T&gt; completeOnTimeout(T value, long timeout, TimeUnit unit)\n</pre>\n\n<p>This method completes this CompletableFuture with the given value if not otherwise completed before the given timeout.</p>\n\n<pre class=\"result notranslate\">\npublic CompletableFuture&lt;T&gt; orTimeout(long timeout, TimeUnit unit)\n</pre>\n\n<p>This method exceptionally completes this CompletableFuture with a TimeoutException if not otherwise completed before the given timeout.</p>\n\n<h2>Improved support for subclassing</h2>\n\n<pre class=\"result notranslate\">\npublic Executor defaultExecutor()\n</pre>\n\n<p>It returns the default Executor used for async methods that do not specify an Executor. This method may be overridden in subclasses to return an Executor to provide one independent thread as minimum.</p>\n\n<pre class=\"result notranslate\">\npublic &lt;U&gt; CompletableFuture&lt;U&gt; newIncompleteFuture()\n</pre>\n\n<p>Returns a new incomplete CompletableFuture of the type to be returned by a CompletionStage method. Subclasses of CompletableFuture class should override this method to return an instance of the same class as this CompletableFuture. The default implementation returns an instance of class CompletableFuture.</p>\n\n<h2>New factory Methods</h2>\n\n<pre class=\"result notranslate\">\npublic static &lt;U&gt; CompletableFuture&lt;U&gt; completedFuture(U value)\n</pre>\n\n<p>This factory method returns a new CompletableFuture which is already completed with the given value.</p>\n\n<pre class=\"result notranslate\">\npublic static &lt;U&gt; CompletionStage&lt;U&gt; completedStage(U value)\n</pre>\n\n<p>This factory method returns a new CompletionStage which is already completed with the given value and supports only those methods present in interface CompletionStage.</p>\n\n<pre class=\"result notranslate\">\npublic static &lt;U&gt; CompletionStage&lt;U&gt; failedStage(Throwable ex)\n</pre>\n\n<p>This factory method returns a new CompletionStage which is already completed exceptionally with the given exception and supports only those methods present in interface CompletionStage.</p>\n"
          ]
        },
        {
          "tag_line": "Java 9 - Miscellaneous features",

          "details": [
            "<h2>Java 9 - Miscellaneous features</h2>\n\n<p>Apart from mentioned features, with Java 9, a lot more enhancements are done to JDK platform. Some of them are listed below.</p>\n\n<ul class=\"list\">\n\t<li>GC (Garbage Collector) Improvements</li>\n\t<li>Stack-Walking API</li>\n\t<li>Filter Incoming Serialization Data</li>\n\t<li>Deprecate the Applet API</li>\n\t<li>Indify String Concatenation</li>\n\t<li>Enhanced Method Handles</li>\n\t<li>Java Platform Logging API and Service</li>\n\t<li>Compact Strings</li>\n\t<li>Parser API for Nashorn</li>\n</ul>\n"
          ]
        }
      ]
    },

    {
      "title": "TEMPLATE",
      "content": [
        {
          "tag_line": "TEMPLATE_ITEM",
          "details": [
            ""
          ]
        },
        {
          "tag_line": "TEMPLATE_ITEM",
          "details": [
            ""
          ]
        },
        {
          "tag_line": "TEMPLATE_ITEM",
          "details": [
            ""
          ]
        },
        {
          "tag_line": "TEMPLATE_ITEM",
          "details": [
            ""
          ]
        },
        {
          "tag_line": "TEMPLATE_ITEM",
          "details": [
            ""
          ]
        }
      ]
    },
    {
      "title": "Linux Basic ( Video Tutorial )",
      "content": [
        {
          "tag_line": "Linux - Introduction",
          "details": [
            "\n\n<object style=\"width:100%;height:100%;width: device-width,initial-scale=1; height: 575px; float: none; clear: both; margin: 2px auto;\" data=\"https://www.youtube.com/embed/xzEd3yojcHo\",>\n</object>\n\n"
          ]
        },
        {
          "tag_line": "Linux - Distributions",
          "details": [
            "\n\n<object style=\"width:100%;height:100%;width: device-width,initial-scale=1; height: 575px; float: none; clear: both; margin: 2px auto;\" data=\"https://www.youtube.com/embed/D2nTVOOxkq\",>\n</object>\n\n"
          ]
        },
        {
          "tag_line": "Linux - Directory Structure",
          "details": [
            "\n\n<object style=\"width:100%;height:100%;width: device-width,initial-scale=1; height: 575px; float: none; clear: both; margin: 2px auto;\" data=\"https://www.youtube.com/embed/W9bC-v3DHHE\",>\n</object>\n\n"
          ]
        },
        {
          "tag_line": "Linux - File Management",
          "details": [
            "\n\n<object style=\"width:100%;height:100%;width: device-width,initial-scale=1; height: 575px; float: none; clear: both; margin: 2px auto;\" data=\"https://www.youtube.com/embed/ZALT79IWtvU\",>\n</object>\n\n"
          ]
        },
        {
          "tag_line": "Linux - Creating Files",
          "details": [
            "\n\n<object style=\"width:100%;height:100%;width: device-width,initial-scale=1; height: 575px; float: none; clear: both; margin: 2px auto;\" data=\"https://www.youtube.com/embed/ODYVXpUlzyY\",>\n</object>\n\n"
          ]
        }

      ]
    }
  ]
}