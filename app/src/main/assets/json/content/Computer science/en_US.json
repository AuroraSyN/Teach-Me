{
  "items": [
    {
      "title": "C++ Basics",
      "content": [
        {
          "tag_line": "C++ Overview",
          "qType": "en_1",
          "details": [
            "<h2>C++ Overview</h2>\n\n<p>C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming.</p>\n\n<p>C++ is regarded as a <b>middle-level</b> language, as it comprises a combination of both high-level and low-level language features.</p>\n\n<p>C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey, as an enhancement to the C language and originally named C with Classes but later it was renamed C++ in 1983.</p>\n\n<p>C++ is a superset of C, and that virtually any legal C program is a legal C++ program.</p>\n\n<p><b>Note</b> &minus; A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time.</p>\n\n<h2>Object-Oriented Programming</h2>\n\n<p>C++ fully supports object-oriented programming, including the four pillars of object-oriented development &minus;</p>\n\n<ul class=\"list\">\n\t<li>Encapsulation</li>\n\t<li>Data hiding</li>\n\t<li>Inheritance</li>\n\t<li>Polymorphism</li>\n</ul>\n\n<h2>Standard Libraries</h2>\n\n<p>Standard C++ consists of three important parts &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The core language giving all the building blocks including variables, data types and literals, etc.</p>\n\t</li>\n\t<li>\n\t<p>The C++ Standard Library giving a rich set of functions manipulating files, strings, etc.</p>\n\t</li>\n\t<li>\n\t<p>The Standard Template Library (STL) giving a rich set of methods manipulating data structures, etc.</p>\n\t</li>\n</ul>\n\n<h2>The ANSI Standard</h2>\n\n<p>The ANSI standard is an attempt to ensure that C++ is portable; that code you write for Microsoft&#39;s compiler will compile without errors, using a compiler on a Mac, UNIX, a Windows box, or an Alpha.</p>\n\n<p>The ANSI standard has been stable for a while, and all the major C++ compiler manufacturers support the ANSI standard.</p>\n\n<h2>Learning C++</h2>\n\n<p>The most important thing while learning C++ is to focus on concepts.</p>\n\n<p>The purpose of learning a programming language is to become a better programmer; that is, to become more effective at designing and implementing new systems and at maintaining old ones.</p>\n\n<p>C++ supports a variety of programming styles. You can write in the style of Fortran, C, Smalltalk, etc., in any language. Each style can achieve its aims effectively while maintaining runtime and space efficiency.</p>\n\n<h2>Use of C++</h2>\n\n<p>C++ is used by hundreds of thousands of programmers in essentially every application domain.</p>\n\n<p>C++ is being highly used to write device drivers and other software that rely on direct manipulation of hardware under realtime constraints.</p>\n\n<p>C++ is widely used for teaching and research because it is clean enough for successful teaching of basic concepts.</p>\n\n<p>Anyone who has used either an Apple Macintosh or a PC running Windows has indirectly used C++ because the primary user interfaces of these systems are written in C++.</p>\n"
          ]
        },
        {
          "tag_line": "C++ Environment Setup",
          "qType": "en_1",
          "details": [
            "<h2>C++ Environment Setup</h2>\n\n<h2>Local Environment Setup</h2>\n\n<p>If you are still willing to set up your environment for C++, you need to have the following two softwares on your computer.</p>\n\n<h3>Text Editor</h3>\n\n<p>This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi.</p>\n\n<p>Name and version of text editor can vary on different operating systems. For example, Notepad will be used on Windows and vim or vi can be used on windows as well as Linux, or UNIX.</p>\n\n<p>The files you create with your editor are called source files and for C++ they typically are named with the extension .cpp, .cp, or .c.</p>\n\n<p>A text editor should be in place to start your C++ programming.</p>\n\n<h3>C++ Compiler</h3>\n\n<p>This is an actual C++ compiler, which will be used to compile your source code into final executable program.</p>\n\n<p>Most C++ compilers don&#39;t care what extension you give to your source code, but if you don&#39;t specify otherwise, many will use .cpp by default.</p>\n\n<p>Most frequently used and free available compiler is GNU C/C++ compiler, otherwise you can have compilers either from HP or Solaris if you have the respective Operating Systems.</p>\n\n<h2>Installing GNU C/C++ Compiler</h2>\n\n<h3>UNIX/Linux Installation</h3>\n\n<p>If you are using <b>Linux or UNIX</b> then check whether GCC is installed on your system by entering the following command from the command line &minus;</p>\n\n<pre class=\"result notranslate\">\n$ g++ -v\n</pre>\n\n<p>If you have installed GCC, then it should print a message such as the following &minus;</p>\n\n<pre class=\"result notranslate\">\nUsing built-in specs.\nTarget: i386-redhat-linux\nConfigured with: ../configure --prefix=/usr .......\nThread model: posix\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-46)\n</pre>\n\n<p>If GCC is not installed, then you will have to install it yourself using the detailed instructions available at <a href=\"https://gcc.gnu.org/install/\" target=\"_blank\">https://gcc.gnu.org/install/</a></p>\n\n<h3>Mac OS X Installation</h3>\n\n<p>If you use Mac OS X, the easiest way to obtain GCC is to download the Xcode development environment from Apple&#39;s website and follow the simple installation instructions.</p>\n\n<p>Xcode is currently available at <a href=\"https://developer.apple.com/technologies/tools/\" target=\"_blank\">developer.apple.com/technologies/tools/</a>.</p>\n\n<h3>Windows Installation</h3>\n\n<p>To install GCC at Windows you need to install MinGW. To install MinGW, go to the MinGW homepage, <a href=\"http://www.mingw.org\" target=\"_blank\">www.mingw.org</a>, and follow the link to the MinGW download page. Download the latest version of the MinGW installation program which should be named MinGW-&lt;version&gt;.exe.</p>\n\n<p>While installing MinGW, at a minimum, you must install gcc-core, gcc-g++, binutils, and the MinGW runtime, but you may wish to install more.</p>\n\n<p>Add the bin subdirectory of your MinGW installation to your <b>PATH</b> environment variable so that you can specify these tools on the command line by their simple names.</p>\n\n<p>When the installation is complete, you will be able to run gcc, g++, ar, ranlib, dlltool, and several other GNU tools from the Windows command line.</p>\n\n<hr />"
          ]
        },
        {
          "tag_line": "C++ Basic Syntax",
          "qType": "en_1",
          "details": [
            "<h2>C++ Basic Syntax</h2>\n\n<p>When we consider a C++ program, it can be defined as a collection of objects that communicate via invoking each other&#39;s methods. Let us now briefly look into what a class, object, methods, and instant variables mean.</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Object</b> &minus; Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors - wagging, barking, eating. An object is an instance of a class.</p>\n\t</li>\n\t<li>\n\t<p><b>Class</b> &minus; A class can be defined as a template/blueprint that describes the behaviors/states that object of its type support.</p>\n\t</li>\n\t<li>\n\t<p><b>Methods</b> &minus; A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.</p>\n\t</li>\n\t<li>\n\t<p><b>Instance Variables</b> &minus; Each object has its unique set of instance variables. An object&#39;s state is created by the values assigned to these instance variables.</p>\n\t</li>\n</ul>\n\n<h2>C++ Program Structure</h2>\n\n<p>Let us look at a simple code that would print the words <i>Hello World</i>.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/n4BVuS\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">// main() is where program execution begins.</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello World&quot;</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// prints Hello World</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>Let us look at the various parts of the above program &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>The C++ language defines several headers, which contain information that is either necessary or useful to your program. For this program, the header <b>&lt;iostream&gt;</b> is needed.</p>\n\t</li>\n\t<li>\n\t<p>The line <b>using namespace std;</b> tells the compiler to use the std namespace. Namespaces are a relatively recent addition to C++.</p>\n\t</li>\n\t<li>\n\t<p>The next line &#39;<b>// main() is where program execution begins.</b>&#39; is a single-line comment available in C++. Single-line comments begin with // and stop at the end of the line.</p>\n\t</li>\n\t<li>\n\t<p>The line <b>int main()</b> is the main function where program execution begins.</p>\n\t</li>\n\t<li>\n\t<p>The next line <b>cout &lt;&lt; &quot;Hello World&quot;;</b> causes the message &quot;Hello World&quot; to be displayed on the screen.</p>\n\t</li>\n\t<li>\n\t<p>The next line <b>return 0;</b> terminates main( )function and causes it to return the value 0 to the calling process.</p>\n\t</li>\n</ul>\n\n<h2>Compile and Execute C++ Program</h2>\n\n<p>Let&#39;s look at how to save the file, compile and run the program. Please follow the steps given below &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Open a text editor and add the code as above.</p>\n\t</li>\n\t<li>\n\t<p>Save the file as: hello.cpp</p>\n\t</li>\n\t<li>\n\t<p>Open a command prompt and go to the directory where you saved the file.</p>\n\t</li>\n\t<li>\n\t<p>Type &#39;g++ hello.cpp&#39; and press enter to compile your code. If there are no errors in your code the command prompt will take you to the next line and would generate a.out executable file.</p>\n\t</li>\n\t<li>\n\t<p>Now, type &#39;a.out&#39; to run your program.</p>\n\t</li>\n\t<li>\n\t<p>You will be able to see &#39; Hello World &#39; printed on the window.</p>\n\t</li>\n</ul>\n\n<pre class=\"result notranslate\">\n$ g++ hello.cpp\n$ ./a.out\nHello World\n</pre>\n\n<p>Make sure that g++ is in your path and that you are running it in the directory containing file hello.cpp.</p>\n\n<p>You can compile C/C++ programs using makefile. For more details, you can check our <a href=\"https://www.tutorialspoint.com/makefile/index.htm\" rel=\"nofollow\" target=\"_blank\">&#39;Makefile Tutorial&#39;</a>.</p>\n\n<h2>Semicolons and Blocks in C++</h2>\n\n<p>In C++, the semicolon is a statement terminator. That is, each individual statement must be ended with a semicolon. It indicates the end of one logical entity.</p>\n\n<p>For example, following are three different statements &minus;</p>\n\n<pre class=\"result notranslate\">\nx = y;\ny = y + 1;\nadd(x, y);\n</pre>\n\n<p>A block is a set of logically connected statements that are surrounded by opening and closing braces. For example &minus;</p>\n\n<pre class=\"result notranslate\">\n{\n   cout &lt;&lt; &quot;Hello World&quot;; // prints Hello World\n   return 0;\n}\n</pre>\n\n<p>C++ does not recognize the end of the line as a terminator. For this reason, it does not matter where you put a statement in a line. For example &minus;</p>\n\n<pre class=\"result notranslate\">\nx = y;\ny = y + 1;\nadd(x, y);\n</pre>\n\n<p>is the same as</p>\n\n<pre class=\"result notranslate\">\nx = y; y = y + 1; add(x, y);\n</pre>\n\n<h2>C++ Identifiers</h2>\n\n<p>A C++ identifier is a name used to identify a variable, function, class, module, or any other user-defined item. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9).</p>\n\n<p>C++ does not allow punctuation characters such as @, $, and % within identifiers. C++ is a case-sensitive programming language. Thus, <b>Manpower</b> and <b>manpower</b> are two different identifiers in C++.</p>\n\n<p>Here are some examples of acceptable identifiers &minus;</p>\n\n<pre class=\"result notranslate\">\nmohd       zara    abc   move_name  a_123\nmyname50   _temp   j     a23b9      retVal\n</pre>\n\n<h2>C++ Keywords</h2>\n\n<p>The following list shows the reserved words in C++. These reserved words may not be used as constant or variable or any other identifier names.</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>asm</td>\n\t\t\t<td>else</td>\n\t\t\t<td>new</td>\n\t\t\t<td>this</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>auto</td>\n\t\t\t<td>enum</td>\n\t\t\t<td>operator</td>\n\t\t\t<td>throw</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>bool</td>\n\t\t\t<td>explicit</td>\n\t\t\t<td>private</td>\n\t\t\t<td>true</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>break</td>\n\t\t\t<td>export</td>\n\t\t\t<td>protected</td>\n\t\t\t<td>try</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>case</td>\n\t\t\t<td>extern</td>\n\t\t\t<td>public</td>\n\t\t\t<td>typedef</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>catch</td>\n\t\t\t<td>false</td>\n\t\t\t<td>register</td>\n\t\t\t<td>typeid</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>char</td>\n\t\t\t<td>float</td>\n\t\t\t<td>reinterpret_cast</td>\n\t\t\t<td>typename</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>class</td>\n\t\t\t<td>for</td>\n\t\t\t<td>return</td>\n\t\t\t<td>union</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>const</td>\n\t\t\t<td>friend</td>\n\t\t\t<td>short</td>\n\t\t\t<td>unsigned</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>const_cast</td>\n\t\t\t<td>goto</td>\n\t\t\t<td>signed</td>\n\t\t\t<td>using</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>continue</td>\n\t\t\t<td>if</td>\n\t\t\t<td>sizeof</td>\n\t\t\t<td>virtual</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>default</td>\n\t\t\t<td>inline</td>\n\t\t\t<td>static</td>\n\t\t\t<td>void</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>delete</td>\n\t\t\t<td>int</td>\n\t\t\t<td>static_cast</td>\n\t\t\t<td>volatile</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>do</td>\n\t\t\t<td>long</td>\n\t\t\t<td>struct</td>\n\t\t\t<td>wchar_t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>double</td>\n\t\t\t<td>mutable</td>\n\t\t\t<td>switch</td>\n\t\t\t<td>while</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>dynamic_cast</td>\n\t\t\t<td>namespace</td>\n\t\t\t<td>template</td>\n\t\t\t<td>&nbsp;</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2>Trigraphs</h2>\n\n<p>A few characters have an alternative representation, called a trigraph sequence. A trigraph is a three-character sequence that represents a single character and the sequence always starts with two question marks.</p>\n\n<p>Trigraphs are expanded anywhere they appear, including within string literals and character literals, in comments, and in preprocessor directives.</p>\n\n<p>Following are most frequently used trigraph sequences &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\">Trigraph</th>\n\t\t\t<th style=\"text-align:center;\">Replacement</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??=</td>\n\t\t\t<td>#</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??/</td>\n\t\t\t<td>\\</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??&#39;</td>\n\t\t\t<td>^</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??(</td>\n\t\t\t<td>[</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??)</td>\n\t\t\t<td>]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??!</td>\n\t\t\t<td>|</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??&lt;</td>\n\t\t\t<td>{</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??&gt;</td>\n\t\t\t<td>}</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>??-</td>\n\t\t\t<td>~</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>All the compilers do not support trigraphs and they are not advised to be used because of their confusing nature.</p>\n\n<h2>Whitespace in C++</h2>\n\n<p>A line containing only whitespace, possibly with a comment, is known as a blank line, and C++ compiler totally ignores it.</p>\n\n<p>Whitespace is the term used in C++ to describe blanks, tabs, newline characters and comments. Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins.</p>\n\n<h3>Statement 1</h3>\n\n<pre class=\"result notranslate\">\nint age;\n</pre>\n\n<p>In the above statement there must be at least one whitespace character (usually a space) between int and age for the compiler to be able to distinguish them.</p>\n\n<h3>Statement 2</h3>\n\n<pre class=\"result notranslate\">\nfruit = apples + oranges;   // Get the total fruit\n</pre>\n\n<p>In the above statement 2, no whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some if you wish for readability purpose.</p>\n"
          ]
        },
        {
          "tag_line": "Comments in C++",
          "qType": "en_1",
          "details": [
            "<h2>Comments in C++</h2>\n\n<p>Program comments are explanatory statements that you can include in the C++ code. These comments help anyone reading the source code. All programming languages allow for some form of comments.</p>\n\n<p>C++ supports single-line and multi-line comments. All characters available inside any comment are ignored by C++ compiler.</p>\n\n<p>C++ comments start with /* and end with */. For example &minus;</p>\n\n<pre class=\"result notranslate\">\n/* This is a comment */\n\n/* C++ comments can also\n   * span multiple lines\n*/\n</pre>\n\n<p>A comment can also start with //, extending to the end of the line. For example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/Q4esaC\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\nmain</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello World&quot;</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// prints Hello World</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled, it will ignore <b>// prints Hello World</b> and final executable will produce the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nHello World\n</pre>\n\n<p>Within a /* and */ comment, // characters have no special meaning. Within a // comment, /* and */ have no special meaning. Thus, you can &quot;nest&quot; one kind of comment within the other kind. For example &minus;</p>\n\n<pre class=\"result notranslate\">\n/* Comment out printing of Hello World:\n\ncout &lt;&lt; &quot;Hello World&quot;; // prints Hello World\n\n*/\n</pre>\n\n<hr />"
          ]
        },
        {
          "tag_line": "C++ Data Types",
          "qType": "en_1",
          "details": [
            "<h2>C++ Data Types</h2>\n\n<p>While writing program in any language, you need to use various variables to store various information. Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>\n\n<p>You may like to store information of various data types like character, wide character, integer, floating point, double floating point, boolean etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.</p>\n\n<h2>Primitive Built-in Types</h2>\n\n<p>C++ offers the programmer a rich assortment of built-in as well as user defined data types. Following table lists down seven basic C++ data types &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"50%\">Type</th>\n\t\t\t<th style=\"text-align:center;\">Keyword</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Boolean</td>\n\t\t\t<td>bool</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Character</td>\n\t\t\t<td>char</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Integer</td>\n\t\t\t<td>int</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Floating point</td>\n\t\t\t<td>float</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Double floating point</td>\n\t\t\t<td>double</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Valueless</td>\n\t\t\t<td>void</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Wide character</td>\n\t\t\t<td>wchar_t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Several of the basic types can be modified using one or more of these type modifiers &minus;</p>\n\n<ul class=\"list\">\n\t<li>signed</li>\n\t<li>unsigned</li>\n\t<li>short</li>\n\t<li>long</li>\n</ul>\n\n<p>The following table shows the variable type, how much memory it takes to store the value in memory, and what is maximum and minimum value which can be stored in such type of variables.</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\">Type</th>\n\t\t\t<th style=\"text-align:center;\">Typical Bit Width</th>\n\t\t\t<th style=\"text-align:center;\">Typical Range</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>char</td>\n\t\t\t<td>1byte</td>\n\t\t\t<td>-127 to 127 or 0 to 255</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>unsigned char</td>\n\t\t\t<td>1byte</td>\n\t\t\t<td>0 to 255</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>signed char</td>\n\t\t\t<td>1byte</td>\n\t\t\t<td>-127 to 127</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>-2147483648 to 2147483647</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>unsigned int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>0 to 4294967295</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>signed int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>-2147483648 to 2147483647</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>short int</td>\n\t\t\t<td>2bytes</td>\n\t\t\t<td>-32768 to 32767</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>unsigned short int</td>\n\t\t\t<td>Range</td>\n\t\t\t<td>0 to 65,535</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>signed short int</td>\n\t\t\t<td>Range</td>\n\t\t\t<td>-32768 to 32767</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>long int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>-2,147,483,648 to 2,147,483,647</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>signed long int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>same as long int</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>unsigned long int</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>0 to 4,294,967,295</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>float</td>\n\t\t\t<td>4bytes</td>\n\t\t\t<td>+/- 3.4e +/- 38 (~7 digits)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>double</td>\n\t\t\t<td>8bytes</td>\n\t\t\t<td>+/- 1.7e +/- 308 (~15 digits)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>long double</td>\n\t\t\t<td>8bytes</td>\n\t\t\t<td>+/- 1.7e +/- 308 (~15 digits)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>wchar_t</td>\n\t\t\t<td>2 or 4 bytes</td>\n\t\t\t<td>1 wide character</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>The size of variables might be different from those shown in the above table, depending on the compiler and the computer you are using.</p>\n\n<p>Following is the example, which will produce correct size of various data types on your computer.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/iKNn78\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of char : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">char</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of int : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of short int : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">short</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of long int : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">long</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of float : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">float</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of double : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"kwd\">double</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Size of wchar_t : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"kwd\">sizeof</span><span class=\"pun\">(</span><span class=\"typ\">wchar_t</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>This example uses <b>endl</b>, which inserts a new-line character after every line and &lt;&lt; operator is being used to pass multiple values out to the screen. We are also using <b>sizeof()</b> operator to get size of various data types.</p>\n\n<p>When the above code is compiled and executed, it produces the following result which can vary from machine to machine &minus;</p>\n\n<pre class=\"result notranslate\">\nSize of char : 1\nSize of int : 4\nSize of short int : 2\nSize of long int : 4\nSize of float : 4\nSize of double : 8\nSize of wchar_t : 4\n</pre>\n\n<h2>typedef Declarations</h2>\n\n<p>You can create a new name for an existing type using <b>typedef</b>. Following is the simple syntax to define a new type using typedef &minus;</p>\n\n<pre class=\"result notranslate\">\ntypedef type newname; \n</pre>\n\n<p>For example, the following tells the compiler that feet is another name for int &minus;</p>\n\n<pre class=\"result notranslate\">\ntypedef int feet;\n</pre>\n\n<p>Now, the following declaration is perfectly legal and creates an integer variable called distance &minus;</p>\n\n<pre class=\"result notranslate\">\nfeet distance;\n</pre>\n\n<h2>Enumerated Types</h2>\n\n<p>An enumerated type declares an optional type name and a set of zero or more identifiers that can be used as values of the type. Each enumerator is a constant whose type is the enumeration.</p>\n\n<p>Creating an enumeration requires the use of the keyword <b>enum</b>. The general form of an enumeration type is &minus;</p>\n\n<pre class=\"result notranslate\">\nenum enum-name { list of names } var-list; \n</pre>\n\n<p>Here, the enum-name is the enumeration&#39;s type name. The list of names is comma separated.</p>\n\n<p>For example, the following code defines an enumeration of colors called colors and the variable c of type color. Finally, c is assigned the value &quot;blue&quot;.</p>\n\n<pre class=\"result notranslate\">\nenum color { red, green, blue } c;\nc = blue;\n</pre>\n\n<p>By default, the value of the first name is 0, the second name has the value 1, and the third has the value 2, and so on. But you can give a name, a specific value by adding an initializer. For example, in the following enumeration, <b>green</b> will have the value 5.</p>\n\n<pre class=\"result notranslate\">\nenum color { red, green = 5, blue };\n</pre>\n\n<p>Here, <b>blue</b> will have a value of 6 because each name will be one greater than the one that precedes it.</p>\n"
          ]
        },
        {
          "tag_line": "C++ Variable Types",
          "qType": "en_1",
          "details": [
            "<h2>C++ Variable Types</h2>\n\n<p>A variable provides us with named storage that our programs can manipulate. Each variable in C++ has a specific type, which determines the size and layout of the variable&#39;s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>\n\n<p>The name of a variable can be composed of letters, digits, and the underscore character. It must begin with either a letter or an underscore. Upper and lowercase letters are distinct because C++ is case-sensitive &minus;</p>\n\n<p>There are following basic types of variable in C++ as explained in last chapter &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"width:5%\">Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Type &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td>\n\t\t\t<p><b>bool</b></p>\n\n\t\t\t<p>Stores either value true or false.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td>\n\t\t\t<p><b>char</b></p>\n\n\t\t\t<p>Typically a single octet (one byte). This is an integer type.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td>\n\t\t\t<p><b>int</b></p>\n\n\t\t\t<p>The most natural size of integer for the machine.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td>\n\t\t\t<p><b>float</b></p>\n\n\t\t\t<p>A single-precision floating point value.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td>\n\t\t\t<p><b>double</b></p>\n\n\t\t\t<p>A double-precision floating point value.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">6</td>\n\t\t\t<td>\n\t\t\t<p><b>void</b></p>\n\n\t\t\t<p>Represents the absence of type.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">7</td>\n\t\t\t<td>\n\t\t\t<p><b>wchar_t</b></p>\n\n\t\t\t<p>A wide character type.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>C++ also allows to define various other types of variables, which we will cover in subsequent chapters like <b>Enumeration, Pointer, Array, Reference, Data structures,</b> and <b>Classes</b>.</p>\n\n<p>Following section will cover how to define, declare and use various types of variables.</p>\n\n<h2>Variable Definition in C++</h2>\n\n<p>A variable definition tells the compiler where and how much storage to create for the variable. A variable definition specifies a data type, and contains a list of one or more variables of that type as follows &minus;</p>\n\n<pre class=\"result notranslate\">\ntype variable_list;\n</pre>\n\n<p>Here, <b>type</b> must be a valid C++ data type including char, w_char, int, float, double, bool or any user-defined object, etc., and <b>variable_list</b> may consist of one or more identifier names separated by commas. Some valid declarations are shown here &minus;</p>\n\n<pre class=\"result notranslate\">\nint    i, j, k;\nchar   c, ch;\nfloat  f, salary;\ndouble d;\n</pre>\n\n<p>The line <b>int i, j, k;</b> both declares and defines the variables i, j and k; which instructs the compiler to create variables named i, j and k of type int.</p>\n\n<p>Variables can be initialized (assigned an initial value) in their declaration. The initializer consists of an equal sign followed by a constant expression as follows &minus;</p>\n\n<pre class=\"result notranslate\">\ntype variable_name = value;\n</pre>\n\n<p>Some examples are &minus;</p>\n\n<pre class=\"result notranslate\">\nextern int d = 3, f = 5;    // declaration of d and f. \nint d = 3, f = 5;           // definition and initializing d and f. \nbyte z = 22;                // definition and initializes z. \nchar x = &#39;x&#39;;               // the variable x has the value &#39;x&#39;.\n</pre>\n\n<p>For definition without an initializer: variables with static storage duration are implicitly initialized with NULL (all bytes have the value 0); the initial value of all other variables is undefined.</p>\n\n<h2>Variable Declaration in C++</h2>\n\n<p>A variable declaration provides assurance to the compiler that there is one variable existing with the given type and name so that compiler proceed for further compilation without needing complete detail about the variable. A variable declaration has its meaning at the time of compilation only, compiler needs actual variable definition at the time of linking of the program.</p>\n\n<p>A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking of the program. You will use <b>extern</b> keyword to declare a variable at any place. Though you can declare a variable multiple times in your C++ program, but it can be defined only once in a file, a function or a block of code.</p>\n\n<h3>Example</h3>\n\n<p>Try the following example where a variable has been declared at the top, but it has been defined inside the main function &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/odXXRO\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">// Variable declaration:</span><span class=\"pln\">\n</span><span class=\"kwd\">extern</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">extern</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> c</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">extern</span><span class=\"pln\"> </span><span class=\"kwd\">float</span><span class=\"pln\"> f</span><span class=\"pun\">;</span><span class=\"pln\">\n  \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// Variable definition:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> c</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">float</span><span class=\"pln\"> f</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// actual initialization</span><span class=\"pln\">\n   a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n   b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\">\n   c </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> c </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl </span><span class=\"pun\">;</span><span class=\"pln\">\n\n   f </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">70.0</span><span class=\"pun\">/</span><span class=\"lit\">3.0</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> f </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl </span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\n30\n23.3333\n</pre>\n\n<p>Same concept applies on function declaration where you provide a function name at the time of its declaration and its actual definition can be given anywhere else. For example &minus;</p>\n\n<pre class=\"result notranslate\">\n// function declaration\nint func();\nint main() {\n   // function call\n   int i = func();\n}\n\n// function definition\nint func() {\n   return 0;\n}\n</pre>\n\n<h2>Lvalues and Rvalues</h2>\n\n<p>There are two kinds of expressions in C++ &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>lvalue</b> &minus; Expressions that refer to a memory location is called &quot;lvalue&quot; expression. An lvalue may appear as either the left-hand or right-hand side of an assignment.</p>\n\t</li>\n\t<li>\n\t<p><b>rvalue</b> &minus; The term rvalue refers to a data value that is stored at some address in memory. An rvalue is an expression that cannot have a value assigned to it which means an rvalue may appear on the right- but not left-hand side of an assignment.</p>\n\t</li>\n</ul>\n\n<p>Variables are lvalues and so may appear on the left-hand side of an assignment. Numeric literals are rvalues and so may not be assigned and can not appear on the left-hand side. Following is a valid statement &minus;</p>\n\n<pre class=\"result notranslate\">\nint g = 20;\n</pre>\n\n<p>But the following is not a valid statement and would generate compile-time error &minus;</p>\n\n<pre class=\"result notranslate\">\n10 = 20;\n</pre>\n"
          ]
        },
        {
          "tag_line": "Variable Scope in C++",
          "qType": "en_1",
          "details": [
            "<h2>Variable Scope in C++</h2>\n\n<p>A scope is a region of the program and broadly speaking there are three places, where variables can be declared &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Inside a function or a block which is called local variables,</p>\n\t</li>\n\t<li>\n\t<p>In the definition of function parameters which is called formal parameters.</p>\n\t</li>\n\t<li>\n\t<p>Outside of all functions which is called global variables.</p>\n\t</li>\n</ul>\n\n<p>We will learn what is a function and it&#39;s parameter in subsequent chapters. Here let us explain what are local and global variables.</p>\n\n<h2>Local Variables</h2>\n\n<p>Variables that are declared inside a function or block are local variables. They can be used only by statements that are inside that function or block of code. Local variables are not known to functions outside their own. Following is the example using local variables &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/QIjnPh\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// Local variable declaration:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> c</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// actual initialization</span><span class=\"pln\">\n   a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n   b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\">\n   c </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> c</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<h2>Global Variables</h2>\n\n<p>Global variables are defined outside of all the functions, usually on top of the program. The global variables will hold their value throughout the life-time of your program.</p>\n\n<p>A global variable can be accessed by any function. That is, a global variable is available for use throughout your entire program after its declaration. Following is the example using global and local variables &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/dRHHpD\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">// Global variable declaration:</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> g</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// Local variable declaration:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// actual initialization</span><span class=\"pln\">\n   a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n   b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\">\n   g </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n  \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> g</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>A program can have same name for local and global variables but value of local variable inside a function will take preference. For example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/dt7MP9\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">// Global variable declaration:</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> g </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"com\">// Local variable declaration:</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> g </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> g</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\n10\n</pre>\n\n<h2>Initializing Local and Global Variables</h2>\n\n<p>When a local variable is defined, it is not initialized by the system, you must initialize it yourself. Global variables are initialized automatically by the system when you define them as follows &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"50%\">Data Type</th>\n\t\t\t<th style=\"text-align:center;\">Initializer</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>int</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>char</td>\n\t\t\t<td>&#39;\\0&#39;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>float</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>double</td>\n\t\t\t<td>0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>pointer</td>\n\t\t\t<td>NULL</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>It is a good programming practice to initialize variables properly, otherwise sometimes program would produce unexpected result.</p>\n"
          ]
        },     {
          "tag_line": "C++ Constants/Literals",
          "qType": "en_1",
          "details": [
            "<h2>C++ Constants/Literals</h2>\n\n<p>Constants refer to fixed values that the program may not alter and they are called <b>literals</b>.</p>\n\n<p>Constants can be of any of the basic data types and can be divided into Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values.</p>\n\n<p>Again, constants are treated just like regular variables except that their values cannot be modified after their definition.</p>\n\n<h2>Integer Literals</h2>\n\n<p>An integer literal can be a decimal, octal, or hexadecimal constant. A prefix specifies the base or radix: 0x or 0X for hexadecimal, 0 for octal, and nothing for decimal.</p>\n\n<p>An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order.</p>\n\n<p>Here are some examples of integer literals &minus;</p>\n\n<pre class=\"result notranslate\">\n212         // Legal\n215u        // Legal\n0xFeeL      // Legal\n078         // Illegal: 8 is not an octal digit\n032UU       // Illegal: cannot repeat a suffix\n</pre>\n\n<p>Following are other examples of various types of Integer literals &minus;</p>\n\n<pre class=\"result notranslate\">\n85         // decimal\n0213       // octal\n0x4b       // hexadecimal\n30         // int\n30u        // unsigned int\n30l        // long\n30ul       // unsigned long\n</pre>\n\n<h2>Floating-point Literals</h2>\n\n<p>A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form.</p>\n\n<p>While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E.</p>\n\n<p>Here are some examples of floating-point literals &minus;</p>\n\n<pre class=\"result notranslate\">\n3.14159       // Legal\n314159E-5L    // Legal\n510E          // Illegal: incomplete exponent\n210f          // Illegal: no decimal or exponent\n.e55          // Illegal: missing integer or fraction\n</pre>\n\n<h2>Boolean Literals</h2>\n\n<p>There are two Boolean literals and they are part of standard C++ keywords &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>A value of <b>true</b> representing true.</p>\n\t</li>\n\t<li>\n\t<p>A value of <b>false</b> representing false.</p>\n\t</li>\n</ul>\n\n<p>You should not consider the value of true equal to 1 and value of false equal to 0.</p>\n\n<h2>Character Literals</h2>\n\n<p>Character literals are enclosed in single quotes. If the literal begins with L (uppercase only), it is a wide character literal (e.g., L&#39;x&#39;) and should be stored in <b>wchar_t</b> type of variable . Otherwise, it is a narrow character literal (e.g., &#39;x&#39;) and can be stored in a simple variable of <b>char</b> type.</p>\n\n<p>A character literal can be a plain character (e.g., &#39;x&#39;), an escape sequence (e.g., &#39;\\t&#39;), or a universal character (e.g., &#39;\\u02C0&#39;).</p>\n\n<p>There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\\n) or tab (\\t). Here, you have a list of some of such escape sequence codes &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\">Escape sequence</th>\n\t\t\t<th style=\"text-align:center;\">Meaning</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\\\</td>\n\t\t\t<td>\\ character</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\&#39;</td>\n\t\t\t<td>&#39; character</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\&quot;</td>\n\t\t\t<td>&quot; character</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\?</td>\n\t\t\t<td>? character</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\a</td>\n\t\t\t<td>Alert or bell</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\b</td>\n\t\t\t<td>Backspace</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\f</td>\n\t\t\t<td>Form feed</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\n</td>\n\t\t\t<td>Newline</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\r</td>\n\t\t\t<td>Carriage return</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\t</td>\n\t\t\t<td>Horizontal tab</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\v</td>\n\t\t\t<td>Vertical tab</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\ooo</td>\n\t\t\t<td>Octal number of one to three digits</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\\xhh . . .</td>\n\t\t\t<td>Hexadecimal number of one or more digits</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Following is the example to show a few escape sequence characters &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/8RqQ5S\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello\\tWorld\\n\\n&quot;</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nHello   World\n</pre>\n\n<h2>String Literals</h2>\n\n<p>String literals are enclosed in double quotes. A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters.</p>\n\n<p>You can break a long line into multiple lines using string literals and separate them using whitespaces.</p>\n\n<p>Here are some examples of string literals. All the three forms are identical strings.</p>\n\n<pre class=\"result notranslate\">\n&quot;hello, dear&quot;\n\n&quot;hello, \\\n\ndear&quot;\n\n&quot;hello, &quot; &quot;d&quot; &quot;ear&quot;\n</pre>\n\n<h2>Defining Constants</h2>\n\n<p>There are two simple ways in C++ to define constants &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Using <b>#define</b> preprocessor.</p>\n\t</li>\n\t<li>\n\t<p>Using <b>const</b> keyword.</p>\n\t</li>\n</ul>\n\n<h2>The #define Preprocessor</h2>\n\n<p>Following is the form to use #define preprocessor to define a constant &minus;</p>\n\n<pre class=\"result notranslate\">\n#define identifier value\n</pre>\n\n<p>Following example explains it in detail &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/N6xxDP\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">#define</span><span class=\"pln\"> LENGTH </span><span class=\"lit\">10</span><span class=\"pln\">   \n</span><span class=\"com\">#define</span><span class=\"pln\"> WIDTH  </span><span class=\"lit\">5</span><span class=\"pln\">\n</span><span class=\"com\">#define</span><span class=\"pln\"> NEWLINE </span><span class=\"str\">&#39;\\n&#39;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">  \n   \n   area </span><span class=\"pun\">=</span><span class=\"pln\"> LENGTH </span><span class=\"pun\">*</span><span class=\"pln\"> WIDTH</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> NEWLINE</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\n50\n</pre>\n\n<h2>The const Keyword</h2>\n\n<p>You can use <b>const</b> prefix to declare constants with a specific type as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nconst type variable = value;\n</pre>\n\n<p>Following example explains it in detail &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/IA1cea\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\">  LENGTH </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\">  WIDTH  </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"kwd\">char</span><span class=\"pln\"> NEWLINE </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">&#39;\\n&#39;</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">  \n   \n   area </span><span class=\"pun\">=</span><span class=\"pln\"> LENGTH </span><span class=\"pun\">*</span><span class=\"pln\"> WIDTH</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> NEWLINE</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\n50\n</pre>\n\n<p>Note that it is a good programming practice to define constants in CAPITALS.</p>\n"
          ]
        },     {
          "tag_line": "C++ Modifier Types",
          "qType": "en_1",
          "details": [
            "<h2>C++ Modifier Types</h2>\n\n<p>C++ allows the <b>char, int, </b> and <b>double</b> data types to have modifiers preceding them. A modifier is used to alter the meaning of the base type so that it more precisely fits the needs of various situations.</p>\n\n<p>The data type modifiers are listed here &minus;</p>\n\n<ul class=\"list\">\n\t<li>signed</li>\n\t<li>unsigned</li>\n\t<li>long</li>\n\t<li>short</li>\n</ul>\n\n<p>The modifiers <b>signed, unsigned, long,</b> and <b>short</b> can be applied to integer base types. In addition, <b>signed</b> and <b>unsigned</b> can be applied to char, and <b>long</b> can be applied to double.</p>\n\n<p>The modifiers <b>signed</b> and <b>unsigned</b> can also be used as prefix to <b>long</b> or <b>short</b> modifiers. For example, <b>unsigned long int</b>.</p>\n\n<p>C++ allows a shorthand notation for declaring <b>unsigned, short,</b> or <b>long</b> integers. You can simply use the word <b>unsigned, short,</b> or <b>long,</b> without <b>int</b>. It automatically implies <b>int</b>. For example, the following two statements both declare unsigned integer variables.</p>\n\n<pre class=\"result notranslate\">\nunsigned x;\nunsigned int y;\n</pre>\n\n<p>To understand the difference between the way signed and unsigned integer modifiers are interpreted by C++, you should run the following short program &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/nWAgjz\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">/* This program shows the difference between\n   * signed and unsigned integers.\n*/</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">short</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> i</span><span class=\"pun\">;</span><span class=\"pln\">           </span><span class=\"com\">// a signed short integer</span><span class=\"pln\">\n   </span><span class=\"kwd\">short</span><span class=\"pln\"> </span><span class=\"kwd\">unsigned</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> j</span><span class=\"pun\">;</span><span class=\"pln\">  </span><span class=\"com\">// an unsigned short integer</span><span class=\"pln\">\n\n   j </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">50000</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   i </span><span class=\"pun\">=</span><span class=\"pln\"> j</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot; &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> j</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When this program is run, following is the output &minus;</p>\n\n<pre class=\"result notranslate\">\n-15536 50000\n</pre>\n\n<p>The above result is because the bit pattern that represents 50,000 as a short unsigned integer is interpreted as -15,536 by a short.</p>\n\n<h2>Type Qualifiers in C++</h2>\n\n<p>The type qualifiers provide additional information about the variables they precede.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Qualifier &amp; Meaning</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td>\n\t\t\t<p><b>const</b></p>\n\n\t\t\t<p>Objects of type <b>const</b> cannot be changed by your program during execution.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td>\n\t\t\t<p><b>volatile</b></p>\n\n\t\t\t<p>The modifier <b>volatile</b> tells the compiler that a variable&#39;s value may be changed in ways not explicitly specified by the program.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td>\n\t\t\t<p><b>restrict</b></p>\n\n\t\t\t<p>A pointer qualified by <b>restrict</b> is initially the only means by which the object it points to can be accessed. Only C99 adds a new type qualifier called restrict.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },     {
          "tag_line": "Storage Classes in C++",
          "qType": "en_1",
          "details": [
            "<h2>Storage Classes in C++</h2>\n\n<p>A storage class defines the scope (visibility) and life-time of variables and/or functions within a C++ Program. These specifiers precede the type that they modify. There are following storage classes, which can be used in a C++ Program</p>\n\n<ul class=\"list\">\n\t<li>auto</li>\n\t<li>register</li>\n\t<li>static</li>\n\t<li>extern</li>\n\t<li>mutable</li>\n</ul>\n\n<h2>The auto Storage Class</h2>\n\n<p>The <b>auto</b> storage class is the default storage class for all local variables.</p>\n\n<pre class=\"result notranslate\">\n{\n   int mount;\n   auto int month;\n}\n</pre>\n\n<p>The example above defines two variables with the same storage class, auto can only be used within functions, i.e., local variables.</p>\n\n<h2>The register Storage Class</h2>\n\n<p>The <b>register</b> storage class is used to define local variables that should be stored in a register instead of RAM. This means that the variable has a maximum size equal to the register size (usually one word) and can&#39;t have the unary &#39;&amp;&#39; operator applied to it (as it does not have a memory location).</p>\n\n<pre class=\"result notranslate\">\n{\n   register int  miles;\n}\n</pre>\n\n<p>The register should only be used for variables that require quick access such as counters. It should also be noted that defining &#39;register&#39; does not mean that the variable will be stored in a register. It means that it MIGHT be stored in a register depending on hardware and implementation restrictions.</p>\n\n<h2>The static Storage Class</h2>\n\n<p>The <b>static</b> storage class instructs the compiler to keep a local variable in existence during the life-time of the program instead of creating and destroying it each time it comes into and goes out of scope. Therefore, making local variables static allows them to maintain their values between function calls.</p>\n\n<p>The static modifier may also be applied to global variables. When this is done, it causes that variable&#39;s scope to be restricted to the file in which it is declared.</p>\n\n<p>In C++, when static is used on a class data member, it causes only one copy of that member to be shared by all objects of its class.</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/20HjiV\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"com\">// Function declaration</span><span class=\"pln\">\n</span><span class=\"kwd\">void</span><span class=\"pln\"> func</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">);</span><span class=\"pln\">\n \n</span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> count </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/* Global variable */</span><span class=\"pln\">\n \nmain</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">while</span><span class=\"pun\">(</span><span class=\"pln\">count</span><span class=\"pun\">--)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      func</span><span class=\"pun\">();</span><span class=\"pln\">\n   </span><span class=\"pun\">}</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span><span class=\"pln\">\n\n</span><span class=\"com\">// Function definition</span><span class=\"pln\">\n</span><span class=\"kwd\">void</span><span class=\"pln\"> func</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// local static variable</span><span class=\"pln\">\n   i</span><span class=\"pun\">++;</span><span class=\"pln\">\n   std</span><span class=\"pun\">::</span><span class=\"pln\">cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;i is &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> i </span><span class=\"pun\">;</span><span class=\"pln\">\n   std</span><span class=\"pun\">::</span><span class=\"pln\">cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot; and count is &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> count </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> std</span><span class=\"pun\">::</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\ni is 6 and count is 9\ni is 7 and count is 8\ni is 8 and count is 7\ni is 9 and count is 6\ni is 10 and count is 5\ni is 11 and count is 4\ni is 12 and count is 3\ni is 13 and count is 2\ni is 14 and count is 1\ni is 15 and count is 0\n</pre>\n\n<h2>The extern Storage Class</h2>\n\n<p>The <b>extern</b> storage class is used to give a reference of a global variable that is visible to ALL the program files. When you use &#39;extern&#39; the variable cannot be initialized as all it does is point the variable name at a storage location that has been previously defined.</p>\n\n<p>When you have multiple files and you define a global variable or function, which will be used in other files also, then <i>extern</i> will be used in another file to give reference of defined variable or function. Just for understanding <i> extern </i> is used to declare a global variable or function in another file.</p>\n\n<p>The extern modifier is most commonly used when there are two or more files sharing the same global variables or functions as explained below.</p>\n\n<h3>First File: main.cpp</h3>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> count </span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"kwd\">extern</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> write_extern</span><span class=\"pun\">();</span><span class=\"pln\">\n \nmain</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   count </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5</span><span class=\"pun\">;</span><span class=\"pln\">\n   write_extern</span><span class=\"pun\">();</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<h3>Second File: support.cpp</h3>\n\n<pre class=\"result notranslate\">\n#include &lt;iostream&gt;\n\nextern int count;\n\nvoid write_extern(void) {\n   std::cout &lt;&lt; &quot;Count is &quot; &lt;&lt; count &lt;&lt; std::endl;\n}\n</pre>\n\n<p>Here, <i>extern</i> keyword is being used to declare count in another file. Now compile these two files as follows &minus;</p>\n\n<pre class=\"result notranslate\">\n$g++ main.cpp support.cpp -o write\n</pre>\n\n<p>This will produce <b>write</b> executable program, try to execute <b>write</b> and check the result as follows &minus;</p>\n\n<pre class=\"result notranslate\">\n$./write\n5\n</pre>\n\n<h2>The mutable Storage Class</h2>\n\n<p>The <b>mutable</b> specifier applies only to class objects, which are discussed later in this tutorial. It allows a member of an object to override const member function. That is, a mutable member can be modified by a const member function.</p>\n\n<p>&nbsp;</p>\n"
          ]
        },     {
          "tag_line": "C++ Variable Types",
          "qType": "en_1",
          "details": [
            ""
          ]
        },     {
          "tag_line": "C++ Variable Types",
          "qType": "en_1",
          "details": [
            ""
          ]
        },     {
          "tag_line": "C++ Variable Types",
          "qType": "en_1",
          "details": [
            ""
          ]
        },     {
          "tag_line": "C++ Variable Types",
          "qType": "en_1",
          "details": [
            ""
          ]
        },     {
          "tag_line": "C++ Variable Types",
          "qType": "en_1",
          "details": [
            ""
          ]
        },     {
          "tag_line": "C++ Variable Types",
          "qType": "en_1",
          "details": [
            ""
          ]
        }
      ]
    },

    {
      "title": "C++ Object Oriented",
      "content": [
        {
          "tag_line": "C++ Classes and Objects",
          "qType": "en_1",
          "details": [
            "<h2>C++ Classes and Objects</h2>\n\n<p>The main purpose of C++ programming is to add object orientation to the C programming language and classes are the central feature of C++ that supports object-oriented programming and are often called user-defined types.</p>\n\n<p>A class is used to specify the form of an object and it combines data representation and methods for manipulating that data into one neat package. The data and functions within a class are called members of the class.</p>\n\n<h2>C++ Class Definitions</h2>\n\n<p>When you define a class, you define a blueprint for a data type. This doesn&#39;t actually define any data, but it does define what the class name means, that is, what an object of the class will consist of and what operations can be performed on such an object.</p>\n\n<p>A class definition starts with the keyword <b>class</b> followed by the class name; and the class body, enclosed by a pair of curly braces. A class definition must be followed either by a semicolon or a list of declarations. For example, we defined the Box data type using the keyword <b>class</b> as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      double length;   // Length of a box\n      double breadth;  // Breadth of a box\n      double height;   // Height of a box\n};\n</pre>\n\n<p>The keyword <b>public</b> determines the access attributes of the members of the class that follows it. A public member can be accessed from outside the class anywhere within the scope of the class object. You can also specify the members of a class as <b>private</b> or <b>protected</b> which we will discuss in a sub-section.</p>\n\n<h2>Define C++ Objects</h2>\n\n<p>A class provides the blueprints for objects, so basically an object is created from a class. We declare objects of a class with exactly the same sort of declaration that we declare variables of basic types. Following statements declare two objects of class Box &minus;</p>\n\n<pre class=\"result notranslate\">\nBox Box1;          // Declare Box1 of type Box\nBox Box2;          // Declare Box2 of type Box\n</pre>\n\n<p>Both of the objects Box1 and Box2 will have their own copy of data members.</p>\n\n<h2>Accessing the Data Members</h2>\n\n<p>The public data members of objects of a class can be accessed using the direct member access operator (.). Let us try the following example to make the things clear &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/JeEWd6\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> length</span><span class=\"pun\">;</span><span class=\"pln\">   </span><span class=\"com\">// Length of a box</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> breadth</span><span class=\"pun\">;</span><span class=\"pln\">  </span><span class=\"com\">// Breadth of a box</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">   </span><span class=\"com\">// Height of a box</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Box1 of type Box</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">;</span><span class=\"pln\">        </span><span class=\"com\">// Declare Box2 of type Box</span><span class=\"pln\">\n   </span><span class=\"kwd\">double</span><span class=\"pln\"> volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0.0</span><span class=\"pun\">;</span><span class=\"pln\">     </span><span class=\"com\">// Store the volume of a box here</span><span class=\"pln\">\n \n   </span><span class=\"com\">// box 1 specification</span><span class=\"pln\">\n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">5.0</span><span class=\"pun\">;</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">6.0</span><span class=\"pun\">;</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">breadth </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">7.0</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// box 2 specification</span><span class=\"pln\">\n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10.0</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">12.0</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">breadth </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">13.0</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// volume of box 1</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">breadth</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box1 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// volume of box 2</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">breadth</span><span class=\"pun\">;</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box2 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nVolume of Box1 : 210\nVolume of Box2 : 1560\n</pre>\n\n<p>It is important to note that private and protected members can not be accessed directly using direct member access operator (.). We will learn how private and protected members can be accessed.</p>\n\n<h2>Classes and Objects in Detail</h2>\n\n<p>So far, you have got very basic idea about C++ Classes and Objects. There are further interesting concepts related to C++ Classes and Objects which we will discuss in various sub-sections listed below &minus;</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Concept &amp; Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_class_member_functions.htm\" title=\"C++ Class Member Functions\">Class Member Functions</a>\n\t\t\t<p>A member function of a class is a function that has its definition or its prototype within the class definition like any other variable.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_class_access_modifiers.htm\" title=\"C++ Class Access Modifiers\">Class Access Modifiers</a>\n\t\t\t<p>A class member can be defined as public, private or protected. By default members would be assumed as private.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_constructor_destructor.htm\" title=\"C++ Constructor &amp; Destructor\">Constructor &amp; Destructor</a>\n\t\t\t<p>A class constructor is a special function in a class that is called when a new object of the class is created. A destructor is also a special function which is called when created object is deleted.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">4</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_copy_constructor.htm\" title=\"C++ Copy Constructor\">Copy Constructor</a>\n\t\t\t<p>The copy constructor is a constructor which creates an object by initializing it with an object of the same class, which has been created previously.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">5</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_friend_functions.htm\" title=\"C++ Friend Functions\">Friend Functions</a>\n\t\t\t<p>A <b>friend</b> function is permitted full access to private and protected members of a class.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">6</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_inline_functions.htm\" title=\"C++ Inline Functions\">Inline Functions</a>\n\t\t\t<p>With an inline function, the compiler tries to expand the code in the body of the function in place of a call to the function.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">7</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_this_pointer.htm\" title=\"The this Pointer in C++\">this Pointer</a>\n\t\t\t<p>Every object has a special pointer <b>this</b> which points to the object itself.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">8</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_pointer_to_class.htm\" title=\"Pointer to C++ Classes\">Pointer to C++ Classes</a>\n\t\t\t<p>A pointer to a class is done exactly the same way a pointer to a structure is. In fact a class is really just a structure with functions in it.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"ts\">9</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/cpp_static_members.htm\" title=\"Static members of a class\">Static Members of a Class</a>\n\t\t\t<p>Both data members and function members of a class can be declared as static.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },
        {
          "tag_line": "C++ Inheritance",
          "qType": "en_1",
          "details": [
            "<h2>C++ Inheritance</h2>\n\n<p>One of the most important concepts in object-oriented programming is that of inheritance. Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and fast implementation time.</p>\n\n<p>When creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the <b>base</b> class, and the new class is referred to as the <b>derived</b> class.</p>\n\n<p>The idea of inheritance implements the <b>is a</b> relationship. For example, mammal IS-A animal, dog IS-A mammal hence dog IS-A animal as well and so on.</p>\n\n<h2>Base and Derived Classes</h2>\n\n<p>A class can be derived from more than one classes, which means it can inherit data and functions from multiple base classes. To define a derived class, we use a class derivation list to specify the base class(es). A class derivation list names one or more base classes and has the form &minus;</p>\n\n<pre class=\"result notranslate\">\nclass derived-class: access-specifier base-class\n</pre>\n\n<p>Where access-specifier is one of <b>public, protected,</b> or <b>private</b>, and base-class is the name of a previously defined class. If the access-specifier is not used, then it is private by default.</p>\n\n<p>Consider a base class <b>Shape</b> and its derived class <b>Rectangle</b> as follows &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/ykk4hq\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">// Base class</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setWidth</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> w</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         width </span><span class=\"pun\">=</span><span class=\"pln\"> w</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setHeight</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> h</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> h</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">protected</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> width</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Derived class</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rectangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Rectangle</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setWidth</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Print the area of the object.</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total area: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal area: 35\n</pre>\n\n<h2>Access Control and Inheritance</h2>\n\n<p>A derived class can access all the non-private members of its base class. Thus base-class members that should not be accessible to the member functions of derived classes should be declared private in the base class.</p>\n\n<p>We can summarize the different access types according to - who can access them in the following way &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\" width=\"25%\">Access</th>\n\t\t\t<th style=\"text-align:center;\" width=\"25%\">public</th>\n\t\t\t<th style=\"text-align:center;\" width=\"25%\">protected</th>\n\t\t\t<th style=\"text-align:center;\" width=\"25%\">private</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Same class</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>yes</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Derived classes</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>no</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Outside classes</td>\n\t\t\t<td>yes</td>\n\t\t\t<td>no</td>\n\t\t\t<td>no</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>A derived class inherits all base class methods with the following exceptions &minus;</p>\n\n<ul class=\"list\">\n\t<li>Constructors, destructors and copy constructors of the base class.</li>\n\t<li>Overloaded operators of the base class.</li>\n\t<li>The friend functions of the base class.</li>\n</ul>\n\n<h2>Type of Inheritance</h2>\n\n<p>When deriving a class from a base class, the base class may be inherited through <b>public, protected</b> or <b> private</b> inheritance. The type of inheritance is specified by the access-specifier as explained above.</p>\n\n<p>We hardly use <b>protected</b> or <b> private</b> inheritance, but <b>public</b> inheritance is commonly used. While using different type of inheritance, following rules are applied &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Public Inheritance</b> &minus; When deriving a class from a <b>public</b> base class, <b>public</b> members of the base class become <b>public</b> members of the derived class and <b>protected</b> members of the base class become <b>protected</b> members of the derived class. A base class&#39;s <b>private</b> members are never accessible directly from a derived class, but can be accessed through calls to the <b>public</b> and <b>protected</b> members of the base class.</p>\n\t</li>\n\t<li>\n\t<p><b>Protected Inheritance</b> &minus; When deriving from a <b>protected</b> base class, <b>public</b> and <b>protected</b> members of the base class become <b>protected</b> members of the derived class.</p>\n\t</li>\n\t<li>\n\t<p><b>Private Inheritance</b> &minus; When deriving from a <b>private</b> base class, <b>public</b> and <b>protected</b> members of the base class become <b>private</b> members of the derived class.</p>\n\t</li>\n</ul>\n\n<h2>Multiple Inheritance</h2>\n\n<p>A C++ class can inherit members from more than one class and here is the extended syntax &minus;</p>\n\n<pre class=\"result notranslate\">\nclass derived-class: access baseA, access baseB....\n</pre>\n\n<p>Where access is one of <b>public, protected,</b> or <b>private</b> and would be given for every base class and they will be separated by comma as shown above. Let us try the following example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/NPe3oQ\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"com\">// Base class Shape</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setWidth</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> w</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         width </span><span class=\"pun\">=</span><span class=\"pln\"> w</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setHeight</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> h</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> h</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">protected</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> width</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Base class PaintCost</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">PaintCost</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getCost</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> area </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"lit\">70</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Derived class</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rectangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">PaintCost</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Rectangle</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setWidth</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   area </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">();</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Print the area of the object.</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total area: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Print the total cost of painting</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total paint cost: $&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getCost</span><span class=\"pun\">(</span><span class=\"pln\">area</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal area: 35\nTotal paint cost: $2450\n</pre>\n"
          ]
        },
        {
          "tag_line": "C++ Overloading (Operator and Function)",
          "qType": "en_1",
          "details": [
            "<h2>C++ Overloading (Operator and Function)</h2>\n\n<p>C++ allows you to specify more than one definition for a <b>function</b> name or an <b>operator</b> in the same scope, which is called <b>function overloading</b> and <b>operator overloading</b> respectively.</p>\n\n<p>An overloaded declaration is a declaration that is declared with the same name as a previously declared declaration in the same scope, except that both declarations have different arguments and obviously different definition (implementation).</p>\n\n<p>When you call an overloaded <b>function</b> or <b>operator</b>, the compiler determines the most appropriate definition to use, by comparing the argument types you have used to call the function or operator with the parameter types specified in the definitions. The process of selecting the most appropriate overloaded function or operator is called <b>overload resolution</b>.</p>\n\n<h2>Function Overloading in C++</h2>\n\n<p>You can have multiple definitions for the same function name in the same scope. The definition of the function must differ from each other by the types and/or the number of arguments in the argument list. You cannot overload function declarations that differ only by return type.</p>\n\n<p>Following is the example where same function <b>print()</b> is being used to print different data types &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/cR3W4M\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">class</span><span class=\"pln\"> printData </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> i</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n        cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Printing int: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"kwd\">double</span><span class=\"pln\">  f</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n        cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Printing float: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> f </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> </span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"kwd\">char</span><span class=\"pun\">*</span><span class=\"pln\"> c</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n        cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Printing character: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> c </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   printData pd</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// Call print to print integer</span><span class=\"pln\">\n   pd</span><span class=\"pun\">.</span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Call print to print float</span><span class=\"pln\">\n   pd</span><span class=\"pun\">.</span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"lit\">500.263</span><span class=\"pun\">);</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Call print to print character</span><span class=\"pln\">\n   pd</span><span class=\"pun\">.</span><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"str\">&quot;Hello C++&quot;</span><span class=\"pun\">);</span><span class=\"pln\">\n \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nPrinting int: 5\nPrinting float: 500.263\nPrinting character: Hello C++\n</pre>\n\n<h2>Operators Overloading in C++</h2>\n\n<p>You can redefine or overload most of the built-in operators available in C++. Thus, a programmer can use operators with user-defined types as well.</p>\n\n<p>Overloaded operators are functions with special names: the keyword &quot;operator&quot; followed by the symbol for the operator being defined. Like any other function, an overloaded operator has a return type and a parameter list.</p>\n\n<pre class=\"result notranslate\">\nBox operator+(const Box&amp;);\n</pre>\n\n<p>declares the addition operator that can be used to <b>add</b> two Box objects and returns final Box object. Most overloaded operators may be defined as ordinary non-member functions or as class member functions. In case we define above function as non-member function of a class then we would have to pass two arguments for each operand as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nBox operator+(const Box&amp;, const Box&amp;);\n</pre>\n\n<p>Following is the example to show the concept of operator over loading using a member function. Here an object is passed as an argument whose properties will be accessed using this object, the object which will call this operator can be accessed using <b>this</b> operator as explained below &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/4Alfgt\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> getVolume</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> length </span><span class=\"pun\">*</span><span class=\"pln\"> breadth </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setLength</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">double</span><span class=\"pln\"> len </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         length </span><span class=\"pun\">=</span><span class=\"pln\"> len</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setBreadth</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">double</span><span class=\"pln\"> bre </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         breadth </span><span class=\"pun\">=</span><span class=\"pln\"> bre</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setHeight</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">double</span><span class=\"pln\"> hei </span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> hei</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// Overload + operator to add two Box objects.</span><span class=\"pln\">\n      </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"kwd\">operator</span><span class=\"pun\">+(</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Box</span><span class=\"pun\">&amp;</span><span class=\"pln\"> b</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"typ\">Box</span><span class=\"pln\"> box</span><span class=\"pun\">;</span><span class=\"pln\">\n         box</span><span class=\"pun\">.</span><span class=\"pln\">length </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">-&gt;</span><span class=\"pln\">length </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">.</span><span class=\"pln\">length</span><span class=\"pun\">;</span><span class=\"pln\">\n         box</span><span class=\"pun\">.</span><span class=\"pln\">breadth </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">-&gt;</span><span class=\"pln\">breadth </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">.</span><span class=\"pln\">breadth</span><span class=\"pun\">;</span><span class=\"pln\">\n         box</span><span class=\"pun\">.</span><span class=\"pln\">height </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">-&gt;</span><span class=\"pln\">height </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">.</span><span class=\"pln\">height</span><span class=\"pun\">;</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> box</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">private</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> length</span><span class=\"pun\">;</span><span class=\"pln\">      </span><span class=\"com\">// Length of a box</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> breadth</span><span class=\"pun\">;</span><span class=\"pln\">     </span><span class=\"com\">// Breadth of a box</span><span class=\"pln\">\n      </span><span class=\"kwd\">double</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">      </span><span class=\"com\">// Height of a box</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Main function for the program</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">;</span><span class=\"pln\">                </span><span class=\"com\">// Declare Box1 of type Box</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">;</span><span class=\"pln\">                </span><span class=\"com\">// Declare Box2 of type Box</span><span class=\"pln\">\n   </span><span class=\"typ\">Box</span><span class=\"pln\"> </span><span class=\"typ\">Box3</span><span class=\"pun\">;</span><span class=\"pln\">                </span><span class=\"com\">// Declare Box3 of type Box</span><span class=\"pln\">\n   </span><span class=\"kwd\">double</span><span class=\"pln\"> volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0.0</span><span class=\"pun\">;</span><span class=\"pln\">     </span><span class=\"com\">// Store the volume of a box here</span><span class=\"pln\">\n \n   </span><span class=\"com\">// box 1 specification</span><span class=\"pln\">\n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">setLength</span><span class=\"pun\">(</span><span class=\"lit\">6.0</span><span class=\"pun\">);</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">setBreadth</span><span class=\"pun\">(</span><span class=\"lit\">7.0</span><span class=\"pun\">);</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">5.0</span><span class=\"pun\">);</span><span class=\"pln\">\n \n   </span><span class=\"com\">// box 2 specification</span><span class=\"pln\">\n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">setLength</span><span class=\"pun\">(</span><span class=\"lit\">12.0</span><span class=\"pun\">);</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">setBreadth</span><span class=\"pun\">(</span><span class=\"lit\">13.0</span><span class=\"pun\">);</span><span class=\"pln\"> \n   </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">10.0</span><span class=\"pun\">);</span><span class=\"pln\">\n \n   </span><span class=\"com\">// volume of box 1</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pun\">.</span><span class=\"pln\">getVolume</span><span class=\"pun\">();</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box1 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"com\">// volume of box 2</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">.</span><span class=\"pln\">getVolume</span><span class=\"pun\">();</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box2 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// Add two object as follows:</span><span class=\"pln\">\n   </span><span class=\"typ\">Box3</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box1</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"typ\">Box2</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"com\">// volume of box 3</span><span class=\"pln\">\n   volume </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Box3</span><span class=\"pun\">.</span><span class=\"pln\">getVolume</span><span class=\"pun\">();</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Volume of Box3 : &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> volume </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nVolume of Box1 : 210\nVolume of Box2 : 1560\nVolume of Box3 : 5400\n</pre>\n\n<h2>Overloadable/Non-overloadableOperators</h2>\n\n<p>Following is the list of operators which can be overloaded &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td width=\"16.6%\">+</td>\n\t\t\t<td width=\"16.6%\">-</td>\n\t\t\t<td width=\"16.6%\">*</td>\n\t\t\t<td width=\"16.6%\">/</td>\n\t\t\t<td width=\"16.6%\">%</td>\n\t\t\t<td width=\"16.6%\">^</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&amp;</td>\n\t\t\t<td>|</td>\n\t\t\t<td>~</td>\n\t\t\t<td>!</td>\n\t\t\t<td>,</td>\n\t\t\t<td>=</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&lt;</td>\n\t\t\t<td>&gt;</td>\n\t\t\t<td>&lt;=</td>\n\t\t\t<td>&gt;=</td>\n\t\t\t<td>++</td>\n\t\t\t<td>--</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>&lt;&lt;</td>\n\t\t\t<td>&gt;&gt;</td>\n\t\t\t<td>==</td>\n\t\t\t<td>!=</td>\n\t\t\t<td>&amp;&amp;</td>\n\t\t\t<td>||</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>+=</td>\n\t\t\t<td>-=</td>\n\t\t\t<td>/=</td>\n\t\t\t<td>%=</td>\n\t\t\t<td>^=</td>\n\t\t\t<td>&amp;=</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>|=</td>\n\t\t\t<td>*=</td>\n\t\t\t<td>&lt;&lt;=</td>\n\t\t\t<td>&gt;&gt;=</td>\n\t\t\t<td>[]</td>\n\t\t\t<td>()</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>-&gt;</td>\n\t\t\t<td>-&gt;*</td>\n\t\t\t<td>new</td>\n\t\t\t<td>new []</td>\n\t\t\t<td>delete</td>\n\t\t\t<td>delete []</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Following is the list of operators, which can not be overloaded &minus;</p>\n\n<table class=\"table table-bordered\" style=\"text-align:center;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td width=\"25%\">::</td>\n\t\t\t<td width=\"25%\">.*</td>\n\t\t\t<td width=\"25%\">.</td>\n\t\t\t<td width=\"25%\">?:</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2 id=\"examples\">Operator Overloading Examples</h2>\n\n<p>Here are various operator overloading examples to help you in understanding the concept.</p>\n\n<table class=\"table table-bordered\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center;\">Sr.No</th>\n\t\t\t<th style=\"text-align:center;\">Operators &amp; Example</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">1</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/unary_operators_overloading.htm\">Unary Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">2</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/binary_operators_overloading.htm\">Binary Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">3</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/relational_operators_overloading.htm\">Relational Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">4</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/input_output_operators_overloading.htm\">Input/Output Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">5</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/increment_decrement_operators_overloading.htm\">++ and -- Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">6</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/assignment_operators_overloading.htm\">Assignment Operators Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">7</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/function_call_operator_overloading.htm\">Function call () Operator Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">8</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/subscripting_operator_overloading.htm\">Subscripting [] Operator Overloading</a></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:center;\">9</td>\n\t\t\t<td><a href=\"https://www.tutorialspoint.com/cplusplus/class_member_access_operator_overloading.htm\">Class Member Access Operator -&gt; Overloading</a></td>\n\t\t</tr>\n\t</tbody>\n</table>\n"
          ]
        },
        {
          "tag_line": "Polymorphism in C++",
          "qType": "en_1",
          "details": [
            "<h1>Polymorphism in C++</h1>\n\n<p>The word <b>polymorphism</b> means having many forms. Typically, polymorphism occurs when there is a hierarchy of classes and they are related by inheritance.</p>\n\n<p>C++ polymorphism means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.</p>\n\n<p>Consider the following example where a base class has been derived by other two classes &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/LSyBTc\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\"> \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">protected</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> width</span><span class=\"pun\">,</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"typ\">Shape</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">){</span><span class=\"pln\">\n         width </span><span class=\"pun\">=</span><span class=\"pln\"> a</span><span class=\"pun\">;</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> area</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Parent class area :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rectangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"typ\">Rectangle</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">):</span><span class=\"typ\">Shape</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"kwd\">int</span><span class=\"pln\"> area </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Rectangle class area :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Triangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"typ\">Triangle</span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">):</span><span class=\"typ\">Shape</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">,</span><span class=\"pln\"> b</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"kwd\">int</span><span class=\"pln\"> area </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Triangle class area :&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height </span><span class=\"pun\">/</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"com\">// Main function for the program</span><span class=\"pln\">\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\">shape</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"typ\">Rectangle</span><span class=\"pln\"> rec</span><span class=\"pun\">(</span><span class=\"lit\">10</span><span class=\"pun\">,</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Triangle</span><span class=\"pln\">  tri</span><span class=\"pun\">(</span><span class=\"lit\">10</span><span class=\"pun\">,</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   </span><span class=\"com\">// store the address of Rectangle</span><span class=\"pln\">\n   shape </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"pln\">rec</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// call rectangle area.</span><span class=\"pln\">\n   shape</span><span class=\"pun\">-&gt;</span><span class=\"pln\">area</span><span class=\"pun\">();</span><span class=\"pln\">\n\n   </span><span class=\"com\">// store the address of Triangle</span><span class=\"pln\">\n   shape </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"pln\">tri</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// call triangle area.</span><span class=\"pln\">\n   shape</span><span class=\"pun\">-&gt;</span><span class=\"pln\">area</span><span class=\"pun\">();</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nParent class area :\nParent class area :\n</pre>\n\n<p>The reason for the incorrect output is that the call of the function area() is being set once by the compiler as the version defined in the base class. This is called <b>static resolution</b> of the function call, or <b>static linkage</b> - the function call is fixed before the program is executed. This is also sometimes called <b>early binding</b> because the area() function is set during the compilation of the program.</p>\n\n<p>But now, let&#39;s make a slight modification in our program and precede the declaration of area() in the Shape class with the keyword <b>virtual</b> so that it looks like this &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Shape {\n   protected:\n      int width, height;\n      \n   public:\n      Shape( int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      virtual int area() {\n         cout &lt;&lt; &quot;Parent class area :&quot; &lt;&lt;endl;\n         return 0;\n      }\n};\n</pre>\n\n<p>After this slight modification, when the previous example code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nRectangle class area\nTriangle class area\n</pre>\n\n<p>This time, the compiler looks at the contents of the pointer instead of it&#39;s type. Hence, since addresses of objects of tri and rec classes are stored in *shape the respective area() function is called.</p>\n\n<p>As you can see, each of the child classes has a separate implementation for the function area(). This is how <b>polymorphism</b> is generally used. You have different classes with a function of the same name, and even the same parameters, but with different implementations.</p>\n\n<h2>Virtual Function</h2>\n\n<p>A <b>virtual</b> function is a function in a base class that is declared using the keyword <b>virtual</b>. Defining in a base class a virtual function, with another version in a derived class, signals to the compiler that we don&#39;t want static linkage for this function.</p>\n\n<p>What we do want is the selection of the function to be called at any given point in the program to be based on the kind of object for which it is called. This sort of operation is referred to as <b>dynamic linkage</b>, or <b>late binding</b>.</p>\n\n<h2>Pure Virtual Functions</h2>\n\n<p>It is possible that you want to include a virtual function in a base class so that it may be redefined in a derived class to suit the objects of that class, but that there is no meaningful definition you could give for the function in the base class.</p>\n\n<p>We can change the virtual function area() in the base class to the following &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Shape {\n   protected:\n      int width, height;\n\n   public:\n      Shape(int a = 0, int b = 0) {\n         width = a;\n         height = b;\n      }\n      \n      // pure virtual function\n      virtual int area() = 0;\n};\n</pre>\n\n<p>The = 0 tells the compiler that the function has no body and above virtual function will be called <b>pure virtual function</b>.</p>\n\n<hr />"
          ]
        },
        {
          "tag_line": "Data Abstraction in C++",
          "qType": "en_1",
          "details": [
            "<h2>Data Abstraction in C++</h2>\n\n<p>Data abstraction refers to providing only essential information to the outside world and hiding their background details, i.e., to represent the needed information in program without presenting the details.</p>\n\n<p>Data abstraction is a programming (and design) technique that relies on the separation of interface and implementation.</p>\n\n<p>Let&#39;s take one real life example of a TV, which you can turn on and off, change the channel, adjust the volume, and add external components such as speakers, VCRs, and DVD players, BUT you do not know its internal details, that is, you do not know how it receives signals over the air or through a cable, how it translates them, and finally displays them on the screen.</p>\n\n<p>Thus, we can say a television clearly separates its internal implementation from its external interface and you can play with its interfaces like the power button, channel changer, and volume control without having any knowledge of its internals.</p>\n\n<p>In C++, classes provides great level of <b>data abstraction</b>. They provide sufficient public methods to the outside world to play with the functionality of the object and to manipulate object data, i.e., state without actually knowing how class has been implemented internally.</p>\n\n<p>For example, your program can make a call to the <b>sort()</b> function without knowing what algorithm the function actually uses to sort the given values. In fact, the underlying implementation of the sorting functionality could change between releases of the library, and as long as the interface stays the same, your function call will still work.</p>\n\n<p>In C++, we use <b>classes</b> to define our own abstract data types (ADT). You can use the <b>cout</b> object of class <b>ostream</b> to stream data to standard output like this &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/iaAqF8\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Hello C++&quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>Here, you don&#39;t need to understand how <b>cout</b> displays the text on the user&#39;s screen. You need to only know the public interface and the underlying implementation of &lsquo;cout&rsquo; is free to change.</p>\n\n<h2>Access Labels Enforce Abstraction</h2>\n\n<p>In C++, we use access labels to define the abstract interface to the class. A class may contain zero or more access labels &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Members defined with a public label are accessible to all parts of the program. The data-abstraction view of a type is defined by its public members.</p>\n\t</li>\n\t<li>\n\t<p>Members defined with a private label are not accessible to code that uses the class. The private sections hide the implementation from code that uses the type.</p>\n\t</li>\n</ul>\n\n<p>There are no restrictions on how often an access label may appear. Each access label specifies the access level of the succeeding member definitions. The specified access level remains in effect until the next access label is encountered or the closing right brace of the class body is seen.</p>\n\n<h2>Benefits of Data Abstraction</h2>\n\n<p>Data abstraction provides two important advantages &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p>Class internals are protected from inadvertent user-level errors, which might corrupt the state of the object.</p>\n\t</li>\n\t<li>\n\t<p>The class implementation may evolve over time in response to changing requirements or bug reports without requiring change in user-level code.</p>\n\t</li>\n</ul>\n\n<p>By defining data members only in the private section of the class, the class author is free to make changes in the data. If the implementation changes, only the class code needs to be examined to see what affect the change may have. If data is public, then any function that directly access the data members of the old representation might be broken.</p>\n\n<h2>Data Abstraction Example</h2>\n\n<p>Any C++ program where you implement a class with public and private members is an example of data abstraction. Consider the following example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/Dm4Yt3\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Adder</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// constructor</span><span class=\"pln\">\n      </span><span class=\"typ\">Adder</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         total </span><span class=\"pun\">=</span><span class=\"pln\"> i</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// interface to outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> addNum</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> number</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         total </span><span class=\"pun\">+=</span><span class=\"pln\"> number</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// interface to outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getTotal</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> total</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">};</span><span class=\"pln\">\n      \n   </span><span class=\"kwd\">private</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// hidden data from outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> total</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Adder</span><span class=\"pln\"> a</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">10</span><span class=\"pun\">);</span><span class=\"pln\">\n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">);</span><span class=\"pln\">\n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">30</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> a</span><span class=\"pun\">.</span><span class=\"pln\">getTotal</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal 60\n</pre>\n\n<p>Above class adds numbers together, and returns the sum. The public members - <b>addNum</b> and <b>getTotal</b> are the interfaces to the outside world and a user needs to know them to use the class. The private member <b>total</b> is something that the user doesn&#39;t need to know about, but is needed for the class to operate properly.</p>\n\n<h2>Designing Strategy</h2>\n\n<p>Abstraction separates code into interface and implementation. So while designing your component, you must keep interface independent of the implementation so that if you change underlying implementation then interface would remain intact.</p>\n\n<p>In this case whatever programs are using these interfaces, they would not be impacted and would just need a recompilation with the latest implementation.</p>\n"
          ]
        },
        {
          "tag_line": "Data Encapsulation in C++",
          "qType": "en_1",
          "details": [
            "<h2>Data Encapsulation in C++</h2>\n\n<p>All C++ programs are composed of the following two fundamental elements &minus;</p>\n\n<ul class=\"list\">\n\t<li>\n\t<p><b>Program statements (code)</b> &minus; This is the part of a program that performs actions and they are called functions.</p>\n\t</li>\n\t<li>\n\t<p><b>Program data</b> &minus; The data is the information of the program which gets affected by the program functions.</p>\n\t</li>\n</ul>\n\n<p>Encapsulation is an Object Oriented Programming concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse. Data encapsulation led to the important OOP concept of <b>data hiding</b>.</p>\n\n<p><b>Data encapsulation</b> is a mechanism of bundling the data, and the functions that use them and <b>data abstraction</b> is a mechanism of exposing only the interfaces and hiding the implementation details from the user.</p>\n\n<p>C++ supports the properties of encapsulation and data hiding through the creation of user-defined types, called <b>classes</b>. We already have studied that a class can contain <b>private, protected </b> and <b>public</b> members. By default, all items defined in a class are private. For example &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      double getVolume(void) {\n         return length * breadth * height;\n      }\n\n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n</pre>\n\n<p>The variables length, breadth, and height are <b>private</b>. This means that they can be accessed only by other members of the Box class, and not by any other part of your program. This is one way encapsulation is achieved.</p>\n\n<p>To make parts of a class <b>public</b> (i.e., accessible to other parts of your program), you must declare them after the <b>public</b> keyword. All variables or functions defined after the public specifier are accessible by all other functions in your program.</p>\n\n<p>Making one class a friend of another exposes the implementation details and reduces encapsulation. The ideal is to keep as many of the details of each class hidden from all other classes as possible.</p>\n\n<h2>Data Encapsulation Example</h2>\n\n<p>Any C++ program where you implement a class with public and private members is an example of data encapsulation and data abstraction. Consider the following example &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/lZz6R0\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Adder</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// constructor</span><span class=\"pln\">\n      </span><span class=\"typ\">Adder</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         total </span><span class=\"pun\">=</span><span class=\"pln\"> i</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// interface to outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> addNum</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> number</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         total </span><span class=\"pun\">+=</span><span class=\"pln\"> number</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n      \n      </span><span class=\"com\">// interface to outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getTotal</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         </span><span class=\"kwd\">return</span><span class=\"pln\"> total</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">};</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">private</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// hidden data from outside world</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> total</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Adder</span><span class=\"pln\"> a</span><span class=\"pun\">;</span><span class=\"pln\">\n   \n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">10</span><span class=\"pun\">);</span><span class=\"pln\">\n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">);</span><span class=\"pln\">\n   a</span><span class=\"pun\">.</span><span class=\"pln\">addNum</span><span class=\"pun\">(</span><span class=\"lit\">30</span><span class=\"pun\">);</span><span class=\"pln\">\n\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> a</span><span class=\"pun\">.</span><span class=\"pln\">getTotal</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\">endl</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal 60\n</pre>\n\n<p>Above class adds numbers together, and returns the sum. The public members <b>addNum</b> and <b>getTotal </b> are the interfaces to the outside world and a user needs to know them to use the class. The private member <b>total</b> is something that is hidden from the outside world, but is needed for the class to operate properly.</p>\n\n<h2>Designing Strategy</h2>\n\n<p>Most of us have learnt to make class members private by default unless we really need to expose them. That&#39;s just good <b>encapsulation</b>.</p>\n\n<p>This is applied most frequently to data members, but it applies equally to all members, including virtual functions.</p>\n"
          ]
        },
        {
          "tag_line": "Interfaces in C++ (Abstract Classes)",
          "qType": "en_1",
          "details": [
            "<h2>Interfaces in C++ (Abstract Classes)</h2>\n\n<p>An interface describes the behavior or capabilities of a C++ class without committing to a particular implementation of that class.</p>\n\n<p>The C++ interfaces are implemented using <b>abstract classes</b> and these abstract classes should not be confused with data abstraction which is a concept of keeping implementation details separate from associated data.</p>\n\n<p>A class is made abstract by declaring at least one of its functions as <b>pure virtual</b> function. A pure virtual function is specified by placing &quot;= 0&quot; in its declaration as follows &minus;</p>\n\n<pre class=\"result notranslate\">\nclass Box {\n   public:\n      // pure virtual function\n      virtual double getVolume() = 0;\n      \n   private:\n      double length;      // Length of a box\n      double breadth;     // Breadth of a box\n      double height;      // Height of a box\n};\n</pre>\n\n<p>The purpose of an <b>abstract class</b> (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit. Abstract classes cannot be used to instantiate objects and serves only as an <b>interface</b>. Attempting to instantiate an object of an abstract class causes a compilation error.</p>\n\n<p>Thus, if a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC. Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.</p>\n\n<p>Classes that can be used to instantiate objects are called <b>concrete classes</b>.</p>\n\n<h2>Abstract Class Example</h2>\n\n<p>Consider the following example where parent class provides an interface to the base class to implement a function called <b>getArea()</b> &minus;</p>\n\n<p><a class=\"demo\" href=\"http://tpcg.io/5qXjq1\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\n\n<pre class=\"prettyprint notranslate prettyprinted\" style=\"\">\n<span class=\"com\">#include</span><span class=\"pln\"> </span><span class=\"str\">&lt;iostream&gt;</span><span class=\"pln\">\n \n</span><span class=\"kwd\">using</span><span class=\"pln\"> </span><span class=\"kwd\">namespace</span><span class=\"pln\"> std</span><span class=\"pun\">;</span><span class=\"pln\">\n \n</span><span class=\"com\">// Base class</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"com\">// pure virtual function providing interface framework.</span><span class=\"pln\">\n      </span><span class=\"kwd\">virtual</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setWidth</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> w</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         width </span><span class=\"pun\">=</span><span class=\"pln\"> w</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n   \n      </span><span class=\"kwd\">void</span><span class=\"pln\"> setHeight</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> h</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n         height </span><span class=\"pun\">=</span><span class=\"pln\"> h</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"pun\">}</span><span class=\"pln\">\n   \n   </span><span class=\"kwd\">protected</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> width</span><span class=\"pun\">;</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> height</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n \n</span><span class=\"com\">// Derived classes</span><span class=\"pln\">\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Rectangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">);</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n\n</span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Triangle</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">Shape</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"kwd\">public</span><span class=\"pun\">:</span><span class=\"pln\">\n      </span><span class=\"kwd\">int</span><span class=\"pln\"> getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> \n         </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">width </span><span class=\"pun\">*</span><span class=\"pln\"> height</span><span class=\"pun\">)/</span><span class=\"lit\">2</span><span class=\"pun\">;</span><span class=\"pln\"> \n      </span><span class=\"pun\">}</span><span class=\"pln\">\n</span><span class=\"pun\">};</span><span class=\"pln\">\n \n</span><span class=\"kwd\">int</span><span class=\"pln\"> main</span><span class=\"pun\">(</span><span class=\"kwd\">void</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n   </span><span class=\"typ\">Rectangle</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">;</span><span class=\"pln\">\n   </span><span class=\"typ\">Triangle</span><span class=\"pln\">  </span><span class=\"typ\">Tri</span><span class=\"pun\">;</span><span class=\"pln\">\n \n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setWidth</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Print the area of the object.</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total Rectangle area: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Rect</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\">\n\n   </span><span class=\"typ\">Tri</span><span class=\"pun\">.</span><span class=\"pln\">setWidth</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">);</span><span class=\"pln\">\n   </span><span class=\"typ\">Tri</span><span class=\"pun\">.</span><span class=\"pln\">setHeight</span><span class=\"pun\">(</span><span class=\"lit\">7</span><span class=\"pun\">);</span><span class=\"pln\">\n   \n   </span><span class=\"com\">// Print the area of the object.</span><span class=\"pln\">\n   cout </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"str\">&quot;Total Triangle area: &quot;</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> </span><span class=\"typ\">Tri</span><span class=\"pun\">.</span><span class=\"pln\">getArea</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;&lt;</span><span class=\"pln\"> endl</span><span class=\"pun\">;</span><span class=\"pln\"> \n\n   </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\">\n</span><span class=\"pun\">}</span></pre>\n\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\n\n<pre class=\"result notranslate\">\nTotal Rectangle area: 35\nTotal Triangle area: 17\n</pre>\n\n<p>You can see how an abstract class defined an interface in terms of getArea() and two other classes implemented same function but with different algorithm to calculate the area specific to the shape.</p>\n\n<h2>Designing Strategy</h2>\n\n<p>An object-oriented system might use an abstract base class to provide a common and standardized interface appropriate for all the external applications. Then, through inheritance from that abstract base class, derived classes are formed that operate similarly.</p>\n\n<p>The capabilities (i.e., the public functions) offered by the external applications are provided as pure virtual functions in the abstract base class. The implementations of these pure virtual functions are provided in the derived classes that correspond to the specific types of the application.</p>\n\n<p>This architecture also allows new applications to be added to a system easily, even after the system has been defined.</p>\n"
          ]
        }
      ]
    }
  ]
}